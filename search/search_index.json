{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"","title":"Distant","text":"<p>Remote editing from the comfort of your local machine.</p>"},{"location":"about/architecture/","title":"Architecture","text":""},{"location":"about/architecture/#connection-models","title":"Connection models","text":"<p>When it comes to distant, there are three components:</p> <ul> <li>Client: used to submit requests to edit files, run programs, and more   from your local machine to a remote machine running a server.</li> <li>Server: used to process requests on a remote machine where the server is   running. For example, the server may get a request to write a file to disk or   spawn a new language server.</li> <li>Manager: used to manage connections to multiple servers to reduce how   many TCP connections are maintained between your local machine and one or   more remote machines.</li> </ul> <p>In the most straightforward form, the distant client on your local machine will connect directly to the distant server on a remote machine. This mirrors similar tooling like ssh.</p> <p></p> <p>Following this model, multiple connections to a server would result in multiple TCP connections. This is the traditional client/server model.</p> <p></p> <p>The distant cli provides a manager, used by default, to facilitate and coordinate connections with clients. On Unix systems, the manager listens on a Unix Domain Socket whereas on Windows the manager listens using a Named Pipe.</p> <p></p>"},{"location":"about/architecture/#establishing-connections","title":"Establishing connections","text":"<p>When a client first connects to a server, a TCP connection is established; however, that is not the end of the connection setup with distant! There are three primary steps that distant takes to fully configure a connection:</p> <ol> <li> <p>Derive: a codec used by the client &amp; server to encode messages to send    to each other. This includes any encryption to ensure privacy and prevent    tampering of your data as well as compress the byte stream to reduce the    burden on your bandwidth.</p> </li> <li> <p>Authenticate: where the client will prove its identity with the server.    This can vary depending on what methods the server supports, but by default    the server will have a unique, random passphrase whenever it is run that the    client will need to provide.</p> </li> <li> <p>Replay: any data that was dropped or missed between the client and    server. This happens whenever the client re-establishes a connection    with the server, and results in a more reliable connect to the user (you)    where any network glitches will be repaired by distant.</p> </li> </ol> <p></p>"},{"location":"about/architecture/#deriving-a-codec","title":"Deriving a codec","text":"<p>Before any authentication is performed or user messages are sent, distant ensures that the connection between the client and server is secure. To do this, the client and server agree upon the encryption and compression to use for the established connection.</p> <ol> <li> <p>Provide options: where the server will send the client all available    encryption and compression options. For example, if the server supports    ChaCha20-Poly1305, it    will communicate that as an option for the client. By default, distant    supports XChaCha20-Poly1305    and compression like gzip.</p> </li> <li> <p>Select choices: where the client will send the server the encryption and    compression it will use for the connection. The server will then reciprocate    by using the same encryption and compression.</p> </li> <li> <p>Derive shared key: where the client and server will derive a shared,    secret key for use with encryption. A random, public key and salt will be    generated on the client and server. The public key and salt will be sent    across, and then a mutual shared key will be derived. The shared key is NOT    sent across the network. Today, this is done using NIST P-256 elliptic curve    Diffie Hellman    (ECDH)    key exchange and a pseudorandom key (PRK) derived using    HKDF via an    HMAC-SHA256    hash function.</p> </li> </ol> <p></p>"},{"location":"about/architecture/#authenticating","title":"Authenticating","text":"<p>Once a secure connection is established, the server needs to ensure that the client has authority to submit requests that will be processed on the remote machine. Today, this is handled by validating a static passphrase/key, but in the future this will support additional authentication methods such as machine-local passphrases, public key authentication, and more.</p> <ol> <li> <p>Provide options: where the server will send the client all available    methods for authentication. Today, this is static_key, but in the future    could be methods like passphrase, public_key, sms, or even combination    requirements like passphrase,sms for 2FA.</p> </li> <li> <p>Select choices: where the client will send the server the methods it    will attempt to use for authentication. For example, public_key and    passphrase,sms would indicate that the client will authenticate using    either method.</p> </li> <li> <p>Authenticate using method: where the server will attempt to verify the    client's authority using one of the available methods. It will begin by    telling the client which method is being used. From there, the server will    issue a series of challenges (e.g. what is the passphrase?) where the client    will submit answers, a series of verification requests (e.g. is this host    okay?) where the client will submit confirmations, and info/error messages.</p> </li> </ol> <p>If authentication fails for a method, the next available and agreed upon    method will be used. If this is the last available method, the server will    sever the connection.</p> <ol> <li>Report success: where the server will send the client a confirmation    that authentication has succeeded. This lets the client know that no more    authentication methods will be started and no additional challenges,    verification requests, information, or errors will be sent.</li> </ol> <p></p>"},{"location":"about/architecture/#re-establishing-connection","title":"Re-establishing connection","text":"<p>When establishing a connection, there are two paths that can be taken: new connection and previous connection. For both paths, the client and server will derive a shared one-time password (OTP) that is used when re-establishing a connection to avoid needing to provide full re-authentication.</p> <p></p> <p>With an existing connection, the process is a bit different. When first connecting, after deriving the codec, the client will tell the server that it is an existing connection with a specific id and OTP.</p> <p>If the server is aware that a connection with the specified id exists and that connection had the matching password associated for re-authentication, then the server views the client as reconnecting and will agree to replay any dropped frames. If neither of the requirements holds true, then the server will sever the connection.</p> <p>Once a connection has been re-authenticated using the OTP, a new OTP is derived by the client and server to protect against resending the same password from a compromised client/server.</p> <p>The replay logic follows this process:</p> <ol> <li> <p>Both the client and server keep track of how many frames (packets) they have    sent and received.</p> </li> <li> <p>On reconnect, both client and server will send the other their sent and    received frame counts as well as the total frames saved in memory that can    be resent.</p> </li> <li> <p>Both client and server will proceed to send any missing frames that the    other side would not have processed due to the mismatched counts.</p> </li> <li> <p>Both client and server will wait to receive N missing frames up to the    available count from the other side.</p> </li> </ol> <p></p>"},{"location":"about/features/","title":"Features","text":"<p>Distant supports multiple backends to facilitate remote communication with another server. Today, these backends include:</p> <ul> <li>distant: a standalone server acting as the reference implementation.</li> <li>ssh: a wrapper around an ssh client that translates the distant protocol   into ssh server requests.</li> </ul> <p>Not every backend supports every feature of distant. Below is a table outlining the available features and which backend supports each feature:</p> Feature distant ssh Filesystem I/O      <sup>1</sup> Filesystem Watching <sup>2</sup> Process Execution   <sup>3</sup> Reconnect           <sup>4</sup> Search              <sup>5</sup> System Information  <sup>6</sup> <ol> <li> <p>able to read from and write to the filesystem.\u00a0\u21a9</p> </li> <li> <p>able to receive notifications when changes to the filesystem occur.\u00a0\u21a9</p> </li> <li> <p>able to execute processes.\u00a0\u21a9</p> </li> <li> <p>able to reconnect after network outages.\u00a0\u21a9</p> </li> <li> <p>able to search the filesystem.\u00a0\u21a9</p> </li> <li> <p>able to retrieve information about the system.\u00a0\u21a9</p> </li> </ol>"},{"location":"about/overview/","title":"Overview","text":"<p>Distant is a collection of tooling and libraries to support working with remote machines. In its simplest form, there is a client and server where you run the client on your local machine and the server on a remote machine. A TCP connection is established between the client and server, and from there you are able to edit files and run programs on the remote machine.</p> <ul> <li>Reading, writing, and querying a remote filesystem</li> <li>File IO</li> <li>Directory IO</li> <li>Search</li> <li>Executing and managing processes on the remote machine</li> <li>Run programs, writing to their stdin, and reading from their stdout/stderr</li> <li>Spawn shells using a PTY</li> </ul> <p>The distant cli is monolithic, meaning that all features are contained in a single binary. This means that you do not need to install a different program to run the client, server, or manager. You also do not need to worry about having different shared libraries (.so) or DLLs (.dll) available on your system to run distant.</p>"},{"location":"about/overview/#details","title":"Details","text":"<p>The distant binary supplies both a server and client component as well as a command to start a server and configure the local client to be able to talk to the server.</p> <ul> <li>Asynchronous in nature, powered by tokio</li> <li>Data is serialized to send across the wire via   msgpack</li> <li>Encryption &amp; authentication are handled via   XChaCha20Poly1305 for an authenticated   encryption scheme via   RustCrypto/ChaCha20Poly1305</li> </ul> <p>Additionally, the core of the distant client and server codebase can be pulled in to be used with your own Rust crates via the distant-core crate. The networking library, which is agnostic of distant protocols, can be used via the distant-net crate.</p>"},{"location":"editors/","title":"Editors","text":"<ul> <li> <p> Neovim</p> <p>Get started with using neovim to work on remote machines from your local terminal, keeping your existing plugins and configuration settings.</p> <p> Getting started</p> </li> </ul>"},{"location":"editors/neovim/","title":"Neovim","text":"<ul> <li> <p> Get connected in 5 minutes</p> <p>Install <code>distant</code> using our installation script and get a remote session going in minutes.</p> <p> Quickstart</p> </li> <li> <p> Configure in Lua</p> <p>Configure your remote editing experience to make it your own by defining your settings in Lua.</p> <p> Setup</p> </li> <li> <p> Learn vim commands</p> <p>Familiarize yourself with the commands at your disposal to work with remote files and processes.</p> <p> Commands</p> </li> <li> <p> Navigate remotely</p> <p>Traverse files and directories on the remote machine as if they are local to your editor.</p> <p> Navigation</p> </li> <li> <p> Explore the plugin</p> <p>Use the full power of the plugin to build your own extensions and tap into the more advanced functionality available.</p> <p> Explore</p> </li> <li> <p> Have questions?</p> <p>Check out the FAQ for answers to commonly-asked questions.</p> <p> FAQ</p> </li> </ul>"},{"location":"editors/neovim/commands/","title":"Commands","text":""},{"location":"editors/neovim/commands/#distant","title":"Distant","text":"<p>Open the distant user interface.</p>"},{"location":"editors/neovim/commands/#usage","title":"Usage","text":"<pre><code>:Distant\n</code></pre>"},{"location":"editors/neovim/commands/#distantcancelsearch","title":"DistantCancelSearch","text":"<p>Cancels the active search being performed on the remote machine.</p>"},{"location":"editors/neovim/commands/#usage_1","title":"Usage","text":"<pre><code>:DistantCancelSearch\n</code></pre>"},{"location":"editors/neovim/commands/#distantcheckhealth","title":"DistantCheckHealth","text":"<p>Checks the health of the distant plugin.</p>"},{"location":"editors/neovim/commands/#usage_2","title":"Usage","text":"<pre><code>:DistantCheckHealth\n</code></pre>"},{"location":"editors/neovim/commands/#notes","title":"Notes","text":"<ul> <li>This is the same as <code>:checkhealth distant</code>.</li> </ul>"},{"location":"editors/neovim/commands/#distantclientversion","title":"DistantClientVersion","text":"<p>Prints out the version of the locally-installed distant CLI.</p>"},{"location":"editors/neovim/commands/#usage_3","title":"Usage","text":"<pre><code>:DistantClientVersion\n</code></pre>"},{"location":"editors/neovim/commands/#distantconnect","title":"DistantConnect","text":"<p>Connects to a remote server.</p>"},{"location":"editors/neovim/commands/#usage_4","title":"Usage","text":"<pre><code>:DistantConnect destination [opt1=..., opt2=...]\n</code></pre> <p>Takes a <code>destination</code> as a positional argument. This can be something like <code>ssh://example.com</code> or <code>distant://example.com:8080</code>.</p> <p>Beyond the positional argument, you can supply these optional arguments as key-value pairs:</p> <ul> <li><code>options</code>: additional options to use while connecting. See the CLI   documentation for connecting for more   details on available options.</li> <li><code>log_level</code>: the level at which to log information about connecting. Can be   any of 'off', 'error', 'warn', 'info', 'debug', and 'trace'.</li> <li><code>log_file</code>: path to the file where information will be logged related to   connecting to the destination.</li> <li><code>timeout</code>: maximum time (in milliseconds) to wait for the connection to   succeed.</li> <li><code>interval</code>: time (in milliseconds) between checks to see if the connection   succeeded.</li> </ul> Example<pre><code>:DistantConnect ssh://example.com options=\"ssh.backend=libssh,ssh.verbose=true\"\n</code></pre>"},{"location":"editors/neovim/commands/#distantcopy","title":"DistantCopy","text":"<p>Copies a file or directory from src to dst on the remote machine.</p>"},{"location":"editors/neovim/commands/#usage_5","title":"Usage","text":"<pre><code>:DistantCopy src dst [opt1=... opt2=...]\n</code></pre> <p>Takes <code>src</code> and <code>dst</code> as positional arguments. These are paths that can be absolute or relative.</p> <p>Beyond the positional argument, you can supply these optional arguments as key-value pairs:</p> <ul> <li><code>timeout</code>: maximum time (in milliseconds) to wait for the operation to   succeed.</li> <li><code>interval</code>: time (in milliseconds) between checks to see if the operation   succeeded.</li> </ul> Example<pre><code>:DistantCopy /path/to/file.txt relative/new_file.txt\n</code></pre>"},{"location":"editors/neovim/commands/#distantinstall","title":"DistantInstall","text":"<p>Installs the distant CLI locally. Will provide a prompt to select between downloading a binary, building from source, and copying a local binary to be accessible.</p>"},{"location":"editors/neovim/commands/#usage_6","title":"Usage","text":"<pre><code>:DistantInstall [reinstall]\n</code></pre> <p>Takes optional <code>reinstall</code> to trigger an install even when the appropriate CLI is already available.</p>"},{"location":"editors/neovim/commands/#distantlaunch","title":"DistantLaunch","text":"<p>Launches a server on a remote machine and connects to it.</p>"},{"location":"editors/neovim/commands/#usage_7","title":"Usage","text":"<pre><code>:DistantLaunch destination [opt1=..., opt2=...]\n</code></pre> <p>Takes a <code>destination</code> as a positional argument. This can be something like <code>ssh://example.com</code> or <code>manager://localhost</code>.</p> <p>Beyond the positional argument, you can supply these optional arguments as key-value pairs:</p> <ul> <li><code>options</code>: additional options to use while launching. See the CLI   documentation for launching for more   details on available options.</li> <li><code>log_level</code>: the level at which to log information about launching. Can be   any of 'off', 'error', 'warn', 'info', 'debug', and 'trace'.</li> <li><code>log_file</code>: path to the file where information will be logged related to   launching the server.</li> <li><code>timeout</code>: maximum time (in milliseconds) to wait for the launching to   succeed.</li> <li><code>interval</code>: time (in milliseconds) between checks to see if launching   succeeded.</li> </ul> Example<pre><code>:DistantLaunch ssh://example.com options=\"distant.bin=/path/to/distant,ssh.verbose=true\"\n</code></pre>"},{"location":"editors/neovim/commands/#distantmetadata","title":"DistantMetadata","text":"<p>Display metadata for specified path on remote machine.</p>"},{"location":"editors/neovim/commands/#usage_8","title":"Usage","text":"<pre><code>:DistantMetadata path [opt1=... opt2=...]\n</code></pre> <p>Takes a <code>path</code> as a positional argument. This can be something like <code>/path/to/file.txt</code>.</p> <p>Beyond the positional argument, you can supply these optional arguments as key-value pairs:</p> <ul> <li><code>canonicalize</code>: if true, will resolve the file path to an absolute path with   no relative components (<code>.</code> or <code>..</code>) and traverses symlinks to their   referenced paths.</li> <li><code>resolve_file_type</code>: if true, will report the underlying type pointed to by   symlinks rather than symlink itself.</li> <li><code>timeout</code>: maximum time (in milliseconds) to wait for retrieving metadata to   succeed.</li> <li><code>interval</code>: time (in milliseconds) between checks to see if retrieving   metadata succeeded.</li> </ul> Example<pre><code>:DistantMetadata /path/to/file.txt canonicalize=true\n</code></pre>"},{"location":"editors/neovim/commands/#distantmkdir","title":"DistantMkdir","text":"<p>Creates a new directory on the remote machine.</p>"},{"location":"editors/neovim/commands/#usage_9","title":"Usage","text":"<pre><code>:DistantMkdir path [opt1=... opt2=...]\n</code></pre> <p>Takes a <code>path</code> as a positional argument. This can be something like <code>/path/to/dir</code>.</p> <p>Beyond the positional argument, you can supply these optional arguments as key-value pairs:</p> <ul> <li><code>all</code>: if true, create any missing components in the path.</li> <li><code>timeout</code>: maximum time (in milliseconds) to wait for the operation to   succeed.</li> <li><code>interval</code>: time (in milliseconds) between checks to see if the operation   succeeded.</li> </ul> Example<pre><code>:DistantMkdir /path/to/dir all=true\n</code></pre>"},{"location":"editors/neovim/commands/#distantopen","title":"DistantOpen","text":"<p>Open a file or directory on the remote machine.</p>"},{"location":"editors/neovim/commands/#usage_10","title":"Usage","text":"<pre><code>:DistantOpen [path] [opt1=... opt2=...]\n</code></pre> <p>Takes a <code>path</code> as a positional argument. This can be something like <code>/path/to/file.txt</code>. If no path is supplied, <code>.</code> is used in its place.</p> <p>Beyond the positional argument, you can supply these optional arguments as key-value pairs:</p> <ul> <li><code>bufnr</code>: if provided, will use this buffer to house the opened path,   otherwise will reuse the active buffer.</li> <li><code>winnr</code>: if provided, will use this window to house the opened path,   otherwise will reuse the active window.</li> <li><code>line</code>: if provided, will jump to this line in the opened path (base 1).</li> <li><code>col</code>: if provided, will jump to this column in the opened path (base 1).</li> <li><code>client_id</code>: if provided, will use the client with this id instead of the   active client to open the path.</li> <li><code>reload</code>: if true, will reload the given path completely, re-initializing   syntax, LSP clients, keymappings, and other settings.</li> <li><code>no_focus</code>: if true, will not switch focus to the window housing the opened   path.</li> <li><code>timeout</code>: maximum time (in milliseconds) to wait for opening to succeed.</li> <li><code>interval</code>: time (in milliseconds) between checks to see if opening   succeeded.</li> </ul> Example<pre><code>:DistantOpen /path/to/file.txt reload=true\n</code></pre>"},{"location":"editors/neovim/commands/#distantremove","title":"DistantRemove","text":"<p>Removes a file or directory on the remote machine.</p>"},{"location":"editors/neovim/commands/#usage_11","title":"Usage","text":"<pre><code>:DistantRemove path [opt1=... opt2=...]\n</code></pre> <p>Takes a <code>path</code> as a positional argument. This can be something like <code>/path/to/file.txt</code>. Bang is supported force removal of non-empty directories (<code>:DistantRemove! path</code>).</p> <p>Beyond the positional argument, you can supply these optional arguments as key-value pairs:</p> <ul> <li><code>timeout</code>: maximum time (in milliseconds) to wait for the operation to   succeed.</li> <li><code>interval</code>: time (in milliseconds) between checks to see if the operation   succeeded.</li> </ul> Example<pre><code>:DistantRemove /path/to/file.txt\n</code></pre>"},{"location":"editors/neovim/commands/#distantrename","title":"DistantRename","text":"<p>Renames a file or directory on the remote machine.</p>"},{"location":"editors/neovim/commands/#usage_12","title":"Usage","text":"<pre><code>:DistantRename src dst [opt1=... opt2=...]\n</code></pre> <p>Takes a <code>src</code> and <code>dst</code> as positional arguments.</p> <p>Beyond the positional arguments, you can supply these optional arguments as key-value pairs:</p> <ul> <li><code>timeout</code>: maximum time (in milliseconds) to wait for the operation to   succeed.</li> <li><code>interval</code>: time (in milliseconds) between checks to see if the operation   succeeded.</li> </ul> Example<pre><code>:DistantRename /path/to/file.txt /other/file.txt\n</code></pre>"},{"location":"editors/neovim/commands/#distantsearch","title":"DistantSearch","text":"<p>Performs a remote search, placing matches in a quick-fix list.</p>"},{"location":"editors/neovim/commands/#usage_13","title":"Usage","text":"<pre><code>:DistantSearch pattern [path=...] [target=...] [opt1=... opt2=...]\n</code></pre> <p>Takes a <code>pattern</code> as a positional argument. This is a regular expression used to find matches.</p> <p>Beyond the positional argument, you can supply these optional arguments as key-value pairs:</p> <ul> <li><code>path</code>: alternative path to search for the given <code>pattern</code>. By default, this   will search <code>.</code> recursively.</li> <li><code>target</code>: target of the search, defaulting to searching the contents of files   for matches. Can be one of <code>contens</code> or <code>path</code>.</li> <li><code>limit</code>: maximum results to acquire before ending the search. By default,   this search will continue until all paths have been traversed fully.</li> <li><code>max_depth</code>: maximum depth to traverse for results. By default, there is no   limit.</li> <li><code>follow_symlinks</code>: if true, will traverse symlinks when searching.</li> <li><code>upward</code>: if true, will search up the parent paths rather than recursively   into children.</li> <li><code>timeout</code>: maximum time (in milliseconds) to wait for the operation to   succeed.</li> <li><code>interval</code>: time (in milliseconds) between checks to see if the operation   succeeded.</li> </ul> Example<pre><code>:DistantSearch \"hello.*\" path=/some/path\n</code></pre>"},{"location":"editors/neovim/commands/#distantsessioninfo","title":"DistantSessionInfo","text":"<p>Display information about the active connection to a server.</p>"},{"location":"editors/neovim/commands/#usage_14","title":"Usage","text":"<pre><code>:DistantSessionInfo\n</code></pre>"},{"location":"editors/neovim/commands/#distantshell","title":"DistantShell","text":"<p>Spawns a remote shell for the current connection.</p>"},{"location":"editors/neovim/commands/#usage_15","title":"Usage","text":"<pre><code>:DistantShell [cmd arg1 arg2 ...]\n</code></pre> <p>Takes a series of positional arguments to represent the full command. By default, if no command is supplied, the default shell is used.</p> Example<pre><code>:DistantShell /usr/bin/python\n</code></pre>"},{"location":"editors/neovim/commands/#distantspawn","title":"DistantSpawn","text":"<p>Executes a remote command, printing the results.</p>"},{"location":"editors/neovim/commands/#usage_16","title":"Usage","text":"<pre><code>:DistantSpawn cmd [arg1 arg2 ...]\n</code></pre> <p>Takes a series of positional arguments to represent the full command. The first is used as the path to the command.</p> Example<pre><code>:DistantSpawn echo hello\n</code></pre>"},{"location":"editors/neovim/commands/#distantsysteminfo","title":"DistantSystemInfo","text":"<p>Display information about the system of the active, connected remote server.</p>"},{"location":"editors/neovim/commands/#usage_17","title":"Usage","text":"<pre><code>:DistantSystemInfo\n</code></pre>"},{"location":"editors/neovim/faq/","title":"FAQ","text":""},{"location":"editors/neovim/faq/#why-would-i-use-this-plugin-over-neovim-09s-remote-tui","title":"Why would I use this plugin over neovim 0.9's remote TUI?","text":"<p>The primary difference to consider is that the neovim remote TUI functionality operates on keystrokes and mouse input while distant does networking through actions:</p> <ul> <li> <p>With keystrokes and mouse input, everything you type such as navigating   through a file, highlighting text, yanking text, or changing a word gets   communicated to the remote neovim instance. This means that network latency   can have a major impact on your editing experience causing stuttering or   other noticeable delays.</p> </li> <li> <p>In contrast with actions, distant only sends network traffic for operations   like writing and reading a file or executing a program. This means that your   typing experience is not impacted by network latency. Distant only sends   requests when you do something that needs to interact remotely.</p> </li> </ul> <p>In addition to reducing the impact of network latency, distant also offers some additional features which - at the time of neovim 0.9 - are additional advantages over neovim's TUI:</p> <ul> <li> <p>Security: distant provides authentication and encryption using a modern   AEAD algorithm, ChaCha20-Poly1305 (specifically   XChaCha20-Poly1305).</p> </li> <li> <p>Programability: distant and distant.nvim provide a well-defined API to   leverage the full suite of functionality including file IO, searching,   watching, and process execution.</p> </li> <li> <p>Persistence: distant supports persistent connections over TCP that will   reconnect when the network is dropped, enabling more stable and consistent   interactions with the remote machine.</p> </li> </ul>"},{"location":"editors/neovim/faq/#how-does-this-plugin-differ-from-using-neovim-with-sshfs","title":"How does this plugin differ from using neovim with sshfs?","text":"<p>There are a couple of primary differences that come to mind:</p> <ol> <li> <p>Filesystem: sshfs is built using FUSE, meaning that you    need support for it as a userland filesystem. distant.nvim    requires no special filesystem as the file contents are only reflected in    buffers. Anything you read goes into a buffer and anything you write gets    transmitted across the network directly through the distant library.</p> </li> <li> <p>Program locations: distant supports running programs on the    remote machine, colocated with your files. Language servers would run on the    remote machine, for instance. When using sshfs to mount the remote    file system on your local machine, you would then run programs locally and    point them to the mounted files.</p> </li> </ol>"},{"location":"editors/neovim/faq/#resources","title":"Resources","text":"<p>With distant, you are leveraging the resources of a remote machine. This can be advantageous if you want to perform CPU or GPU intensive operations without heavily impacting your local machine. With sshfs, you are leveraging the resources of a local machine for programs that you run. Depending on what you're doing, this can be much more expensive.</p>"},{"location":"editors/neovim/faq/#network-latency","title":"Network latency","text":"<p>If a program needs to access the filesystem frequently, this would transmit a lot of requests over the network, especially if working over a large set of files. With distant, all of the filesystem operations would happen directly on the remote machine and only the program's output would be transmitted over the network.</p>"},{"location":"editors/neovim/faq/#strengths-weaknesses","title":"Strengths &amp; weaknesses","text":"<p>There are other technical differences, but the distinctions above are - at the moment - the differences that stand out. In some cases, using sshfs might be preferred, but for my use personally and at work this is the preferred method. </p> <p>If you want to think of what this more closely relates to, then take a look at VS Code Remote Development or the formerly-active Nuclide project.</p>"},{"location":"editors/neovim/installation/","title":"Installation","text":"<p>This plugin acts as a wrapper around the <code>distant</code> binary. In order for this plugin to function, you need to have the <code>distant</code> binary installed on your local machine and accessible from neovim.</p> <p>Sound complicated? Not to worry! This plugin provides support to automatically install the binary for you and will automatically begin the dialog when you first attempt to invoke a command or function associated with the plugin.</p>"},{"location":"editors/neovim/installation/#installation-process","title":"Installation process","text":"<p>Note</p> <p>If you already have the <code>distant</code> binary (or <code>distant.exe</code> on Windows) accessible (i.e. on your path), then you can skip this installation process! Just make sure that you have a version installed that is compatible with the neovim plugin!</p> <p>You can trigger the installation dialog manually by running <code>:DistantInstall</code>, which will check if you have a copy of <code>distant</code> available that is the correct version. If the version is incompatible or no copy of <code>distant</code> is found, a dialog will trigger offering three choices:</p> <ol> <li>Download a prebuilt binary</li> <li>Build from source</li> <li>Copy local binary</li> </ol>"},{"location":"editors/neovim/installation/#download-a-prebuilt-binary","title":"Download a prebuilt binary","text":"<p>Selecting this option will query Github releases for compatible versions, downloading the release you select. The specific binary will be downloaded based on the detected operation system and architecture of your local machine. </p> <p>For instance, an M1 Mac will download <code>distant-aarch64-apple-darwin</code> whereas an Intel-based Linux machine will download <code>distant-x86_64-unknown-linux-gnu</code>. The downloaded binary will be renamed to work with this plugin.</p> <p>This requires that your machine have <code>curl</code>, <code>wget</code>, or <code>fetch</code> installed and available on your path.</p>"},{"location":"editors/neovim/installation/#available-binaries","title":"Available binaries","text":"Operating System Architecture Binary Windows x86_64 x86_64-pc-windows-mscv Windows aarch64 aarch64-pc-windows-mscv MacOS x86_64 x86_64-apple-darwin MacOS aarch64 aarch64-apple-darwin Linux x86_64 (GNU) x86_64-unknown-linux-gnu Linux x86_64 (MUSL) x86_64-unknown-linux-musl Linux aarch64 (GNU) aarch64-unknown-linux-gnu Linux aarch64 (MUSL) aarch64-unknown-linux-musl Linux arm-v7 (GNU) armv7-unknown-linux-gnueabihf Dragonfly BSD x86_64 (not yet supported) FreeBSD x86_64 x86_64-unknown-freebsd NetBSD x86_64 (not yet supported) OpenBSD x86_64 (not yet supported) <p>Note</p> <p>For Linux operating systems, you have a choice of glibc (GNU) musl libc. The installer will pick GNU, so if you want the musl version, you will need to download it yourself.</p>"},{"location":"editors/neovim/installation/#build-from-source","title":"Build from source","text":"<p>Selecting this option will download the latest copy of the distant repository from https://github.com/chipsenkbeil/distant.</p> <p>Once downloaded, the source will be built using <code>cargo build --release</code> and the resulting binary will be copied into the appropriate location.</p> <p>This requires that your machine have both <code>git</code> and <code>cargo</code> installed. Additionally, due to the build requirements of distant's library, you will also need <code>perl</code> to build a vendored copy of <code>openssh</code>.</p>"},{"location":"editors/neovim/installation/#copy-local-binary","title":"Copy local binary","text":"<p>Selecting this option will prompt for the path to an executable to copy to the lua directory of this plugin.</p>"},{"location":"editors/neovim/navigation/","title":"Navigation","text":"<p>Out of the box, the distant plugin provides file navigation with a similar experience to netrw. You can modify or disable entirely these bindings by configuring them during setup.</p>"},{"location":"editors/neovim/navigation/#within-a-file","title":"Within a file","text":"Key Action <code>-</code> Opens up the parent directory of the current file"},{"location":"editors/neovim/navigation/#within-a-directory","title":"Within a directory","text":"Key Action <code>&lt;Return&gt;</code> Opens the file or directory under the cursor <code>-</code> Opens up the parent directory of the current directory <code>&lt;Shift-K&gt;</code> Creates a new directory within the current directory <code>&lt;Shift-N&gt;</code> Creates a new file within the current directory <code>&lt;Shift-R&gt;</code> Renames the file or directory under the cursor <code>&lt;Shift-D&gt;</code> Removes the file or directory under the cursor <code>&lt;Shift-M&gt;</code> Displays metadata for the file or directory under the cursor <code>&lt;Shift-C&gt;</code> Copies the file or directory under the cursor"},{"location":"editors/neovim/quickstart/","title":"Quickstart","text":""},{"location":"editors/neovim/quickstart/#1-add-the-distant-plugin-to-neovim","title":"1. Add the distant plugin to neovim","text":"<p>Install distant.nvim using your favorite neovim plugin manager. Below are a few examples of package managers that you can use to install and setup distant.</p>"},{"location":"editors/neovim/quickstart/#using-lazy","title":"Using lazy","text":"<pre><code>{\n    'chipsenkbeil/distant.nvim', \n    branch = 'v0.3',\n    config = function()\n        require('distant'):setup()\n    end\n}\n</code></pre>"},{"location":"editors/neovim/quickstart/#using-packer","title":"Using packer","text":"<pre><code>use {\n    'chipsenkbeil/distant.nvim',\n    branch = 'v0.3',\n    config = function()\n        require('distant'):setup()\n    end\n}\n</code></pre>"},{"location":"editors/neovim/quickstart/#using-plug","title":"Using plug","text":"<pre><code>Plug 'chipsenkbeil/distant.nvim', {\n\\ 'branch': 'v0.3',\n\\ 'do': ':lua require(\"distant\"):setup()'\n\\ }\n</code></pre>"},{"location":"editors/neovim/quickstart/#2-install-distant-on-your-local-machine","title":"2. Install distant on your local machine","text":"<p>Note</p> <p>If you already have <code>distant</code> installed with a version that is compatible with the plugin, this step can be skipped. You can verify if distant is installed correctly by running <code>:checkhealth distant</code>.</p> <p>Using the plugin, you can execute this command:</p> <pre><code>:DistantInstall\n</code></pre> <p>A prompt will be provided where you can download a pre-built binary for your local machine that will be placed in <code>~/.local/share/nvim/distant/</code> on Unix systems or <code>~\\AppData\\Local\\nvim-data\\distant/</code> on Windows.</p> <p>You can verify that it is available by running <code>:DistantClientVersion</code>.</p> <p>See the neovim installation guide for more information.</p>"},{"location":"editors/neovim/quickstart/#3-install-distant-on-your-remote-machine","title":"3. Install distant on your remote machine","text":"<p>Note</p> <p>If you want to just use distant to connect to an ssh server, you can skip this and the remaining steps and use <code>:DistantConnect ssh://example.com</code>.</p> <p>Log into your remote machine and run this command to download a script to run to install distant. In this example, we'll use ssh to install distant on a Unix-compatible server (example.com):</p> <pre><code>ssh example.com 'curl -L https://sh.distant.dev | sh -s -- --on-conflict overwrite'\n</code></pre> <p>See the distant CLI installation guide for more information.</p>"},{"location":"editors/neovim/quickstart/#4-launch-and-connect-to-distant-on-your-remote-machine","title":"4. Launch and connect to distant on your remote machine","text":"<p>Now that <code>distant</code> is available on both your local and remote machine, you can start a server and connect to it all in one step using this command:</p> <pre><code>:DistantLaunch ssh://example.com\n</code></pre> <p>This will do the following:</p> <ol> <li>Log into <code>example.com</code> on port <code>22</code> using ssh</li> <li>Start the distant server on an open TCP port using <code>distant server listen    --daemon</code></li> <li>Disconnect from the ssh server</li> <li>Connect to <code>example.com</code> on the bound TCP port of the distant server</li> </ol> <p>Note</p> <p>If you want more control over the port used by distant, you can provide an additional argument to <code>DistantLaunch</code> to spawn the server on the specified port such as this example to run distant on port <code>8080</code>:</p> <pre><code>:DistantLaunch ssh://example.com distant.args=\"--port 8080\"\n</code></pre>"},{"location":"editors/neovim/quickstart/#5-open-a-file-on-your-remote-machine","title":"5. Open a file on your remote machine","text":"<p>Opening a file is as simple as using a single command like below:</p> <pre><code>:DistantOpen /path/to/file.txt\n</code></pre> <p>This will open <code>/path/to/file.txt</code> by reading the remote file into a buffer in your local neovim instance. From then on, and changes made will be written back to the remote file.</p>"},{"location":"editors/neovim/lua/","title":"Lua","text":"<p>The distant plugin comes with a vast API available in Lua. All of the public API methods are accessible through the top-level plugin object made available from requiring distant:</p> <pre><code>local plugin = require('distant')\n</code></pre> <ul> <li> <p> Initialization</p> <p>See how the plugin is initialized and how you can verify the plugin is ready to be used.</p> <p> Initialization</p> </li> <li> <p> Connection Management</p> <p>Manage connections directly in Lua.</p> <p> Connection Management</p> </li> <li> <p> Settings</p> <p>Access and modify settings tied to the plugin.</p> <p> Settings</p> </li> <li> <p> API</p> <p>Explore the full power of distant through a Lua interface to its API.</p> <p> API</p> </li> <li> <p> Buffers</p> <p>Access remote-specific information tied to buffers managed by this plugin.</p> <p> Buffers</p> </li> <li> <p> Editor</p> <p>Directly invoke editor-specific functions.</p> <p> Editor</p> </li> <li> <p> Events</p> <p>Tap into the events exposed by the plugin for greater insight and control.</p> <p> Events</p> </li> <li> <p> Shells</p> <p>Spawn shells to remote machines directly using Lua.</p> <p> Shells</p> </li> <li> <p> Wrapping Commands</p> <p>Wrap commands to be executed on the remote machine, enabling easier integration with other plugins that take command strings.</p> <p> Wrapping commands</p> </li> <li> <p> Version</p> <p>Understand the version of the plugin being used from Lua.</p> <p> Version</p> </li> <li> <p> Utilities</p> <p>Check out additional utility functions exposed by the plugin.</p> <p> Utilities</p> </li> </ul>"},{"location":"editors/neovim/lua/buffers/","title":"Buffers","text":"<p>For buffers managed by distant, the plugin interface exposes a <code>buf</code> field that enables you to access and manipulate distant-specific information tied to a buffer as well as search for specific remote buffers.</p>"},{"location":"editors/neovim/lua/buffers/#buffer-interface","title":"Buffer interface","text":"<p>By default, if you access the <code>buf</code> field, all data operations will apply to the current buffer:</p> <pre><code>-- Will retrieve distant-specific data for the current buffer\nplugin.buf.get_data()\n</code></pre> <p>If you want to access or manipulate data for a specific buffer, you can instead invoke <code>buf</code> as a function, providing the buffer's id as the argument:</p> <pre><code>-- Will retrieve distant-specific data for buffer whose number is 123\nplugin.buf(123).get_data()\n</code></pre>"},{"location":"editors/neovim/lua/buffers/#data-api","title":"Data API","text":"<p>The primary API exposed by the buffer interface is retrieving and manipulating distant-specific information. All of the information is stored in the buffer-local variable <code>distant</code>, which you can access within neovim through the scoped variable <code>b:distant</code>.</p> <p>The buffer interface exposes methods to simplify accessing and manipulating specific portions or the entire data stored in the buffer.</p>"},{"location":"editors/neovim/lua/buffers/#data-table","title":"Data table","text":"<p>If you directly access the data stored in <code>b:distant</code>, you will find a table comprised of the following fields, not all of which may be present:</p> Field Description client_id Numeric id of the connection associated with the buffer path Path on the remote machine (no scheme) alt_paths Alternative paths, usually relative, that also map to the primary path type Indicates the path type (<code>dir</code> or <code>file</code>) mtime Numeric UNIX timestamp (in seconds) representing last modified time remotely watched Watched state, which can be <code>false</code>, <code>true</code>, or <code>\"locked\"</code>"},{"location":"editors/neovim/lua/buffers/#retrieving-data","title":"Retrieving data","text":"<p>You can retrieve the data as a Lua table using <code>data</code> like below:</p> <pre><code>-- This can be a Lua table or nil if b:distant is not present\nlocal data = plugin.buf.data()\n</code></pre> <p>If you want to check for the presence of data before accessing it, you can use the <code>has_data</code> function:</p> <pre><code>if plugin.buf.has_data() then\n    -- Do something if the buffer has data.\n    -- You can use this to assert that a buffer is remote!\nend\n</code></pre>"},{"location":"editors/neovim/lua/buffers/#modifying-data","title":"Modifying data","text":"<p>If you want to modify the data as a whole, there are two means to do this:</p> <ol> <li>Call <code>set_data(data)</code>, passing it a new table to use. Be careful with this    method, is it is easy to corrupt the state of a buffer. Prefer more specific    methods instead.</li> <li>Call <code>mutate_data(fn)</code>, which takes a function to modify and return a table    to be used as the new data.</li> </ol> <pre><code>-- Set distant data directly\n-- Will return true if successful\nplugin.buf.set_data({ client_id = 123, path = '/path/to/file.txt' })\n\n-- Mutate distant data\n-- Will return true if successful\nplugin.buf.mutate_data(function(data)\n  data.path = '/path/to/file.txt'\n  return data\nend)\n</code></pre> <p>Lastly, if you want to remove all remote information from a buffer, you can call <code>clear</code>; however, this is discouraged unless you REALLY know what you are doing:</p> <pre><code>-- Will return true if successful\nplugin.buf.clear()\n</code></pre>"},{"location":"editors/neovim/lua/buffers/#client-id","title":"Client id","text":"<p>If you need to work with the client id (aka connection) associated with the buffer, there are two methods:</p> <ul> <li><code>set_client_id(id)</code> is used to update the client id of the buffer</li> <li><code>client_id()</code> is used to retrieve the client id of the buffer</li> </ul> <pre><code>local id = plugin.buf.client_id()\n\n-- Will return true if successful\nplugin.buf.set_client_id(123)\n</code></pre>"},{"location":"editors/neovim/lua/buffers/#path","title":"Path","text":"<p>Representing the primary remote path associated with the buffer, this is populated when a file or directory is first opened. The <code>path</code> should be the canonicalized path provided by the server, meaning that any symlinks or relative components are resolved.</p> <ul> <li><code>set_path(path)</code> is used to update the buffer's path</li> <li><code>path()</code> is used to retrieve the buffer's path</li> </ul> <pre><code>local path = plugin.buf.path()\n\n-- Will return true if successful\nplugin.buf.set_path('/path/to/file.txt')\n</code></pre>"},{"location":"editors/neovim/lua/buffers/#alternate-paths","title":"Alternate paths","text":"<p>Representing the alternative remote path associated with the buffer, this is a list of strings representing other paths that evaluate to the <code>path</code> when they are canonicalized. This list is updated whenever a request to open a path is provided that resolves to an existing buffer's path. For instance, if <code>.</code> resolves to <code>/path/to/file.txt</code> and you then open <code>/path/to/./file.txt</code>, the alternative paths should include both <code>.</code> and <code>/path/to/./file.txt</code>.</p> <ul> <li><code>set_alt_paths(paths)</code> is used to update the buffer's alternate paths</li> <li><code>add_alt_path(path, opts)</code> is used to append the path to the buffer's   alternate paths. Opts is an optional table, where specifying <code>dedup = true</code>   will result in the alternate paths being deduplicated.</li> <li><code>alt_paths()</code> is used to retrieve the buffer's alternate paths</li> </ul> <pre><code>-- List of paths: { '.', '/path/to/./file.txt' }\nlocal paths = plugin.buf.alt_paths()\n\n-- Append a path to our list\nplugin.buf.add_alt_path('./file.txt')\n\n-- Append a path to our list and deduplicate the list\nplugin.buf.add_alt_path('./file.txt', { dedup = true })\n\n-- Will return true if successful\nplugin.buf.set_alt_paths({ '.', '/path/to/./file.txt' })\n</code></pre>"},{"location":"editors/neovim/lua/buffers/#type","title":"Type","text":"<p>Representing the file type of the remote path associated with the buffer, this is populated when a file or directory is first opened.</p> <ul> <li><code>set_type(ty)</code> is used to update the buffer's type</li> <li><code>type()</code> is used to retrieve the buffer's type</li> </ul> <pre><code>-- Could be 'dir' or 'file'\nlocal ty = plugin.buf.type()\n\n-- Will return true if successful\nplugin.buf.set_type('dir')\n</code></pre>"},{"location":"editors/neovim/lua/buffers/#modification-time","title":"Modification time","text":"<p>Representing the last time (in seconds as Unix timestamp) the remote path associated with the buffer was modified. This is populated when a file or directory is first opened, and is updated whenever the file is reopened, written to locally, or a watch event is received for this buffer's path.</p> <ul> <li><code>set_mtime(mtime)</code> is used to update the buffer's modification time</li> <li><code>mtime()</code> is used to retrieve the buffer's modification time</li> </ul> <pre><code>local mtime = plugin.buf.mtime()\n\n-- Will return true if successful\nplugin.buf.set_mtime(1234)\n</code></pre>"},{"location":"editors/neovim/lua/buffers/#watched","title":"Watched","text":"<p>Representing the watch status of the remote path associated with the buffer. This is populated when a file or directory is first opened, and is updated whenever during the process of watching a file and once a file is successfully being watched.</p> <ul> <li><code>set_watched(watched)</code> is used to update the buffer's watch status</li> <li><code>watched()</code> is used to retrieve the buffer's watch status</li> </ul> <pre><code>-- Could be false (not watched), true (actively watching), or \"locked\" meaning\n-- that the file is in the process of being watched or avoiding triggering\n-- watch events (such as when writing the file from neovim)\nlocal watched = plugin.buf.watched()\n\n-- Will return true if successful\nplugin.buf.set_watched(true)\n</code></pre>"},{"location":"editors/neovim/lua/buffers/#name-api","title":"Name API","text":"<p>Another feature available through the buffer interface is working with buffer names. In order for distant to operate on multiple connections, it uses a distinct name format that encodes both a scheme (<code>distant</code>) and a client id (aka connection). There are two supported ways that this name can be represented:</p> <ul> <li><code>modern</code> - <code>[{SCHEME}[+{CONNECTION}]://PATH</code> (e.g.   <code>distant+1234://some/file.txt</code>)</li> <li><code>legacy</code> - <code>[{SCHEME}://[{CONNECTION}://]PATH</code> (e.g.   <code>distant://1234://some/file.txt</code>)</li> </ul> <p>Note</p> <p>As of today, neovim will always use the <code>legacy</code> format. If neovim/23834 gets implemented, we can detect the neovim version and use the modern format; otherwise, we will be stuck with \"legacy\" forever.</p> <p>All name API methods are accessible from the <code>name</code> table:</p> <pre><code>plugin.buf.name.parse('...')\n</code></pre>"},{"location":"editors/neovim/lua/buffers/#default-format","title":"Default format","text":"<p>Returns the default format used for parsing and building a buffer's name. Until neovim/23834 is merged, this will return <code>legacy</code>:</p> <pre><code>local format = plugin.buf.name.default_format()\nassert(format == 'legacy')\n</code></pre>"},{"location":"editors/neovim/lua/buffers/#prefix","title":"Prefix","text":"<p>Returns the prefix tied to the buffer's name, a provided name, or builds a prefix from the given components. The function accepts an optional table to dictate what to parse or use to construct the prefix.</p>"},{"location":"editors/neovim/lua/buffers/#parsing-from-an-explicit-name","title":"Parsing from an explicit name","text":"<p>If you provide <code>name</code>, it will be parsed for the prefix:</p> <pre><code>-- You can supply an optional `format` field to override the prefix format\n-- such as `format = 'legacy'`\nlocal prefix = plugin.buf.name.prefix({ name = 'distant://1234//some/file.txt' })\nassert(prefix == 'distant://1234')\n</code></pre>"},{"location":"editors/neovim/lua/buffers/#parsing-from-the-buffers-name","title":"Parsing from the buffer's name","text":"<p>If you provide no <code>name</code> or <code>scheme</code>, the buffer's name will be retrieved and parsed for the prefix:</p> <pre><code>-- You can supply an optional table to override the prefix format\n-- using { format = 'legacy' }\nlocal prefix = plugin.buf.name.prefix()\n\n-- Assuming the buffer's name was something like distant://1234://some/file.txt\nassert(prefix == 'distant://1234')\n</code></pre>"},{"location":"editors/neovim/lua/buffers/#building-from-components","title":"Building from components","text":"<p>If you provide a <code>scheme</code> and an optional <code>connection</code>, it will be used to build a prefix:</p> <pre><code>-- You can supply an optional `format` field to override the prefix format\n-- such as `format = 'legacy'`\nlocal prefix = plugin.buf.name.prefix({ scheme = 'distant', connection = 1234 })\nassert(prefix == 'distant://1234')\n</code></pre>"},{"location":"editors/neovim/lua/buffers/#building-a-name","title":"Building a name","text":"<p>The <code>build</code> function is provided to construct a complete buffer name. The function takes a single table as an argument, which is comprised of these fields:</p> <ul> <li><code>path</code>: (required) the path to the file or directory.</li> <li><code>scheme</code>: (optional) the scheme to use. Ideally, this is <code>distant</code>. If you do   not supply a scheme, the name created will resemble a local buffer.</li> <li><code>connection</code>: (optional) the id of the specific connection tied to the   buffer. If you do not supply one, it will not be included, which means that   the buffer would be represented by the active connection. In most cases, you   will want to provide the connection's id to ensure the buffer doesn't switch   to a different remote machine.</li> <li><code>format</code>: (optional) the format to use when constructing the name. If not   supplied, this will leverage <code>default_format()</code>.</li> </ul> <pre><code>local name = plugin.buf.name.build({\n    path = 'some/file.txt',\n    scheme = 'distant',\n    connection = 1234,\n    format = 'legacy',\n})\nassert(name == 'distant://1234://some/file.txt')\n</code></pre>"},{"location":"editors/neovim/lua/buffers/#parsing-a-name","title":"Parsing a name","text":"<p>The <code>parse</code> function is provided to parse a buffer's name into its components. The function takes an optional table as an argument, which is comprised of these fields:</p> <ul> <li><code>name</code>: (optional) the buffer name to parse. If not provided, will parse the   buffer's name.</li> <li><code>format</code>: (optional) the format to use when parsing the name. If not   supplied, this will leverage <code>default_format()</code>.</li> </ul> <p>The returned value is a table that contains one or more of these fields:</p> <ul> <li><code>path</code>: the path represented by the buffer. This will always be populated.</li> <li><code>connection</code>: the numeric id of the connection. Will only appear if contained   in the parsed name.</li> <li><code>scheme</code>: the scheme associated with the buffer. Will only appear if   contained in the parsed name.</li> </ul> <pre><code>-- Parses the current buffer's name with the default format\nlocal pieces = plugin.buf.name.parse()\n\n-- Parses the specific buffer's name with the default format\nlocal pieces = plugin.buf(123).name.parse()\n\n-- Parses the specific name with the default format\nlocal pieces = plugin.buf.name.parse({ name = 'distant://1234://some/file.txt' })\nassert(pieces.path == 'some/file.txt')\nassert(pieces.connection == 1234)\nassert(pieces.scheme == 'distant')\n</code></pre>"},{"location":"editors/neovim/lua/buffers/#search-api","title":"Search API","text":"<p>Alongside the other APIs, the buffer interface also exposes a simplified experience in locating buffers by their paths. Specifically, there are three methods available:</p> <ul> <li> <p><code>has_matching_path(path, opts)</code>: checks if the buffer has a matching path   within its <code>path</code> or <code>alt_paths</code> data. The opts table is optional and can   contain a <code>connection</code> field to require that the buffer not only has the   specified <code>path</code> but also is the same connection.</p> </li> <li> <p><code>find(opts)</code>: searches through all buffers for one that that meets the   specified conditions. If a match is found, a buffer interface is returned for   the matched buffer:</p> <ul> <li><code>opts.path</code>: looks for a buffer with the specified path either as its   <code>path</code> or within its <code>alt_paths</code>.</li> <li><code>opts.connection</code>: if provided, will limit the search to only buffers   with the specified connection id.</li> <li><code>opts.format</code>: format of buffer names to search. If not provided, uses   <code>name.default_format()</code>.</li> </ul> </li> <li> <p><code>find_bufnr(opts)</code>: same as <code>find(opts)</code>, but returns the number of the   buffer instead of the buffer interface.</p> </li> </ul> <pre><code>-- Check if the current buffer is pointing to the specified path for the\n-- specific connection\nif plugin.buf.has_matching_path('some/file.txt', { connection = 1234 }) then\n    -- Do something\nend\n\n-- Search for a buffer, returning nil if nothing found\n-- The returned buffer has the same buffer interface\nlocal buffer = plugin.buf.find({ path = '.', connection = 1234 })\nif buffer then\n    -- Print out the buffer's number\n    print(buffer.bufnr())\n\n    -- Print out the true path of the buffer\n    print(buffer.path())\nend\n\n-- Retrieves the id of the buffer above, returning nil if not found\nlocal bufnr = plugin.buf.find_bufnr({ path = '.', connection = 1234 })\n</code></pre>"},{"location":"editors/neovim/lua/events/","title":"Events","text":"<p>During the plugin's lifetime, there are a variety of events that occur such as the active connection changing. You can listen to these events and respond using Lua callbacks.</p> <ul> <li><code>connection:changed</code>: triggered whenever the active connection changes.</li> <li><code>manager:started</code>: triggered when a manager was not running and was therefore   started by this plugin.</li> <li><code>manager:loaded</code>: triggered when a manager is loaded for the first time,   which can occur both from starting a manager or connecting to an existing   one.</li> <li><code>setup:finished</code>: triggered when the call to <code>setup()</code> completes.</li> </ul>"},{"location":"editors/neovim/lua/events/#pluginonevent-handler","title":"plugin:on(event, handler)","text":"<p>This function ties a <code>handler</code> to an event, invoking the handler whenever the event is emitted. Handlers accept a single payload as part of the event emission, which can hold data relevant to the specific event. The following events have a payload:</p> <ul> <li><code>connection:changed</code>: payload is the client tied to the connection.</li> <li><code>manager:started</code>: payload is the manager that was started.</li> <li><code>manager:loaded</code>: payload is the manager that was loaded.</li> </ul> Example<pre><code>plugin:on('connection:changed', function(client)\n  -- Use the client tied to the connection\nend)\n</code></pre>"},{"location":"editors/neovim/lua/events/#pluginonceevent-handler","title":"plugin:once(event, handler)","text":"<p>Similar to <code>plugin:on</code>, this function also takes a <code>handler</code> to tie to an event, but the handler is only triggered once before it is disassociated with the event.</p> Example<pre><code>plugin:once('connection:changed', function(client)\n  -- Use the client tied to the connection\nend)\n</code></pre>"},{"location":"editors/neovim/lua/events/#pluginoffevent-handler","title":"plugin:off(event, handler)","text":"<p>This function disables event emission for a specific handler that was registered earlier.</p> Example<pre><code>function handler()\nend\n\n-- Enable the handler for an event\nplugin:on('connection:changed', handler)\n\n-- Disable the handler for the same event\nplugin:off('connection:changed', handler)\n</code></pre>"},{"location":"editors/neovim/lua/initialization/","title":"Initialization","text":"<p>The plugin is lazily-loaded, meaning that it is not fully loaded until some method or field is accessed for the first time. This is done to avoid cyclical dependencies as well as reduce the initial startup time of neovim when leveraging distant.</p> <p>Beyond lazily loading, the plugin also needs to be properly initialized, which involves standing up autocommands and vim commands alongside preparing to use a manager for connections. To configure the plugin, you need to call the setup command:</p> <pre><code>plugin:setup()\n</code></pre> <p>Normally you would do this as part of your neovim configuration. There is no harm in calling this method more than once, but only the first invocation will actually perform all initialization procedures.</p> <p>You can check for the plugin being initialized (calling <code>setup</code>) by invoking the <code>is_initialized</code> function:</p> <pre><code>assert(plugin:is_initialized(), 'Distant plugin not initialized')\n</code></pre> <p>Checkout the setup documentation for more information about configuring the plugin.</p>"},{"location":"editors/neovim/lua/settings/","title":"Settings","text":"<p>Settings are normally defined as part of setting up the plugin during the setup stage:</p> <pre><code>plugin:setup({\n  buffer = {\n    watch = {\n      enabled = true\n    }\n  }\n})\n</code></pre> <p>You can also update settings post-setup by directly modifying the <code>settings</code> field on the plugin itself. Keep in mind that some settings may only be read once, meaning that modifying them later may not always result in the change being applied (e.g. keymaps).</p> <pre><code>plugin.settings.buffer.watch.enabled = true\n</code></pre>"},{"location":"editors/neovim/lua/shells/","title":"Shells","text":"<p>As distant supports shells that give you full access to the remote machine, you can spawn a shell inside a neovim buffer by using the <code>spawn_shell</code> function:</p> Example<pre><code>plugin:spawn_shell()\n</code></pre> <p>The function accepts a variety of arguments as part of an options table:</p> <ul> <li><code>bufnr</code>: specifies the buffer to use. If -1, will create a new buffer.   Default is -1.</li> <li><code>winnr</code>: specifies the window to use. Default is current window.</li> <li><code>cmd</code>: is the optional command to use instead of the server's default shell.   Can be either a string or a list of strings representing the command and its   arguments.</li> <li><code>cwd</code>: is the optional current working directory to set for the shell when   spawning it.</li> <li><code>env</code>: is the optional map of environment variable values to supply to the   shell. This is a table of key-value pairs.</li> </ul> Example<pre><code>plugin:spawn_shell({\n  cmd = '/usr/local/python',\n  env = {\n    ['MYVAR'] = 'abcd',\n  },\n})\n</code></pre>"},{"location":"editors/neovim/lua/version/","title":"Version","text":"<p>If you need access to the supported version of distant or the version of the plugin itself, you can access this directly from the <code>version</code> field.</p> <p>All versions follow Semantic Versioning 2.0.0 and are instances of the version table.</p>"},{"location":"editors/neovim/lua/version/#cli-version","title":"CLI version","text":"<p>Today, the plugin exposes a minimum version requirement for the local distant CLI used to communicate with servers and run/speak with the manager.</p> <pre><code>-- Minimum version of the CLI supported by the plugin\nplugin.version.cli.min\n</code></pre>"},{"location":"editors/neovim/lua/version/#plugins-version","title":"Plugin's version","text":"<p>The plugin itself has a version that is followed, typically aligning to both the branch and (if applicable) tag:</p> <pre><code>-- Version of the plugin itself, which is normally a rough estimate such as 0.3\nplugin.version.plugin\n</code></pre>"},{"location":"editors/neovim/lua/wrapping/","title":"Wrapping commands","text":"<p>Any command can be invoked using distant, which will result in the command being executed in the remote machine. Wrapping a command is the process of supplying some command that you want to run, and the output is the actual command you will run locally to map the stdin, stdout, and stderr of the remote process to your local machine.</p>"},{"location":"editors/neovim/lua/wrapping/#pluginwrapopts","title":"plugin:wrap(opts)","text":"<p>This function performs a client wrapping of the given <code>cmd</code>, <code>lsp</code>, or <code>shell</code> parameter.</p> Example<pre><code>local cmd = plugin:wrap({ cmd = 'echo $PATH', shell = true })\n</code></pre> <p>Returns a string if the input is a string, or a list if the input is a list.</p> <p>The function accepts a variety of arguments as part of an options table:</p> <ul> <li> <p><code>client_id</code>: if provided, will wrap using the specified client.</p> </li> <li> <p><code>cmd</code>: wraps a regular command, which can be in the form of a single string   or a list of strings representing the command and its arguments.</p> </li> <li> <p><code>lsp</code>: wraps an LSP server command, which can be in the form of a single string   or a list of strings representing the command and its arguments. This is   distinct as handling language servers involves translating URIs between   distant protocol and local <code>file://</code>.</p> </li> <li> <p><code>shell</code>: wraps a regular command, which can be in the form of a boolean   value, a single string, or a list of strings representing the command and its   arguments. If <code>true</code> is provided, the default shell is used.</p> <p>In the case of <code>cmd</code> or <code>lsp</code> being provided, this is instead used to denote if the command should be invoked from inside a shell, using the default shell or an explicitly-provided shell.</p> </li> <li> <p><code>cwd</code>: specifies the current working directory (as a string) for the command,   defaulting to the server's current working directory.</p> </li> <li> <p><code>env</code>: specifies environment variables in the form of a table of string -&gt;   string for the spawned process.</p> </li> <li> <p><code>scheme</code>: if provided, uses this scheme instead of the default (lsp only).   You really should not need to touch this parameter.</p> </li> </ul> <p>If <code>client_id</code> is provided, will wrap using the given client; otherwise, will use the active client. Will fail if the client is not available.</p>"},{"location":"editors/neovim/lua/wrapping/#pluginspawn_wrapopts-cb","title":"plugin:spawn_wrap(opts, cb)","text":"<p>Like <code>plugin:wrap</code>, but actually spawns the wrapped command, returning a job object representing the wrapped command.</p> Example<pre><code>local job = plugin:spawn_wrap({ cmd = 'echo $PATH', shell = true })\n</code></pre> <p>Returns a job representing the spawned process.</p> <p>The function accepts a variety of arguments as part of an options table:</p> <ul> <li> <p><code>client_id</code>: if provided, will wrap using the specified client.</p> </li> <li> <p><code>cmd</code>: wraps a regular command, which can be in the form of a single string   or a list of strings representing the command and its arguments.</p> </li> <li> <p><code>shell</code>: wraps a regular command, which can be in the form of a boolean   value, a single string, or a list of strings representing the command and its   arguments. If <code>true</code> is provided, the default shell is used.</p> <p>In the case of <code>cmd</code> being provided, this is instead used to denote if the command should be invoked from inside a shell, using the default shell or an explicitly-provided shell.</p> </li> <li> <p><code>cwd</code>: specifies the current working directory (as a string) for the command,   defaulting to the server's current working directory.</p> </li> <li> <p><code>env</code>: specifies environment variables in the form of a table of string -&gt;   string for the spawned process.</p> </li> </ul> <p>If <code>client_id</code> is provided, will wrap using the given client; otherwise, will use the active client. Will fail if the client is not available.</p>"},{"location":"editors/neovim/lua/core/job/","title":"Job","text":"<p>A job is a specialized Lua table that tracks the ongoing status of a remote process and provides mechanisms to both write to the stdin and retrieve the stdout and stderr of the process.</p>"},{"location":"editors/neovim/lua/core/job/#jobid","title":"job:id()","text":"<p>Returns the number representing the id of the job if it is running; otherwise, this function will fail.</p>"},{"location":"editors/neovim/lua/core/job/#jobis_running","title":"job:is_running()","text":"<p>Returns <code>true</code> if the job is still running, otherwise <code>false</code>.</p>"},{"location":"editors/neovim/lua/core/job/#jobstdout_lines","title":"job:stdout_lines()","text":"<p>Returns a list of strings representing the lines of stdout received for the remote process. This is only populated if the job is buffering its stdout.</p>"},{"location":"editors/neovim/lua/core/job/#jobstderr_lines","title":"job:stderr_lines()","text":"<p>Returns a list of strings representing the lines of stderr received for the remote process. This is only populated if the job is buffering its stderr.</p>"},{"location":"editors/neovim/lua/core/job/#jobexit_status","title":"job:exit_status()","text":"<p>Returns the exit status of the job if it has completed, otherwise will be <code>nil</code>.</p> <p>The exit status is a table comprised of these fields:</p> <ul> <li><code>success</code>: a boolean indicating whether the process succeeded or failed.</li> <li><code>exit_code</code>: the exit code tied to the process.</li> <li><code>signal</code>: if the exit code corresponds to a signal, then this is populated   with the signal's number as described in POSIX.</li> <li><code>stdout</code>: a list of strings representing the stdout of the process over its   lifetime. This is only populated if the job is buffering its stdout.</li> <li><code>stderr</code>: a list of strings representing the stderr of the process over its   lifetime. This is only populated if the job is buffering its stderr.</li> </ul>"},{"location":"editors/neovim/lua/core/job/#jobwritedata","title":"job:write(data)","text":"<p>Writes <code>data</code> to the remote process by feeding it as stdin to the local proxy job. <code>data</code> may be a string, string convertible, blob, or a list of strings that will be joined by newline characters.</p> <p>Returns the number of bytes written or 0 if writing failed.</p>"},{"location":"editors/neovim/lua/core/job/#jobstop","title":"job:stop()","text":"<p>Stops the local job, which in turn may or may not kill the remote process.</p>"},{"location":"editors/neovim/lua/core/version/","title":"Version","text":"<p>A version is a specialized Lua table that provides a structured view into a Semantic Version. The version table has the following fields:</p> <ul> <li><code>major</code>: major version, which will always exist.</li> <li><code>minor</code>: (optional) minor version. If <code>nil</code>, logically this will be treated   as 0 for other methods.</li> <li><code>patch</code>: (optional) patch version. If <code>nil</code>, logically this will be treated   as 0 for other methods.</li> <li><code>prerelease</code>: (optional) prerelease version as a list of strings. If <code>nil</code>,   will be ignored for other methods.</li> <li><code>build</code>: (optional) build version as a list of strings. Is not used in other   methods.</li> </ul>"},{"location":"editors/neovim/lua/core/version/#constructor","title":"Constructor","text":"<p>If you want to create a version, this can be done using the <code>new</code> method, which takes a table comprised of one or more of the version fields:</p> <pre><code>local version = Version:new({\n    major = 1,\n    minor = 2,\n    patch = 3,\n    prerelease = { 'alpha', '4' },\n    build = { '2023', '07', '24' },\n})\nassert(version:as_string(), '1.2.3-alpha.4+2023.07.24')\n</code></pre>"},{"location":"editors/neovim/lua/core/version/#parsing","title":"Parsing","text":"<p>Outside of creating a version manually, you can also parse a string into a version using either <code>parse</code> or <code>try_parse</code>. Both perform the same work, but <code>parse</code> will throw an error if the string does not follow semantic versioning whereas <code>try_parse</code> will return <code>nil</code> in the case that parsing fails.</p> <p>Both functions have a signature that takes two arguments: a string and an optional table of options. For the options table, you can provide <code>strict = true</code> to force the version to have a major, minor, and patch component, otherwise values like <code>1</code> will translate to <code>1.0.0</code>, etc.</p> <pre><code>-- Parses full version, populating all relevant fields\nlocal version = Version:parse('1.2.3-alpha.4+2023.07.24')\n\n-- Throws error because not a version\nVersion:parse('abc')\n\n-- Throws error because not a complete version\nVersion:parse('1', { strict = true })\n</code></pre>"},{"location":"editors/neovim/lua/core/version/#incrementing","title":"Incrementing","text":"<p>In a situation where you have a version and want to increment it, you can use the <code>inc(level)</code> method. This increments this version by the specified <code>level</code>, returning a new copy as a result.</p> <p>The <code>level</code> supplied can be one of the following strings: <code>major</code>, <code>minor</code>, or <code>patch</code>. In the event that you do not supply a level, <code>patch</code> will be used.</p> <p>In the case where <code>minor</code> or <code>patch</code> are not set in the version, they will be set to 0 prior to incrementing.</p> <pre><code>-- Increment the patch version, going from 1.2.3 -&gt; 1.2.4\nlocal version = Version:new({ major = 1, minor = 2, patch = 3 }):inc()\nassert(version:as_string() == '1.2.4')\n\n-- Increment the minor version, going from 1 -&gt; 1.1.0\nlocal version = Version:new({ major = 1 }):inc('minor')\nassert(version:as_string() == '1.1.0')\n\n-- Increment the major version, going from 1.2.3 -&gt; 2.0.0\nlocal version = Version:new({ major = 1, minor = 2, patch = 3 }):inc('major')\nassert(version:as_string() == '2.0.0')\n</code></pre>"},{"location":"editors/neovim/lua/core/version/#comparing-compatibility","title":"Comparing &amp; compatibility","text":"<p>A common practice when working with versions it to compare them. To that end, you can use the <code>cmp(other)</code> or <code>compatible(version)</code> methods. In addition, the version table implements the metatable functions for <code>__le</code>, <code>__lt</code>, <code>__eq</code>, <code>__gt</code>, and <code>__ge</code> utilizing the <code>cmp</code> function for order and equality.</p> <p>For <code>cmp</code>, the version is compared with <code>other</code> following semver 2.0.0 specification:</p> <ul> <li>Returns -1 if lower precedence than <code>other</code> version.</li> <li>Returns 0 if equal precedence to <code>other</code> version.</li> <li>Returns 1 if higher precedence than <code>other</code> version.</li> <li>Missing <code>minor</code> and <code>patch</code> versions are treated as 0.</li> </ul> <pre><code>-- a &lt; b, therefore returns -1\nlocal a = Version:parse('1.2.3')\nlocal b = Version:parse('1.3.0')\nassert(a:cmp(b) == -1)\n</code></pre> <p>For <code>compatible</code>, this follows both Semantic Version 2.0.0 and Cargo rulesets to see if this version is binary-compatible with the supplied <code>version</code>, which can be a string or version instance itself:</p> <pre><code>local version = Version:parse('1.2.3')\n\n-- This is true as 1.2.3 is &gt;= 1.2.0 and &lt; 2.0.0\nassert(version:compatible('1.2'))\n</code></pre> <p>Given an input version below, the following range is allowed:</p> <pre><code>1.2.3  :=  &gt;=1.2.3, &lt;2.0.0\n1.2    :=  &gt;=1.2.0, &lt;2.0.0\n1      :=  &gt;=1.0.0, &lt;2.0.0\n0.2.3  :=  &gt;=0.2.3, &lt;0.3.0\n0.2    :=  &gt;=0.2.0, &lt;0.3.0\n0.0.3  :=  &gt;=0.0.3, &lt;0.0.4\n0.0    :=  &gt;=0.0.0, &lt;0.1.0\n0      :=  &gt;=0.0.0, &lt;1.0.0\n</code></pre>"},{"location":"editors/neovim/lua/core/version/#converting-to-string","title":"Converting to string","text":"<p>Converting a version table back into a string is simple and can be done by calling the <code>as_string</code> method or leveraging the metatable method <code>__tostring</code>:</p> <pre><code>local version = Version:new({ major = 1, minor = 2, patch = 3 })\nassert(version:as_string(), '1.2.3')\nassert(tostring(version), '1.2.3')\n</code></pre>"},{"location":"editors/neovim/lua/core/version/#prerelease","title":"Prerelease","text":"<p>As the prerelease is optional in a semantic version, you can check if it exists by calling <code>has_prerelease</code>, and access the prerelease as a singular string joined by periods by calling <code>prerelease_string</code>.</p> <pre><code>local version = Version:parse('1.2.3-alpha.4')\nassert(version:has_prerelease())\nassert(version:prerelease_string() == 'alpha.4')\n</code></pre>"},{"location":"editors/neovim/lua/core/version/#build","title":"Build","text":"<p>As the build is optional in a semantic version, you can check if it exists by calling <code>has_build</code>, and access the build as a singular string joined by periods by calling <code>build_string</code>.</p> <pre><code>local version = Version:parse('1.2.3+2023.07.24')\nassert(version:has_build())\nassert(version:build_string() == '2023.07.24')\n</code></pre>"},{"location":"editors/neovim/setup/","title":"Setup","text":"<p>When leveraging the distant plugin, the very first step you must take is setting up the plugin by calling the <code>setup</code> function.</p> <pre><code>local plugin = require('distant')\nplugin:setup()\n</code></pre> <p>Out of the box, this function will do the following: </p> <ul> <li>Check the CLI and start a manager for remote connections</li> <li>Initialize autocommands for reading and writing files prefixed with <code>distant://</code></li> <li>Initialize vim commands for distant such as <code>:DistantLaunch</code></li> <li>Initialize user interface for use with <code>:Distant</code></li> <li>Provide sane defaults for settings and merge in user-defined settings</li> </ul>"},{"location":"editors/neovim/setup/#user-defined-settings","title":"User-defined settings","text":"<p>The first argument to the <code>setup</code> function is a table of settings to apply that will override the defaults. You can provide these settings as either a series of nested tables and values or a key represented as a dot-separated path with an associated value.</p> <p>For example, these two calls are equivalent:</p> <pre><code>{\n    network = {\n        timeout = {\n            max = 1000\n        }\n    }\n}\n</code></pre> <pre><code>{\n    ['network.timeout.max'] = 1000\n}\n</code></pre> <p>Check out the following documentation for different settings:</p> <ul> <li> Neovim buffers</li> <li> Client binary</li> <li> Neovim keymappings</li> <li> Manager binary</li> <li> Distant networking</li> <li> Server configurations</li> </ul>"},{"location":"editors/neovim/setup/buffer/","title":"Buffer","text":"<p>All settings found under the <code>buffer</code> key.</p> <pre><code>local plugin = require('distant')\nplugin:setup({\n   buffer = {}\n})\n</code></pre>"},{"location":"editors/neovim/setup/buffer/#bufferwatchenabled","title":"buffer.watch.enabled","text":"AboutValue <p>Indicates if file watching is enabled. When <code>true</code>, each file that is opened by distant will be watched for changes.</p> <p>Boolean representing watch logic being enabled. [default: true]</p> Example<pre><code>{\n    buffer = {\n        watch = {\n            enabled = true\n        }\n    }\n}\n</code></pre>"},{"location":"editors/neovim/setup/buffer/#bufferwatchretry_timeout","title":"buffer.watch.retry_timeout","text":"AboutValue <p>Amount of time between attempts to retry a watch request for a buffer when the path represented by the buffer does not exist.</p> <p>Integer representing time in milliseconds. Set to 0 to disable. [default: 5000]</p> Example<pre><code>{\n    buffer = {\n        watch = {\n            retry_timeout = 5000\n        }\n    }\n}\n</code></pre>"},{"location":"editors/neovim/setup/client/","title":"Client","text":"<p>All settings found under the <code>client</code> key.</p> <pre><code>local plugin = require('distant')\nplugin:setup({\n   client = {}\n})\n</code></pre>"},{"location":"editors/neovim/setup/client/#clientbin","title":"client.bin","text":"AboutValue <p>Path to the binary to use for distant on the local machine where neovim is running.</p> <p>Path to the distant binary. [default: distant or distant.exe]</p> Example<pre><code>{\n    client = {\n        bin = '/path/to/distant'\n    }\n}\n</code></pre>"},{"location":"editors/neovim/setup/client/#clientlog_file","title":"client.log_file","text":"AboutValue <p>Path where logging should be placed for the distant binary being used as the client. In other words, all of the local logging outside the plugin, server, and manager will go here.</p> <p>Path to the log file. [default: nil]</p> Example<pre><code>{\n    client = {\n        log_file = '/path/to/client.log'\n    }\n}\n</code></pre>"},{"location":"editors/neovim/setup/client/#clientlog_level","title":"client.log_level","text":"AboutValue <p>Logging level used for client-based logging tied to the distant binary.</p> <p>String representing the level. [default: info] Choices are off, error, warn, info, debug, trace.</p> Example<pre><code>{\n    client = {\n        log_level = 'info'\n    }\n}\n</code></pre>"},{"location":"editors/neovim/setup/keymap/","title":"Keymap","text":"<p>All settings found under the <code>keymap</code> key.</p> <pre><code>local plugin = require('distant')\nplugin:setup({\n   keymap = {}\n})\n</code></pre>"},{"location":"editors/neovim/setup/keymap/#keymapdirenabled","title":"keymap.dir.enabled","text":"AboutValue <p>Indicates if assigning keymaps to directories opened with distant is enabled. When <code>true</code>, whenever a buffer is created that represents a directory on a remote machine managed by distant, keymappings defined for remote directories are applied to the buffer.</p> <p>Boolean representing directory keymappings being enabled. [default: true]</p> Example<pre><code>{\n    keymap = {\n        dir = {\n            enabled = false\n        }\n    }\n}\n</code></pre>"},{"location":"editors/neovim/setup/keymap/#keymapdircopy","title":"keymap.dir.copy","text":"AboutValue <p>Keymap to use for copying a file or directory under cursor in a directory buffer.</p> <p>String or list of strings where each string represents a key combination that can be performed to trigger the action. [default: \"C\"]</p> <p>Note this is <code>&lt;Shift-C&gt;</code> to trigger the action.</p> Example<pre><code>{\n    keymap = {\n        dir = {\n            copy = 'C'\n        }\n    }\n}\n</code></pre>"},{"location":"editors/neovim/setup/keymap/#keymapdiredit","title":"keymap.dir.edit","text":"AboutValue <p>Keymap to use for opening a file or directory under cursor in a directory buffer.</p> <p>String or list of strings where each string represents a key combination that can be performed to trigger the action. [default: \"\"] Example<pre><code>{\n    keymap = {\n        dir = {\n            edit = '&lt;Return&gt;'\n        }\n    }\n}\n</code></pre>"},{"location":"editors/neovim/setup/keymap/#keymapdirmetadata","title":"keymap.dir.metadata","text":"AboutValue <p>Keymap to use for opening metadata about a file or directory under cursor in a directory buffer.</p> <p>String or list of strings where each string represents a key combination that can be performed to trigger the action. [default: \"M\"]</p> <p>Note this is <code>&lt;Shift-M&gt;</code> to trigger the action.</p> Example<pre><code>{\n    keymap = {\n        dir = {\n            metadata = 'M'\n        }\n    }\n}\n</code></pre>"},{"location":"editors/neovim/setup/keymap/#keymapdirnewdir","title":"keymap.dir.newdir","text":"AboutValue <p>Keymap to use for creating a new directory in a directory buffer.</p> <p>String or list of strings where each string represents a key combination that can be performed to trigger the action. [default: \"K\"]</p> <p>Note this is <code>&lt;Shift-K&gt;</code> to trigger the action.</p> Example<pre><code>{\n    keymap = {\n        dir = {\n            newdir = 'K'\n        }\n    }\n}\n</code></pre>"},{"location":"editors/neovim/setup/keymap/#keymapdirnewfile","title":"keymap.dir.newfile","text":"AboutValue <p>Keymap to use for creating a new file in a directory buffer.</p> <p>String or list of strings where each string represents a key combination that can be performed to trigger the action. [default: \"N\"]</p> <p>Note this is <code>&lt;Shift-N&gt;</code> to trigger the action.</p> Example<pre><code>{\n    keymap = {\n        dir = {\n            newfile = 'N'\n        }\n    }\n}\n</code></pre>"},{"location":"editors/neovim/setup/keymap/#keymapdirrename","title":"keymap.dir.rename","text":"AboutValue <p>Keymap to use for renaming a file or directory under cursor in a directory buffer.</p> <p>String or list of strings where each string represents a key combination that can be performed to trigger the action. [default: \"R\"]</p> <p>Note this is <code>&lt;Shift-R&gt;</code> to trigger the action.</p> Example<pre><code>{\n    keymap = {\n        dir = {\n            rename = 'R'\n        }\n    }\n}\n</code></pre>"},{"location":"editors/neovim/setup/keymap/#keymapdirremove","title":"keymap.dir.remove","text":"AboutValue <p>Keymap to use for removing a file or directory under cursor in a directory buffer.</p> <p>String or list of strings where each string represents a key combination that can be performed to trigger the action. [default: \"D\"]</p> <p>Note this is <code>&lt;Shift-D&gt;</code> to trigger the action.</p> Example<pre><code>{\n    keymap = {\n        dir = {\n            remove = 'D'\n        }\n    }\n}\n</code></pre>"},{"location":"editors/neovim/setup/keymap/#keymapdirup","title":"keymap.dir.up","text":"AboutValue <p>Keymap to use for moving up to the parent directory in a directory buffer.</p> <p>String or list of strings where each string represents a key combination that can be performed to trigger the action. [default: \"-\"]</p> Example<pre><code>{\n    keymap = {\n        dir = {\n            up = '-'\n        }\n    }\n}\n</code></pre>"},{"location":"editors/neovim/setup/keymap/#keymapfileenabled","title":"keymap.file.enabled","text":"AboutValue <p>Indicates if assigning keymaps to files opened with distant is enabled. When <code>true</code>, whenever a buffer is created that represents a file on a remote machine managed by distant, keymappings defined for remote files are applied to the buffer.</p> <p>Boolean representing file keymappings being enabled. [default: true]</p> Example<pre><code>{\n    keymap = {\n        file = {\n            enabled = false\n        }\n    }\n}\n</code></pre>"},{"location":"editors/neovim/setup/keymap/#keymapfileup","title":"keymap.file.up","text":"AboutValue <p>Keymap to use for moving up to the parent directory in a file buffer.</p> <p>String or list of strings where each string represents a key combination that can be performed to trigger the action. [default: \"-\"]</p> Example<pre><code>{\n    keymap = {\n        file = {\n            up = '-'\n        }\n    }\n}\n</code></pre>"},{"location":"editors/neovim/setup/keymap/#keymapuiexit","title":"keymap.ui.exit","text":"AboutValue <p>Keymap to use for exiting an open window in the UI.</p> <p>String or list of strings where each string represents a key combination that can be performed to trigger the action. [default: \"q\" or <code>&lt;Esc&gt;</code>]</p> Example<pre><code>{\n    keymap = {\n        ui = {\n            exit = {'q', '&lt;Esc&gt;'}\n        }\n    }\n}\n</code></pre>"},{"location":"editors/neovim/setup/keymap/#keymapuimainconnectionskill","title":"keymap.ui.main.connections.kill","text":"AboutValue <p>Keymap to use for killing the connection under cursor from within the connections tab of the main UI window opened using <code>:Distant</code>.</p> <p>String or list of strings where each string represents a key combination that can be performed to trigger the action. [default: \"K\"]</p> <p>Note this is <code>&lt;Shift-K&gt;</code> to trigger the action.</p> Example<pre><code>{\n    keymap = {\n        ui = {\n            main = {\n                connections = {\n                    kill = 'K'\n                }\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"editors/neovim/setup/keymap/#keymapuimainconnectionstoggle_info","title":"keymap.ui.main.connections.toggle_info","text":"AboutValue <p>Keymap to use for toggling more information about the connection under cursor from within the connections tab of the main UI window opened using <code>:Distant</code>.</p> <p>String or list of strings where each string represents a key combination that can be performed to trigger the action. [default: \"I\"]</p> <p>Note this is <code>&lt;Shift-I&gt;</code> to trigger the action.</p> Example<pre><code>{\n    keymap = {\n        ui = {\n            main = {\n                connections = {\n                    toggle_info = 'I'\n                }\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"editors/neovim/setup/keymap/#keymapuimaintabsgoto_connections","title":"keymap.ui.main.tabs.goto_connections","text":"AboutValue <p>Keymap to use for navigating to the connections tab within the main UI window opened using <code>:Distant</code>.</p> <p>String or list of strings where each string represents a key combination that can be performed to trigger the action. [default: \"1\"]</p> Example<pre><code>{\n    keymap = {\n        ui = {\n            main = {\n                tabs = {\n                    goto_connections = '1'\n                }\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"editors/neovim/setup/keymap/#keymapuimaintabsgoto_system_info","title":"keymap.ui.main.tabs.goto_system_info","text":"AboutValue <p>Keymap to use for navigating to the system info tab within the main UI window opened using <code>:Distant</code>.</p> <p>String or list of strings where each string represents a key combination that can be performed to trigger the action. [default: \"2\"]</p> Example<pre><code>{\n    keymap = {\n        ui = {\n            main = {\n                tabs = {\n                    goto_system_info = '2'\n                }\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"editors/neovim/setup/keymap/#keymapuimaintabsgoto_help","title":"keymap.ui.main.tabs.goto_help","text":"AboutValue <p>Keymap to use for navigating to the help tab within the main UI window opened using <code>:Distant</code>.</p> <p>String or list of strings where each string represents a key combination that can be performed to trigger the action. [default: \"?\"]</p> Example<pre><code>{\n    keymap = {\n        ui = {\n            main = {\n                tabs = {\n                    goto_help = '?'\n                }\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"editors/neovim/setup/keymap/#keymapuimaintabsrefresh","title":"keymap.ui.main.tabs.refresh","text":"AboutValue <p>Keymap to use for refreshing the content within the main UI window opened using <code>:Distant</code> for the current tab.</p> <p>String or list of strings where each string represents a key combination that can be performed to trigger the action. [default: \"R\"]</p> <p>Note this is <code>&lt;Shift-R&gt;</code> to trigger the action.</p> Example<pre><code>{\n    keymap = {\n        ui = {\n            main = {\n                tabs = {\n                    refresh = 'R'\n                }\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"editors/neovim/setup/manager/","title":"Manager","text":"<p>All settings found under the <code>manager</code> key.</p> <pre><code>local plugin = require('distant')\nplugin:setup({\n   manager = {}\n})\n</code></pre>"},{"location":"editors/neovim/setup/manager/#managerdaemon","title":"manager.daemon","text":"AboutValue <p>Indicate when neovim starts a manager if it will be run as a daemon, which will detach it from the neovim process. This means that the manager will persist after neovim itself exits.</p> <p>Boolean representing whether or not to run the manager as a daemon. [default: false]</p> Example<pre><code>{\n    manager = {\n        daemon = false\n    }\n}\n</code></pre>"},{"location":"editors/neovim/setup/manager/#managerlazy","title":"manager.lazy","text":"AboutValue <p>Indicate if the distant manager should be started eagerly or wait until the first time distant is needed in neovim.</p> <p>Boolean representing whether or not to avoid starting the distant manager until first needed. [default: true]</p> Example<pre><code>{\n    manager = {\n        lazy = true\n    }\n}\n</code></pre>"},{"location":"editors/neovim/setup/manager/#managerlog_file","title":"manager.log_file","text":"AboutValue <p>Path where logging should be placed for the distant binary being used as the manager. This is only used when neovim starts the manager itself.</p> <p>Path to the log file. [default: nil]</p> Example<pre><code>{\n    manager = {\n        log_file = '/path/to/manager.log'\n    }\n}\n</code></pre>"},{"location":"editors/neovim/setup/manager/#managerlog_level","title":"manager.log_level","text":"AboutValue <p>Logging level used for manager-based logging tied to the distant binary.</p> <p>String representing the level. [default: info] Choices are off, error, warn, info, debug, trace.</p> Example<pre><code>{\n    manager = {\n        log_level = 'info'\n    }\n}\n</code></pre>"},{"location":"editors/neovim/setup/manager/#manageruser","title":"manager.user","text":"AboutValue <p>When neovim starts the distant manager, indicates whether to have the manager listen on a global or user-specific channel, which is dependent on the operating system.</p> <p>Boolean representing whether or not to have the distant manager listen on a user-local channel. [default: false]</p> Example<pre><code>{\n    manager = {\n        user = false\n    }\n}\n</code></pre>"},{"location":"editors/neovim/setup/network/","title":"Network","text":"<p>All settings found under the <code>network</code> key.</p> <pre><code>local plugin = require('distant')\nplugin:setup({\n   network = {}\n})\n</code></pre>"},{"location":"editors/neovim/setup/network/#networkprivate","title":"network.private","text":"AboutValue <p>If true, will create a private network for all operations associated with a singular neovim instance. Use this option if you want to avoid clashing with a pre-existing distant manager.</p> <p>Boolean representing whether or not to use a private network. [default: false]</p> Example<pre><code>{\n    network = {\n        private = false\n    }\n}\n</code></pre>"},{"location":"editors/neovim/setup/network/#networktimeoutmax","title":"network.timeout.max","text":"AboutValue <p>Maximum time to wait for requests to a remote server to complete.</p> <p>Integer representing time in milliseconds. Set to 0 to disable. [default: 15 seconds]</p> Example<pre><code>{\n    network = {\n        timeout = {\n            max = 15000\n        }\n    }\n}\n</code></pre>"},{"location":"editors/neovim/setup/network/#networktimeoutinterval","title":"network.timeout.interval","text":"AboutValue <p>Time to wait inbetween checks to see if a request timed out.</p> <p>Integer representing time in milliseconds. [default: 256]</p> Example<pre><code>{\n    network = {\n        timeout = {\n            interval = 256\n        }\n    }\n}\n</code></pre>"},{"location":"editors/neovim/setup/network/#networkwindows_pipe","title":"network.windows_pipe","text":"AboutValue <p>Custom name to use for the Windows pipe that the distant manager uses for communication with neovim.</p> <p>String representing the name of the local Windows pipe. [default: nil]</p> Example<pre><code>{\n    network = {\n        windows_pipe = 'my-pipe'\n    }\n}\n</code></pre>"},{"location":"editors/neovim/setup/network/#networkunix_socket","title":"network.unix_socket","text":"AboutValue <p>Custom path to a Unix domain socket that the distant manager uses for communication with neovim.</p> <p>String representing the path to the Unix domain socket. [default: nil]</p> Example<pre><code>{\n    network = {\n        unix_socket = '/path/to/distant.sock'\n    }\n}\n</code></pre>"},{"location":"editors/neovim/setup/servers/","title":"Servers","text":"<p>All settings found under the <code>servers</code> key.</p> <pre><code>local plugin = require('distant')\nplugin:setup({\n    servers = {}\n})\n</code></pre> <p>This represents a collection of settings for servers defined by their hostname.</p> <p>A key of <code>*</code> is special in that it is considered the default for all servers and will be applied first with any host-specific settings overwriting the default.</p> <pre><code>plugin:setup({\n    servers = {\n        ['*'] = {\n            -- Put something in here to override defaults for all servers\n        },\n\n        ['example.com'] = {\n            -- Change the current working directory and specify\n            -- a path to the distant binary on the remote machine\n            cwd = '/path/to/my/dir',\n            launch = {\n                bin = '/path/to/distant'\n            },\n        },\n   }\n})\n</code></pre>"},{"location":"editors/neovim/setup/servers/#connectdefaultscheme","title":"connect.default.scheme","text":"AboutValue <p>Scheme to use in place of letting distant infer an appropriate scheme. Use this option when you want to switch the default across all servers via <code>*</code> or if you want to connect in a specific way to some explicit server.</p> <p>String representing the scheme (e.g. <code>ssh</code>). [default: ]</p> Example<pre><code>{\n    servers = {\n        ['*'] = {\n            connect = {\n                default = {\n                    scheme = 'ssh'\n                }\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"editors/neovim/setup/servers/#connectdefaultport","title":"connect.default.port","text":"AboutValue <p>Port to use when connecting.</p> <p>Integer representing the port. [default: ]</p> Example<pre><code>{\n    servers = {\n        ['*'] = {\n            connect = {\n                default = {\n                    port = 8080\n                }\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"editors/neovim/setup/servers/#connectdefaultusername","title":"connect.default.username","text":"AboutValue <p>Username to use when connecting.</p> <p>String representing the username. [default: ]</p> Example<pre><code>{\n    servers = {\n        ['*'] = {\n            connect = {\n                default = {\n                    username = 'my-username'\n                }\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"editors/neovim/setup/servers/#connectdefaultoptions","title":"connect.default.options","text":"AboutValue <p>Options to pass along to distant when connecting. See the CLI documentation for connecting for more details on available options.</p> <p>String representing a comma-separated list of options. [default: ]</p> Example<pre><code>{\n    servers = {\n        ['*'] = {\n            connect = {\n                default = {\n                    options = 'key=1234,ssh.backend=libssh'\n                }\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"editors/neovim/setup/servers/#cwd","title":"cwd","text":"AboutValue <p>Warning</p> <p>This is not yet implemented, but is a placeholder for this feature!</p> <p>If specified, will apply the current working directory to any cases of spawning processes, opening directories &amp; files, starting shells, and wrapping commands.</p> <p>Will be overwritten if an explicit <code>cwd</code> or absolute path is provided in those situations.</p> <p>String representing the path. [default: ]</p> Example<pre><code>{\n    servers = {\n        ['*'] = {\n            cwd = '/path/to/dir'\n        }\n    }\n}\n</code></pre>"},{"location":"editors/neovim/setup/servers/#launchdefaultscheme","title":"launch.default.scheme","text":"AboutValue <p>Scheme to use in place of letting distant infer an appropriate scheme. Use this option when you want to switch the default across all servers via <code>*</code> or if you want to launch in a specific way to some explicit server.</p> <p>String representing the scheme (e.g. <code>ssh</code>). [default: ]</p> Example<pre><code>{\n    servers = {\n        ['*'] = {\n            launch = {\n                default = {\n                    scheme = 'ssh'\n                }\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"editors/neovim/setup/servers/#launchdefaultport","title":"launch.default.port","text":"AboutValue <p>Port to use when launching.</p> <p>Integer representing the port. [default: ]</p> Example<pre><code>{\n    servers = {\n        ['*'] = {\n            launch = {\n                default = {\n                    port = 8080\n                }\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"editors/neovim/setup/servers/#launchdefaultusername","title":"launch.default.username","text":"AboutValue <p>Username to use when launching.</p> <p>String representing the username. [default: ]</p> Example<pre><code>{\n    servers = {\n        ['*'] = {\n            launch = {\n                default = {\n                    username = 'my-username'\n                }\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"editors/neovim/setup/servers/#launchdefaultbin","title":"launch.default.bin","text":"AboutValue <p>Path to distant binary on remote machine. This is particularly useful to refer to distant when it is not on your path or launching is unable to find the distant binary.</p> <p>String representing the path to the binary. [default: distant]</p> Example<pre><code>{\n    servers = {\n        ['*'] = {\n            launch = {\n                default = {\n                    bin = '/path/to/distant'\n                }\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"editors/neovim/setup/servers/#launchdefaultargs","title":"launch.default.args","text":"AboutValue <p>Additional arguments to pass to the server when starting it on the remote machine. This is useful when you want to specify configurations like shutting down after N seconds, specifying a custom port to listen on, or providing a custom logging path.</p> <p>Run <code>distant server listen --help</code> to see available arguments.</p> <p>String representing the arguments. [default: ]</p> Example<pre><code>{\n    servers = {\n        ['*'] = {\n            launch = {\n                default = {\n                    args = '--port 8080 --shutdown after=3600 --log-level trace'\n                }\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"editors/neovim/setup/servers/#launchdefaultoptions","title":"launch.default.options","text":"AboutValue <p>Options to pass along to distant when launching. See the CLI documentation for launching for more details on available options.</p> <p>String representing a comma-separated list of options. [default: ]</p> Example<pre><code>{\n    servers = {\n        ['*'] = {\n            launch = {\n                default = {\n                    options = 'key=1234,ssh.backend=libssh'\n                }\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"editors/neovim/setup/servers/#language-servers","title":"Language Servers","text":"<p>Language servers can be configured with distant by using the <code>lsp</code> key, which is a mapping of a label (this can be anything) to language server settings.</p> <pre><code>{\n    servers = {\n        ['*'] = {\n            lsp = {\n                ['My Project'] = {\n                    cmd = '/path/to/lsp-server',\n                    root_dir = '/path/to/project',\n                    file_types = {'rust'},\n                    on_exit = function(code, signal, client_id)\n                        local prefix = '[Client ' .. tostring(client_id) .. ']'\n                        print(prefix .. ' LSP exited with code ' .. tostring(code))\n\n                        -- Signal can be nil\n                        if signal ~= nil then\n                            print(prefix .. ' Signal ' .. tostring(signal))\n                        end\n                    end,\n                }\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"editors/neovim/setup/servers/#lspcmd","title":"lsp.*.cmd","text":"AboutValue <p>Sets the command to be invoked as the language server. This command is run on the remote machine, not the local machine. This is a required field for each defined language server.</p> <p>String or list of strings representing the command to execute.</p> Example<pre><code>{\n    servers = {\n        ['*'] = {\n            lsp = {\n                ['My Project'] = {\n                    cmd = '/path/to/lsp --arg'\n                }\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"editors/neovim/setup/servers/#lsproot_dir","title":"lsp.*.root_dir","text":"AboutValue <p>Root directory where the language server will operate. This should typically match the root directory of a project. This is a required field for each defined language server.</p> <p>String, list of strings, or a function.</p> <p>In the case of a string or list of strings, each is treated as a root path, and any file opened will be checked to see if it is contained within the path. If so, a client is established with the associated language server.</p> <p>If a function, it will be invoked with the file path and buffer number whenever a file is opened. The function returns a path to the file to be connected to a language server (if relevant), or nil if not applicable.</p> Example<pre><code>{\n    servers = {\n        ['*'] = {\n            lsp = {\n                ['My Project'] = {\n                    root_dir = function(path, _bufnr)\n                        -- Only allow if within a specific directory\n                        if vim.startswith(path, '/my/project/dir') then\n                            return path\n                        end\n                    end\n                }\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"editors/neovim/setup/servers/#lspfile_types","title":"lsp.*.file_types","text":"AboutValue <p>Optional list of file types to specifically target with this language server. If not provided, will apply to all file types.</p> <p>List of strings, each representing a file type.</p> Example<pre><code>{\n    servers = {\n        ['*'] = {\n            lsp = {\n                ['My Project'] = {\n                    file_types = {'rust'}\n                }\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"editors/neovim/setup/servers/#lspon_exit","title":"lsp.*.on_exit","text":"AboutValue <p>Optional function to be triggered when a language server on the remote machine exits.</p> <p>Function taking an exit code, signal (can be nil), and client id as arguments.</p> Example<pre><code>{\n    servers = {\n        ['*'] = {\n            lsp = {\n                ['My Project'] = {\n                    on_exit = function(code, signal, client_id)\n                        local prefix = '[Client ' .. tostring(client_id) .. ']'\n                        print(prefix .. ' LSP exited with code ' .. tostring(code))\n\n                        -- Signal can be nil\n                        if signal ~= nil then\n                            print(prefix .. ' Signal ' .. tostring(signal))\n                        end\n                    end,\n                }\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"getting-started/usage/","title":"Usage","text":"<p>With the <code>distant</code> CLI, everything is packaged into a single binary. This means that any machine that has distant installed is capable of connecting to other machines as a client as well as listening for remote connections to itself.</p>"},{"location":"getting-started/usage/#starting-a-manager","title":"Starting a manager","text":"<p>If your goal is to connect to a remote machine, you first need to start a distant manager, which will maintain all of the connections between you and the remote machines. The fastest way to do this is by installing the manager as a service on your local machine:</p> <pre><code># Install the manager as a user-level service.\n# If not available, remove the --user flag.\ndistant manager service install --user\n</code></pre> <p>Once installed, you can start the service manually like below:</p> <pre><code># Start the manager as a user-level service.\n# If not available, remove the --user flag.\ndistant manager service start --user\n</code></pre>"},{"location":"getting-started/usage/#connecting-to-a-remote-machine","title":"Connecting to a remote machine","text":"<p>With a manager running, you can now connect to a remote machine. There are two ways to do this:</p> <ol> <li>Launch: this will connect to the remote machine, start up a distant    server to listen for connections, and then connect to the distant server.</li> <li>Connect: this will connect to a distant server or some compatible    server such as SSH.</li> </ol>"},{"location":"getting-started/usage/#launching","title":"Launching","text":"<p>This starts a distant server remotely and connects to it. The process by which we first connect to the remote machine is defined in the URI.</p> <pre><code>distant launch ssh://example.com\n</code></pre> <p>In the above example, this requests that the manager connects to an SSH server located at example.com. Once established, a distant server is started on the remote machine. Our manager then connects to the newly-started server over TCP and disconnects from the SSH server. Once successful, an id tied to the connection will be printed and client requests will be sent to the new distant server.</p> <p>Note</p> <p>This does NOT use an SSH server to perform actions like reading a file or running a process. This only uses SSH to log into the remote machine and start a distant server. Once that is finished, SSH is no longer used.</p> <p>To use an SSH server without the need for a distant binary on the remote machine, see the connecting section.</p>"},{"location":"getting-started/usage/#connecting","title":"Connecting","text":"<p>This connects to an already-running server. This server could be <code>distant</code>, <code>SSH</code>, or any other server where we have a distant-compatible client.</p> <pre><code>distant connect ssh://example.com\n</code></pre> <p>In the above example, this requests that the manager connects to an SSH server located at example.com. Once successful, an id tied to the connection will be printed and client requests will be translated to be run on SSH. Since this is ssh, the default port of 22 is used if none is specified.</p> <p>In contrast, if you wanted to connect to a distant server running on the same machine, you can run <code>distant connect distant://example.com:8080</code> where you specify the port of the distant server. Since there is no default port for distant, you must specify the port here.</p>"},{"location":"getting-started/usage/#listening-for-connections","title":"Listening for connections","text":"<p>Normally, you do not need to start a distant server manually. The act of launching described above will start the server for you; however, there may be times where it is desirable to start the server yourself.</p> <pre><code>distant server listen\n</code></pre> <p>The above starts a server that listens in the foreground. To fork the process (or detach on Windows), you can supply the <code>--daemon</code> flag.</p> <p>Notice the distinct URI printed out by the server when listening. This is normally captured during launch over ssh, and represents the protocol used (distant), the port the server is bound to (60969), and an encoded key used for authentication purposes.</p>"},{"location":"getting-started/installation/","title":"Installation","text":"<ul> <li> Automated install for MacOS</li> <li> Automated install for Windows</li> <li> Automated install for Linux</li> <li> Automated install for FreeBSD</li> <li> Using pre-built binaries</li> <li> Building from source</li> </ul>"},{"location":"getting-started/installation/from-source/","title":"From source","text":"<p>To build distant from source, you will need to have Git, Rust, and Cargo installed.</p> <ol> <li>Clone the repository via <code>git clone https://github.com/chipsenkbeil/distant.git</code></li> <li>From the root of the repository, build via <code>cargo build --release</code></li> <li>Copy the output binary from <code>target/release/distant</code> (or    <code>target/release/distant.exe</code> on Windows)</li> </ol>"},{"location":"getting-started/installation/manually-download/","title":"Manually download","text":"<p>With each release, binaries are built for a variety of platforms and made available under the releases section of Github.</p> <p>Navigate to the releases section and download the appropriate binary for your operating system and CPU architecture.</p>"},{"location":"getting-started/installation/unix/","title":"Unix","text":""},{"location":"getting-started/installation/unix/#typical-installation","title":"Typical Installation","text":"<p>Run this command from a non-admin POSIX shell to install distant with the default version and host. distant will be installed to <code>$HOME/.local/bin/distant</code>.</p> <pre><code># Need to include -L to follow redirects as this returns 301\ncurl -L https://sh.distant.dev | sh\n\n# Can also use wget to the same result\nwget -q -O- https://sh.distant.dev | sh\n</code></pre>"},{"location":"getting-started/installation/unix/#advanced-installation","title":"Advanced Installation","text":"<p>If you want to have an advanced installation, you can download the installer and manually execute it with parameters.</p> <pre><code># Download script to install.sh\ncurl -L https://sh.distant.dev -o install.sh\n\n# Make the installer executable, otherwise you need to run with\n# `sh install.sh [args]`\nchmod +x install.sh\n</code></pre> <p>To see all configurable parameters of the installer.</p> <pre><code>./install.sh --help\n</code></pre> <p>For example, you could install distant to a custom directory and specify a different version of distant to install.</p> <pre><code>./install.sh --install-dir '/path/to/dir' --distant-version '0.20.0-alpha.10'\n</code></pre> <p>Or you can provide arguments inline via <code>sh -s -- [args]</code> such as this example.</p> <pre><code>curl -L https://sh.distant.dev | sh -s -- --install-dir '/path/to/dir' --distant-version '0.20.0-alpha.10'\n</code></pre> <p>Or you can use the legacy method to configure custom directory by setting Environment Variables. (Not Recommended)</p> <pre><code>export DISTANT_INSTALL_DIR='/path/to/dir'\nexport DISTANT_VERSION='0.20.0-alpha.10'\ncurl -L https://sh.distant.dev | sh\n</code></pre>"},{"location":"getting-started/installation/unix/#for-root","title":"For Root","text":"<p>Installation under root has been disabled by default for security considerations. If you know what you are doing and want to install distant as root, then download the installer and manually execute it with the <code>--run-as-admin</code> parameter. Here is the example:</p> <pre><code># Download script and make it executable\ncurl -L https://sh.distant.dev -o install.sh\nchmod +x ./install.sh\n\n./install.sh --run-as-admin [other args]\n\n# I don't care about other parameters and want a one-line command\ncurl -L https://sh.distant.dev | sh -s -- --run-as-admin\n</code></pre>"},{"location":"getting-started/installation/unix/#silent-installation","title":"Silent Installation","text":"<p>You can run with <code>-q</code> or <code>--quiet</code> to suppress all output. Check the exit code via <code>$?</code> for the result.</p> <pre><code># Omit outputs\n./install.sh -q [other args]\n\n# Print result\necho $?\n</code></pre>"},{"location":"getting-started/installation/windows/","title":"Windows","text":""},{"location":"getting-started/installation/windows/#typical-installation","title":"Typical Installation","text":"<p>Run this command from a non-admin PowerShell to install distant with the default version and host. distant will be installed to  <code>%LocalAppData%\\distant\\bin\\distant.exe</code>, which normally is a path like <code>C:\\Users\\&lt;YOUR USERNAME&gt;\\AppData\\Local\\distant\\bin\\distant.exe</code>.</p> <pre><code>Set-ExecutionPolicy RemoteSigned -Scope CurrentUser # Optional: Needed to run a remote script the first time\nirm sh.distant.dev | iex\n</code></pre>"},{"location":"getting-started/installation/windows/#advanced-installation","title":"Advanced Installation","text":"<p>If you want to have an advanced installation, you can download the installer and manually execute it with parameters.</p> <pre><code>irm sh.distant.dev -outfile 'install.ps1'\n</code></pre> <p>To see all configurable parameters of the installer.</p> <pre><code>.\\install.ps1 -?\n</code></pre> <p>For example, you could install distant to a custom directory, specify a different version of distant to install, and bypass system proxy during installation.</p> <pre><code>.\\install.ps1 -InstallDir 'D:\\Applications\\Distant\\bin' -DistantVersion '0.20.0-alpha.10' -NoProxy\n</code></pre> <p>Or you can provide arguments inline such as this example.</p> <pre><code>iex \"&amp; {$(irm sh.distant.dev)} -InstallDir 'D:\\Applications\\Distant\\bin' -DistantVersion '0.20.0-alpha.10' -NoProxy\"\n</code></pre> <p>Or you can use the legacy method to configure custom directory by setting Environment Variables. (Not Recommended)</p> <pre><code>$env:DISTANT_INSTALL_DIR='D:\\Applications\\Distant\\bin'\n$env:DISTANT_VERSION='0.20.0-alpha.10'\nirm sh.distant.dev | iex\n</code></pre>"},{"location":"getting-started/installation/windows/#for-admin","title":"For Admin","text":"<p>Installation under the administrator console has been disabled by default for security considerations. If you know what you are doing and want to install distant as administrator, then download the installer and manually execute it with the <code>-RunAsAdmin</code> parameter in an elevated console. Here is the example:</p> <pre><code>irm sh.distant.dev -outfile 'install.ps1'\n.\\install.ps1 -RunAsAdmin [-OtherParameters ...]\n# I don't care about other parameters and want a one-line command\niex \"&amp; {$(irm sh.distant.dev)} -RunAsAdmin\"\n</code></pre>"},{"location":"getting-started/installation/windows/#silent-installation","title":"Silent Installation","text":"<p>You can redirect all outputs to Out-Null or a log file to silence the installer. And you can use <code>$LASTEXITCODE</code> to check the installation result, it will be <code>0</code> when the installation success.</p> <pre><code># Omit outputs\n.\\install.ps1 [-Parameters ...] | Out-Null\n# Or collect logs\n.\\install.ps1 [-Parameters ...] &gt; install.log\n# Get result\n$LASTEXITCODE\n</code></pre>"},{"location":"reference/cli/commands/","title":"Commands","text":"<p>The distant CLI provides a variety of commands that cover client interactions, server usage, manager operations and servers, and generating files.</p>"},{"location":"reference/cli/commands/#flags","title":"Flags","text":"<p>All commands support these flags:</p> <ul> <li><code>--config &lt;FILE&gt;</code>: alternative path to a config file to use. Default varies   by operating system. See the config section for   more details.</li> <li><code>--log-file &lt;FILE&gt;</code>: path to the file where events should be logged. By   default, no file is created.</li> <li><code>--log-level &lt;LEVEL&gt;</code>: the level at which to log events. Supports off,   error, warn, info, debug, and trace. By default, this is info.</li> </ul> <p>Most commands support these flags:</p> <ul> <li><code>--cache &lt;FILE&gt;</code>: alternative location for a cache file where distant stores   information like the currently-selected connection.</li> <li><code>--connection &lt;ID&gt;</code>: the id of the connection to communicate with from the   active distant manager. This enables communicating with a specific   connection regardless of the cached, selected connection.</li> <li><code>--unix-socket &lt;FILE&gt;</code>: alternative path to the Unix domain socket to use   for communication with the distant manager. This flag is used both to specify   the socket when starting a manager and pointing to the socket when connecting   to a manager for many commands. (Unix only)</li> <li><code>--windows-pipe &lt;FILE&gt;</code>: alternative pipe name for the named Windows pipe to   use for communication with the distant manager. This flag is used both to   specify the socket when starting a manager and pointing to the socket when   connecting to a manager for many commands. (Windows only)</li> </ul> distant --help <pre><code>Operate on a remote computer through file and process manipulation\n\nUsage: distant [OPTIONS] &lt;COMMAND&gt;\n\nCommands:\n  api          Listen over stdin &amp; stdout to communicate with a distant server using the JSON lines API\n  connect      Requests that active manager connects to the server at the specified destination\n  fs           Subcommands for file system operations\n  launch       Launches the server-portion of the binary on a remote machine\n  shell        Specialized treatment of running a remote shell process\n  spawn        Spawn a process on the remote machine\n  system-info  Represents common networking configuration\n  version      Retrieves version information of the remote server\n  manager      Perform manager commands\n  server       Perform server commands\n  generate     Perform generation commands\n  help         Print this message or the help of the given subcommand(s)\n\nOptions:\n      --log-level &lt;LOG_LEVEL&gt;  Log level to use throughout the application [possible values: off, error, warn, info, debug, trace]\n      --log-file &lt;LOG_FILE&gt;    Path to file to use for logging\n      --config &lt;CONFIG_PATH&gt;   Configuration file to load instead of the default paths\n  -h, --help                   Print help\n  -V, --version                Print version\n</code></pre>"},{"location":"reference/cli/commands/api/","title":"Api","text":"<p>Listen over stdin &amp; stdout to communicate with a distant server using the JSON lines API.</p> <pre><code>distant api\n</code></pre>"},{"location":"reference/cli/commands/api/#flags","title":"Flags","text":"<ul> <li><code>--timeout &lt;N&gt;</code>: maximum time (in seconds) to wait for a network request   before timing out. By default, each request waits indefinitely.</li> </ul> distant api --help <pre><code>Listen over stdin &amp; stdout to communicate with a distant server using the JSON lines API\n\nUsage: distant api [OPTIONS]\n\nOptions:\n      --cache &lt;CACHE&gt;                Location to store cached data [default: /home/runner/.cache/distant/cache.toml]\n      --log-level &lt;LOG_LEVEL&gt;        Log level to use throughout the application [possible values: off, error, warn, info, debug, trace]\n      --log-file &lt;LOG_FILE&gt;          Path to file to use for logging\n      --timeout &lt;TIMEOUT&gt;            Represents the maximum time (in seconds) to wait for a network request before timing out\n      --config &lt;CONFIG_PATH&gt;         Configuration file to load instead of the default paths\n      --connection &lt;CONNECTION&gt;      Specify a connection being managed\n      --unix-socket &lt;UNIX_SOCKET&gt;    Override the path to the Unix socket used by the manager (unix-only)\n      --windows-pipe &lt;WINDOWS_PIPE&gt;  Override the name of the local named Windows pipe used by the manager (windows-only)\n  -h, --help                         Print help\n</code></pre>"},{"location":"reference/cli/commands/connect/","title":"Connect","text":"<p>Connects to a remote machine through some method. Today, distant supports two schemes: distant and ssh.</p>"},{"location":"reference/cli/commands/connect/#flags","title":"Flags","text":"<ul> <li> <p><code>--format &lt;FORMAT&gt;</code>: determines how connecting is handled when it comes to   communication. By default, authentication requests are handled with   human-readable prompts. With json specified, authentication will be   provided using JSON-formatted requests and responses.</p> </li> <li> <p><code>--options &lt;OPTIONS&gt;</code>: implementation-specific options to provide when   connecting. These can vary based on using distant or ssh as the scheme.</p> </li> </ul>"},{"location":"reference/cli/commands/connect/#options-for-distant","title":"Options for distant://","text":"<ul> <li><code>key</code>: provide the authentication key to streamline authentication versus   needing to answer the authentication prompt.</li> </ul>"},{"location":"reference/cli/commands/connect/#options-for-ssh","title":"Options for ssh://","text":"<p>All options for ssh have <code>ssh.</code> as an optional prefix. For example, you can supply <code>backend</code> or <code>ssh.backend</code> as the key.</p> <ul> <li> <p><code>ssh.backend</code>: used by ssh to determine which client library to use both for   authentication and general options. The choices are ssh2 and libssh with   ssh2 being the default. If you encounter errors such related to banners,   invalid protocol messages, etc. try to switch to libssh.</p> </li> <li> <p><code>ssh.identity_files</code>: used to provide explicit list of files from which the   user's DSA, ECDSA, Ed25519, or RSA authentication identity are read. These   are comma-separated. Defaults are:</p> <ul> <li><code>~/.ssh/id_dsa</code></li> <li><code>~/.ssh/id_ecdsa</code></li> <li><code>~/.ssh/id_ed25519</code></li> <li><code>~/.ssh/id_rsa</code></li> </ul> </li> <li> <p><code>ssh.identities_only</code>: if true, specifies that ssh should only use the   configured authentication and certificate files (either the defaults or   configured from <code>identity_files</code>).</p> </li> <li> <p><code>ssh.proxy_command</code>: specifies the command to use to connect to the server.</p> </li> <li> <p><code>ssh.user_known_hosts_files</code>: specifies one or more files to use for the user   host key database. These are comma-separated and default to:</p> <ul> <li><code>~/.ssh/known_hosts</code></li> <li><code>~/.ssh/known_hosts2</code></li> </ul> </li> <li> <p><code>ssh.verbose</code>: if true, output tracing information from the underlying ssh   implementation.</p> </li> </ul>"},{"location":"reference/cli/commands/connect/#examples","title":"Examples","text":""},{"location":"reference/cli/commands/connect/#connecting-to-a-distant-server","title":"Connecting to a distant server","text":"<p>When connecting to a distant server, you need to use the distant scheme and provide an explicit port such as <code>8080</code> as seen below:</p> <pre><code>distant connect distant://example.com:8080\n</code></pre>"},{"location":"reference/cli/commands/connect/#supplying-an-authentication-key-as-an-option-to-a-distant-server","title":"Supplying an authentication key as an option to a distant server","text":"<pre><code>distant connect distant://example.com --options 'key=abcd'\n</code></pre>"},{"location":"reference/cli/commands/connect/#connecting-to-an-ssh-server","title":"Connecting to an ssh server","text":"<p>When connecting to an ssh server, you need to use the ssh scheme. If a port is not specified, the default port of 22 is used as seen below:</p> <pre><code>distant connect ssh://example.com\n</code></pre>"},{"location":"reference/cli/commands/connect/#supplying-ssh-specific-options","title":"Supplying ssh-specific options","text":"<pre><code>distant connect ssh://example.com \\\n--options 'backend=libssh,verbose=true,identity_files=\"path/to/file1,path/to/file2\"'\n</code></pre> distant connect --help <pre><code>Requests that active manager connects to the server at the specified destination\n\nUsage: distant connect [OPTIONS] &lt;DESTINATION&gt;\n\nArguments:\n  &lt;DESTINATION&gt;\n\n\nOptions:\n      --cache &lt;CACHE&gt;\n          Location to store cached data\n\n          [default: /home/runner/.cache/distant/cache.toml]\n\n      --log-level &lt;LOG_LEVEL&gt;\n          Log level to use throughout the application\n\n          [possible values: off, error, warn, info, debug, trace]\n\n      --log-file &lt;LOG_FILE&gt;\n          Path to file to use for logging\n\n      --options &lt;OPTIONS&gt;\n          Additional options to provide, typically forwarded to the handler within the manager facilitating the connection. Options are key-value pairs separated by comma.\n\n          E.g. `key=\"value\",key2=\"value2\"`\n\n          [default: ]\n\n      --config &lt;CONFIG_PATH&gt;\n          Configuration file to load instead of the default paths\n\n      --unix-socket &lt;UNIX_SOCKET&gt;\n          Override the path to the Unix socket used by the manager (unix-only)\n\n      --windows-pipe &lt;WINDOWS_PIPE&gt;\n          Override the name of the local named Windows pipe used by the manager (windows-only)\n\n  -f, --format &lt;FORMAT&gt;\n          [default: shell]\n\n          Possible values:\n          - json:  Sends and receives data in JSON format\n          - shell: Commands are traditional shell commands and output responses are inline with what is expected of a program's output in a shell\n\n  -h, --help\n          Print help (see a summary with '-h')\n</code></pre>"},{"location":"reference/cli/commands/launch/","title":"Launch","text":"<p>Connects to a remote machine through some method, starts a <code>distant</code> server, and then connects to that server. The connection used to first access the machine is closed.</p> <p>In the above example, the following happens:</p> <ol> <li>An ssh connection is established with <code>example.com</code> as user <code>root</code></li> <li>A distant server is spawned via <code>distant server listen --daemon</code></li> <li>The port and authentication key are sent back to the client over ssh</li> <li>The ssh connection is closed</li> <li>The client attempts to connect to <code>example.com</code> over TCP using the provided    port and authenticates using the provided key</li> </ol>"},{"location":"reference/cli/commands/launch/#flags","title":"Flags","text":"<ul> <li> <p><code>--distant &lt;BIN&gt;</code>: specifies the binary to use as an alternative to <code>distant</code>   on the remote machine. This typically is used to provide the full path to   <code>distant</code> on the remote machine in situations where it cannot be found.</p> </li> <li> <p><code>--distant-bind-server &lt;HOST&gt;</code>: specifies the <code>--host</code> to apply to the   spawned distant server. See <code>distant server listen</code> flags   for more information.</p> </li> <li> <p><code>distant-args &lt;ARGS</code>&gt;: additional arguments to provide to the server when   starting it.</p> </li> <li> <p><code>--format &lt;FORMAT&gt;</code>: determines how launching is handled when it comes to   communication. By default, authentication requests are handled with   human-readable prompts. With json specified, authentication will be   provided using JSON-formatted requests and responses.</p> </li> <li> <p><code>--options &lt;OPTIONS&gt;</code>: implementation-specific options to provide when   launching. These can vary based on using distant or ssh as the scheme.</p> </li> </ul>"},{"location":"reference/cli/commands/launch/#options-for-manager","title":"Options for manager://","text":"<ul> <li> <p><code>distant.bin</code>: specify an alternative path to a distant binary to launch.   Mirrors <code>--distant</code>.</p> </li> <li> <p><code>distant.bind_server</code>: specify a value to use when binding the launched   server to a network interface. Mirrors <code>--distant-bind-server</code>.</p> </li> <li> <p><code>distant.args</code>: specify additional arguments to provide to the server when   starting it. Mirrors <code>--distant-args</code>.</p> </li> </ul>"},{"location":"reference/cli/commands/launch/#options-for-ssh","title":"Options for ssh://","text":"<p>All options for ssh have <code>ssh.</code> as an optional prefix (except <code>timeout</code>). For example, you can supply <code>backend</code> or <code>ssh.backend</code> as the key.</p> <ul> <li> <p><code>distant.bin</code>: specify an alternative path to a distant binary to launch.   Mirrors <code>--distant</code>.</p> </li> <li> <p><code>distant.bind_server</code>: specify a value to use when binding the launched   server to a network interface. Mirrors <code>--distant-bind-server</code>.</p> </li> <li> <p><code>distant.args</code>: specify additional arguments to provide to the server when   starting it. Mirrors <code>--distant-args</code>.</p> </li> <li> <p><code>ssh.backend</code>: used by ssh to determine which client library to use both for   authentication and general options. The choices are ssh2 and libssh with   ssh2 being the default. If you encounter errors such related to banners,   invalid protocol messages, etc. try to switch to libssh.</p> </li> <li> <p><code>ssh.identity_files</code>: used to provide explicit list of files from which the   user's DSA, ECDSA, Ed25519, or RSA authentication identity are read. These   are comma-separated. Defaults are:</p> <ul> <li><code>~/.ssh/id_dsa</code></li> <li><code>~/.ssh/id_ecdsa</code></li> <li><code>~/.ssh/id_ed25519</code></li> <li><code>~/.ssh/id_rsa</code></li> </ul> </li> <li> <p><code>ssh.identities_only</code>: if true, specifies that ssh should only use the   configured authentication and certificate files (either the defaults or   configured from <code>identity_files</code>).</p> </li> <li> <p><code>ssh.proxy_command</code>: specifies the command to use to connect to the server.</p> </li> <li> <p><code>timeout</code>: time in milliseconds to wait when connecting to the distant   server after it has been spawned by the ssh session.</p> </li> <li> <p><code>ssh.user_known_hosts_files</code>: specifies one or more files to use for the user   host key database. These are comma-separated and default to:</p> <ul> <li><code>~/.ssh/known_hosts</code></li> <li><code>~/.ssh/known_hosts2</code></li> </ul> </li> <li> <p><code>ssh.verbose</code>: if true, output tracing information from the underlying ssh   implementation.</p> </li> </ul>"},{"location":"reference/cli/commands/launch/#examples","title":"Examples","text":""},{"location":"reference/cli/commands/launch/#launching-a-server-locally-on-the-same-machine","title":"Launching a server locally on the same machine","text":"<p>The <code>distant</code> CLI supports a custom scheme, manager, to denote that the active manager should spawn a local distant server process and connect to it. This process will be terminated once the manager shuts down. You can use any host for the launch, but using <code>localhost</code> is common:</p> <pre><code>distant launch manager://localhost\n</code></pre>"},{"location":"reference/cli/commands/launch/#launching-a-server-with-custom-logging-information","title":"Launching a server with custom logging information","text":"<p>Leveraging the <code>distant-args</code> flag, you can provide a log level, log file location, and other details to the spawned server. This is a common approach when you want to custom the start of the server from your local machine:</p> <pre><code>distant launch ssh://example.com \\\n--distant-args '--log-level trace --log-file /tmp/server.log'\n</code></pre> distant launch --help <pre><code>Launches the server-portion of the binary on a remote machine\n\nUsage: distant launch [OPTIONS] &lt;DESTINATION&gt;\n\nArguments:\n  &lt;DESTINATION&gt;\n\n\nOptions:\n      --cache &lt;CACHE&gt;\n          Location to store cached data\n\n          [default: /home/runner/.cache/distant/cache.toml]\n\n      --log-level &lt;LOG_LEVEL&gt;\n          Log level to use throughout the application\n\n          [possible values: off, error, warn, info, debug, trace]\n\n      --distant &lt;distant&gt;\n          Path to distant program on remote machine to execute via ssh; by default, this program needs to be available within PATH as specified when compiling ssh (not your login shell)\n\n      --log-file &lt;LOG_FILE&gt;\n          Path to file to use for logging\n\n      --config &lt;CONFIG_PATH&gt;\n          Configuration file to load instead of the default paths\n\n      --distant-bind-server &lt;ssh|any|IP&gt;\n          Control the IP address that the server binds to.\n\n          The default is `ssh', in which case the server will reply from the IP address that the SSH connection came from (as found in the SSH_CONNECTION environment variable). This is useful for multihomed servers.\n\n          With --bind-server=any, the server will reply on the default interface and will not bind to a particular IP address. This can be useful if the connection is made through sslh or another tool that makes the SSH connection appear to come from localhost.\n\n          With --bind-server=IP, the server will attempt to bind to the specified IP address.\n\n      --distant-args &lt;distant-args&gt;\n          Additional arguments to provide to the server\n\n      --options &lt;OPTIONS&gt;\n          Additional options to provide, typically forwarded to the handler within the manager facilitating the launch of a distant server. Options are key-value pairs separated by comma.\n\n          E.g. `key=\"value\",key2=\"value2\"`\n\n          [default: ]\n\n      --unix-socket &lt;UNIX_SOCKET&gt;\n          Override the path to the Unix socket used by the manager (unix-only)\n\n      --windows-pipe &lt;WINDOWS_PIPE&gt;\n          Override the name of the local named Windows pipe used by the manager (windows-only)\n\n  -f, --format &lt;FORMAT&gt;\n          [default: shell]\n\n          Possible values:\n          - json:  Sends and receives data in JSON format\n          - shell: Commands are traditional shell commands and output responses are inline with what is expected of a program's output in a shell\n\n  -h, --help\n          Print help (see a summary with '-h')\n</code></pre>"},{"location":"reference/cli/commands/shell/","title":"Shell","text":"<p>Spawns a process in a pseudo terminal (pty) and replicates it locally in a similar manner to <code>ssh</code>.</p> <pre><code>distant shell\n</code></pre>"},{"location":"reference/cli/commands/shell/#flags","title":"Flags","text":"<ul> <li> <p><code>--current-dir &lt;DIR&gt;</code>: provide an alternative directory to use as the current   working directory for the spawned shell. By default, the shell will inherit   the working directory of the server.</p> </li> <li> <p><code>--environment &lt;ENV&gt;</code>: provide environment variables to be available in the   shell when spawned. These are comma-separated in a <code>KEY=VALUE</code> format.</p> </li> </ul>"},{"location":"reference/cli/commands/shell/#examples","title":"Examples","text":""},{"location":"reference/cli/commands/shell/#using-a-custom-shell","title":"Using a custom shell","text":"<p>By default, this will use the default shell associated with the server, usually <code>$SHELL</code> on Unix platforms or <code>%ComSpec%</code> on Windows.</p> <p>This can be changed by providing an alternative program to run, which could be some other process such as <code>python</code>:</p> <pre><code>distant shell -- python\n</code></pre>"},{"location":"reference/cli/commands/shell/#supplying-custom-environment-variables","title":"Supplying custom environment variables","text":"<p>Similar to other multi-option flags, the <code>environment</code> option takes a collection of environment variables in the form of <code>KEY=VALUE</code>:</p> <pre><code>distant shell --environment 'VAR=\"hello world\",KEY=value'\n</code></pre> distant shell --help <pre><code>Specialized treatment of running a remote shell process\n\nUsage: distant shell [OPTIONS] [-- &lt;CMD&gt;...]\n\nArguments:\n  [CMD]...  Optional command to run instead of $SHELL\n\nOptions:\n      --cache &lt;CACHE&gt;                Location to store cached data [default: /home/runner/.cache/distant/cache.toml]\n      --log-level &lt;LOG_LEVEL&gt;        Log level to use throughout the application [possible values: off, error, warn, info, debug, trace]\n      --connection &lt;CONNECTION&gt;      Specify a connection being managed\n      --log-file &lt;LOG_FILE&gt;          Path to file to use for logging\n      --config &lt;CONFIG_PATH&gt;         Configuration file to load instead of the default paths\n      --unix-socket &lt;UNIX_SOCKET&gt;    Override the path to the Unix socket used by the manager (unix-only)\n      --windows-pipe &lt;WINDOWS_PIPE&gt;  Override the name of the local named Windows pipe used by the manager (windows-only)\n      --current-dir &lt;CURRENT_DIR&gt;    Alternative current directory for the remote process\n      --environment &lt;ENVIRONMENT&gt;    Environment variables to provide to the shell [default: ]\n  -h, --help                         Print help\n</code></pre>"},{"location":"reference/cli/commands/spawn/","title":"Spawn","text":"<p>Spawns a process on the remote machine. There are two different ways to use this command:</p> <ol> <li> <p>Providing a <code>--</code> to signify the start of the command and its arguments. This    is useful when you want to pass everything from a shell naturally.</p> <pre><code>distant spawn -- echo hello\n</code></pre> </li> <li> <p>Providing a <code>-c &lt;STR&gt;</code> argument where a string argument is used to signify    the command and its arguments. This can be useful when passing around a    command from scripts.</p> <pre><code>distant spawn -c \"echo hello\"\n</code></pre> </li> </ol>"},{"location":"reference/cli/commands/spawn/#flags","title":"Flags","text":"<ul> <li> <p><code>--cmd &lt;CMD&gt;</code>: will spawn the specified command. This is an alternative   syntax to using <code>--</code> as described above, and can aid in providing commands   without evaluating environment variables locally.</p> </li> <li> <p><code>--current-dir &lt;DIR&gt;</code>: provide an alternative directory to use as the current   working directory for the spawned process. By default, the process will   inherit the working directory of the server.</p> </li> <li> <p><code>--environment &lt;ENV&gt;</code>: provide environment variables to be available in the   process when spawned. These are comma-separated in a <code>KEY=VALUE</code> format.</p> </li> <li> <p><code>--lsp &lt;SCHEME&gt;</code>: captures stdin and stdout of the process, evaluates it as   language server protocol messages, and translates any file references that   use <code>file://</code> into <code>distant://</code> (or the custom <code>scheme</code>) and vice versa. This   is needed when working with language servers to ensure that they can properly   detect and work with files while allowing the local machine to operate on   them using the <code>distant</code> scheme.</p> </li> <li> <p><code>--pty</code>: starts the process using a pseudo terminal. This is normally what   <code>distant shell</code> will do, and the dimensions of the pseudo terminal are   calculated from the current terminal used to execute <code>distant spawn ...</code>.</p> </li> <li> <p><code>--shell [&lt;SHELL&gt;]</code>: if specified, will spawn the process in the specified   shell, defaulting to the user-configured shell.</p> </li> </ul>"},{"location":"reference/cli/commands/spawn/#supporting-environment-variables","title":"Supporting environment variables","text":"<p>If you try to use environment variables when spawning a process, you may notice that they do not work as expected:</p> <pre><code># This echoes \"$PATH\" instead of evaluating it\ndistant spawn --cmd 'echo $PATH'\n</code></pre> <p>This is due to how spawning a process works on the server. By default, spawning a process results in directly invoking <code>fork</code> and <code>exec</code> on Unix platforms or <code>CreateProcess</code> on Windows. These calls do not leverage a shell and thereby do not expand parameters into values such as <code>$PATH</code>.</p> <p>In order to use a shell to execute the process, you can use <code>--shell</code> to leverage the default shell available to the running distant server tied to the user who started the server, or <code>--shell &lt;SHELL&gt;</code> to specify the path to an explicit shell to use.</p> <pre><code># This evaluates and echoes the path\ndistant spawn --cmd 'echo $PATH' --shell\n</code></pre>"},{"location":"reference/cli/commands/spawn/#examples","title":"Examples","text":""},{"location":"reference/cli/commands/spawn/#supplying-custom-environment-variables","title":"Supplying custom environment variables","text":"<p>Similar to other multi-option flags, the <code>environment</code> option takes a collection of environment variables in the form of <code>KEY=VALUE</code>. Note that to evaluate these environment variables in a shell expression, you need to also include the <code>shell</code> flag:</p> <pre><code>distant spawn --cmd 'echo $VAR' --shell --environment 'VAR=\"hello world\",KEY=value'\n</code></pre> distant spawn --help <pre><code>Spawn a process on the remote machine\n\nUsage: distant spawn [OPTIONS] [-- &lt;CMD&gt;...]\n\nArguments:\n  [CMD]...\n          Command to run\n\nOptions:\n      --cache &lt;CACHE&gt;\n          Location to store cached data\n\n          [default: /home/runner/.cache/distant/cache.toml]\n\n      --log-level &lt;LOG_LEVEL&gt;\n          Log level to use throughout the application\n\n          [possible values: off, error, warn, info, debug, trace]\n\n      --connection &lt;CONNECTION&gt;\n          Specify a connection being managed\n\n      --log-file &lt;LOG_FILE&gt;\n          Path to file to use for logging\n\n      --config &lt;CONFIG_PATH&gt;\n          Configuration file to load instead of the default paths\n\n      --unix-socket &lt;UNIX_SOCKET&gt;\n          Override the path to the Unix socket used by the manager (unix-only)\n\n      --windows-pipe &lt;WINDOWS_PIPE&gt;\n          Override the name of the local named Windows pipe used by the manager (windows-only)\n\n      --lsp [&lt;SCHEME&gt;]\n          If specified, will assume the remote process is a LSP server and will translate paths that are local into `distant` and vice versa.\n\n          If a scheme is provided, will translate local paths into that scheme!\n\n      --pty\n          If specified, will spawn process using a pseudo tty\n\n      --shell [&lt;SHELL&gt;]\n          If specified, will spawn the process in the specified shell, defaulting to the user-configured shell\n\n      --current-dir &lt;CURRENT_DIR&gt;\n          Alternative current directory for the remote process\n\n      --environment &lt;ENVIRONMENT&gt;\n          Environment variables to provide to the shell\n\n          [default: ]\n\n  -c, --cmd &lt;CMD_STR&gt;\n          If present, commands are read from the provided string\n\n  -h, --help\n          Print help (see a summary with '-h')\n</code></pre>"},{"location":"reference/cli/commands/system-info/","title":"System info","text":"<p>Retrieves information about the remote system where the server is running.</p> <pre><code>distant system-info\n</code></pre>"},{"location":"reference/cli/commands/system-info/#returned-information","title":"Returned Information","text":"Name Description Example Family Family of the operating system (e.g. unix/windows) \"unix\" OS Operating system \"macos\" Arch CPU architecture \"aarch64\" Cwd Current working directory of the server \"/path/to/dir\" Path Sep Separator used for paths on the server \"/\" Username Name of the user running the server \"myuser\" Shell Full path to the default shell used by the server \"/bin/zsh\" distant system-info --help <pre><code>Represents common networking configuration\n\nUsage: distant system-info [OPTIONS]\n\nOptions:\n      --cache &lt;CACHE&gt;                Location to store cached data [default: /home/runner/.cache/distant/cache.toml]\n      --log-level &lt;LOG_LEVEL&gt;        Log level to use throughout the application [possible values: off, error, warn, info, debug, trace]\n      --connection &lt;CONNECTION&gt;      Specify a connection being managed\n      --log-file &lt;LOG_FILE&gt;          Path to file to use for logging\n      --config &lt;CONFIG_PATH&gt;         Configuration file to load instead of the default paths\n      --unix-socket &lt;UNIX_SOCKET&gt;    Override the path to the Unix socket used by the manager (unix-only)\n      --windows-pipe &lt;WINDOWS_PIPE&gt;  Override the name of the local named Windows pipe used by the manager (windows-only)\n  -h, --help                         Print help\n</code></pre>"},{"location":"reference/cli/commands/version/","title":"Version","text":"<p>Retrieves version information about the remote server.</p> <pre><code>distant version\n</code></pre>"},{"location":"reference/cli/commands/version/#flags","title":"Flags","text":"<ul> <li> <p><code>--format &lt;FORMAT&gt;</code>: determines how information is printed. With json   specified, information will be printed in this form:</p> <pre><code>{\n\"server_version\": \"0.20.0+distant-local\",\n\"protocol_version\": \"0.20.0\",\n\"capabilities\": [\"exec\",\"fs_io\",\"fs_perm\",\"fs_search\",\"fs_watch\",\"sys_info\"]\n}\n</code></pre> <p>Any error encountered will be captured and printed in this form:</p> <pre><code>{ \"type\": \"error\", \"msg\": \"...\" }\n</code></pre> <p>Note</p> <p>All JSON comes in a single line format ending in a newline character.</p> </li> </ul>"},{"location":"reference/cli/commands/version/#returned-information","title":"Returned Information","text":"Name Description Example Server Version The version of the server 0.20.0 Protocol Version The version of the protocol (different servers can have same protocol) 0.1.0 Capabilities What features the server has implemented \"search\" distant version --help <pre><code>Retrieves version information of the remote server\n\nUsage: distant version [OPTIONS]\n\nOptions:\n      --cache &lt;CACHE&gt;\n          Location to store cached data\n\n          [default: /home/runner/.cache/distant/cache.toml]\n\n      --log-level &lt;LOG_LEVEL&gt;\n          Log level to use throughout the application\n\n          [possible values: off, error, warn, info, debug, trace]\n\n      --connection &lt;CONNECTION&gt;\n          Specify a connection being managed\n\n      --log-file &lt;LOG_FILE&gt;\n          Path to file to use for logging\n\n      --config &lt;CONFIG_PATH&gt;\n          Configuration file to load instead of the default paths\n\n      --unix-socket &lt;UNIX_SOCKET&gt;\n          Override the path to the Unix socket used by the manager (unix-only)\n\n      --windows-pipe &lt;WINDOWS_PIPE&gt;\n          Override the name of the local named Windows pipe used by the manager (windows-only)\n\n  -f, --format &lt;FORMAT&gt;\n          [default: shell]\n\n          Possible values:\n          - json:  Sends and receives data in JSON format\n          - shell: Commands are traditional shell commands and output responses are inline with what is expected of a program's output in a shell\n\n  -h, --help\n          Print help (see a summary with '-h')\n</code></pre>"},{"location":"reference/cli/commands/fs/copy/","title":"Copy","text":"<p>Copies a file or directory on the remote machine to a new destination.</p> <pre><code>distant fs copy /path/to/file.txt /new/path/to/file.txt\n</code></pre>"},{"location":"reference/cli/commands/fs/copy/#notes","title":"Notes","text":"<ul> <li>Directories have their entire contents recursively copied to the destination.</li> <li>Relative paths resolve to the current working directory of the server.</li> </ul> distant fs copy --help <pre><code>Copies a file or directory on the remote machine\n\nUsage: distant fs copy [OPTIONS] &lt;SRC&gt; &lt;DST&gt;\n\nArguments:\n  &lt;SRC&gt;  The path to the file or directory on the remote machine\n  &lt;DST&gt;  New location on the remote machine for copy of file or directory\n\nOptions:\n      --cache &lt;CACHE&gt;                Location to store cached data [default: /home/runner/.cache/distant/cache.toml]\n      --log-level &lt;LOG_LEVEL&gt;        Log level to use throughout the application [possible values: off, error, warn, info, debug, trace]\n      --connection &lt;CONNECTION&gt;      Specify a connection being managed\n      --log-file &lt;LOG_FILE&gt;          Path to file to use for logging\n      --config &lt;CONFIG_PATH&gt;         Configuration file to load instead of the default paths\n      --unix-socket &lt;UNIX_SOCKET&gt;    Override the path to the Unix socket used by the manager (unix-only)\n      --windows-pipe &lt;WINDOWS_PIPE&gt;  Override the name of the local named Windows pipe used by the manager (windows-only)\n  -h, --help                         Print help\n</code></pre>"},{"location":"reference/cli/commands/fs/exists/","title":"Exists","text":"<p>Checks if the path exists on the remote machine, printing out <code>true</code> or <code>false</code> depending on the result.</p> <pre><code>distant fs exists /path/to/file.txt\n</code></pre>"},{"location":"reference/cli/commands/fs/exists/#notes","title":"Notes","text":"<ul> <li>Relative paths resolve to the current working directory of the server.</li> </ul> distant fs exists --help <pre><code>Checks whether the specified path exists on the remote machine\n\nUsage: distant fs exists [OPTIONS] &lt;PATH&gt;\n\nArguments:\n  &lt;PATH&gt;  The path to the file or directory on the remote machine\n\nOptions:\n      --cache &lt;CACHE&gt;                Location to store cached data [default: /home/runner/.cache/distant/cache.toml]\n      --log-level &lt;LOG_LEVEL&gt;        Log level to use throughout the application [possible values: off, error, warn, info, debug, trace]\n      --connection &lt;CONNECTION&gt;      Specify a connection being managed\n      --log-file &lt;LOG_FILE&gt;          Path to file to use for logging\n      --config &lt;CONFIG_PATH&gt;         Configuration file to load instead of the default paths\n      --unix-socket &lt;UNIX_SOCKET&gt;    Override the path to the Unix socket used by the manager (unix-only)\n      --windows-pipe &lt;WINDOWS_PIPE&gt;  Override the name of the local named Windows pipe used by the manager (windows-only)\n  -h, --help                         Print help\n</code></pre>"},{"location":"reference/cli/commands/fs/make-dir/","title":"Make dir","text":"<p>Creates a directory on the remote machine.</p> <pre><code>distant fs make-dir /path/to/dir\n</code></pre>"},{"location":"reference/cli/commands/fs/make-dir/#flags","title":"Flags","text":"<ul> <li><code>--all</code>: will create any of the missing intermediate directories in the path.   If not provided, the call will fail if there is a missing part of the path.</li> </ul>"},{"location":"reference/cli/commands/fs/make-dir/#notes","title":"Notes","text":"<ul> <li>Relative paths resolve to the current working directory of the server.</li> </ul> distant fs make-dir --help <pre><code>Creates a directory on the remote machine\n\nUsage: distant fs make-dir [OPTIONS] &lt;PATH&gt;\n\nArguments:\n  &lt;PATH&gt;  The path to the directory on the remote machine\n\nOptions:\n      --cache &lt;CACHE&gt;                Location to store cached data [default: /home/runner/.cache/distant/cache.toml]\n      --log-level &lt;LOG_LEVEL&gt;        Log level to use throughout the application [possible values: off, error, warn, info, debug, trace]\n      --connection &lt;CONNECTION&gt;      Specify a connection being managed\n      --log-file &lt;LOG_FILE&gt;          Path to file to use for logging\n      --config &lt;CONFIG_PATH&gt;         Configuration file to load instead of the default paths\n      --unix-socket &lt;UNIX_SOCKET&gt;    Override the path to the Unix socket used by the manager (unix-only)\n      --windows-pipe &lt;WINDOWS_PIPE&gt;  Override the name of the local named Windows pipe used by the manager (windows-only)\n      --all                          Whether or not to create all parent directories\n  -h, --help                         Print help\n</code></pre>"},{"location":"reference/cli/commands/fs/metadata/","title":"Metadata","text":"<p>Retrieves metadata about a path on the remote machine.</p> <pre><code>distant fs metadata /path/to/file.txt\n</code></pre>"},{"location":"reference/cli/commands/fs/metadata/#flags","title":"Flags","text":"<ul> <li><code>--canonicalize</code>: resolves relative paths and evaluate and follow symlinks to   determine the absolute path to the underlying file or directory.</li> <li><code>--resolve-file-type</code>: changes the returned file type from symlinks to the   underlying file or directory types. If not provided, this will report the   type of the immediate path.</li> </ul>"},{"location":"reference/cli/commands/fs/metadata/#notes","title":"Notes","text":"<ul> <li>Relative paths resolve to the current working directory of the server.</li> </ul> distant fs metadata --help <pre><code>Retrieves metadata for the specified path on the remote machine\n\nUsage: distant fs metadata [OPTIONS] &lt;PATH&gt;\n\nArguments:\n  &lt;PATH&gt;  The path to the file, directory, or symlink on the remote machine\n\nOptions:\n      --cache &lt;CACHE&gt;                Location to store cached data [default: /home/runner/.cache/distant/cache.toml]\n      --log-level &lt;LOG_LEVEL&gt;        Log level to use throughout the application [possible values: off, error, warn, info, debug, trace]\n      --connection &lt;CONNECTION&gt;      Specify a connection being managed\n      --log-file &lt;LOG_FILE&gt;          Path to file to use for logging\n      --config &lt;CONFIG_PATH&gt;         Configuration file to load instead of the default paths\n      --unix-socket &lt;UNIX_SOCKET&gt;    Override the path to the Unix socket used by the manager (unix-only)\n      --windows-pipe &lt;WINDOWS_PIPE&gt;  Override the name of the local named Windows pipe used by the manager (windows-only)\n      --canonicalize                 Whether or not to include a canonicalized version of the path, meaning returning the canonical, absolute form of a path with all intermediate components normalized and symbolic links resolved\n      --resolve-file-type            Whether or not to follow symlinks to determine absolute file type (dir/file)\n  -h, --help                         Print help\n</code></pre>"},{"location":"reference/cli/commands/fs/read/","title":"Read","text":"<p>Reads the contents of a file or directory on the remote machine.</p> <pre><code>distant fs read /path/to/file.txt\n</code></pre>"},{"location":"reference/cli/commands/fs/read/#flags","title":"Flags","text":"<ul> <li><code>--depth</code>: determines how many levels deep to traverse when printing out a   directory's contents. By default this is 1, meaning to traverse the   directory's children only (similar to <code>ls</code>).</li> <li><code>--absolute</code>: resolves relative paths when printing out a directory's   contents. This does NOT traverse symlinks.</li> <li><code>--canonicalize</code>: resolves relative paths and traverses symlinks when   printing out a directory's contents.</li> <li><code>--include-root</code>: includes the directory itself when printing a directory's   contents.</li> </ul>"},{"location":"reference/cli/commands/fs/read/#notes","title":"Notes","text":"<ul> <li>Relative paths resolve to the current working directory of the server.</li> </ul> distant fs read --help <pre><code>Reads the contents of a file or retrieves the entries within a directory on the remote machine\n\nUsage: distant fs read [OPTIONS] &lt;PATH&gt;\n\nArguments:\n  &lt;PATH&gt;\n          The path to the file or directory on the remote machine\n\nOptions:\n      --cache &lt;CACHE&gt;\n          Location to store cached data\n\n          [default: /home/runner/.cache/distant/cache.toml]\n\n      --log-level &lt;LOG_LEVEL&gt;\n          Log level to use throughout the application\n\n          [possible values: off, error, warn, info, debug, trace]\n\n      --connection &lt;CONNECTION&gt;\n          Specify a connection being managed\n\n      --log-file &lt;LOG_FILE&gt;\n          Path to file to use for logging\n\n      --config &lt;CONFIG_PATH&gt;\n          Configuration file to load instead of the default paths\n\n      --unix-socket &lt;UNIX_SOCKET&gt;\n          Override the path to the Unix socket used by the manager (unix-only)\n\n      --windows-pipe &lt;WINDOWS_PIPE&gt;\n          Override the name of the local named Windows pipe used by the manager (windows-only)\n\n      --depth &lt;DEPTH&gt;\n          Maximum depth to traverse with 0 indicating there is no maximum depth and 1 indicating the most immediate children within the directory.\n\n          (directory only)\n\n          [default: 1]\n\n      --absolute\n          Whether or not to return absolute or relative paths.\n\n          (directory only)\n\n      --canonicalize\n          Whether or not to canonicalize the resulting paths, meaning returning the canonical, absolute form of a path with all intermediate components normalized and symbolic links resolved.\n\n          Note that the flag absolute must be true to have absolute paths returned, even if canonicalize is flagged as true.\n\n          (directory only)\n\n      --include-root\n          Whether or not to include the root directory in the retrieved entries.\n\n          If included, the root directory will also be a canonicalized, absolute path and will not follow any of the other flags.\n\n          (directory only)\n\n  -h, --help\n          Print help (see a summary with '-h')\n</code></pre>"},{"location":"reference/cli/commands/fs/remove/","title":"Remove","text":"<p>Removes the file or directory on the remote machine.</p> <pre><code>distant fs remove /path/to/file.txt\n</code></pre>"},{"location":"reference/cli/commands/fs/remove/#flags","title":"Flags","text":"<ul> <li><code>--force</code>: if provided, will remove non-empty directories.</li> </ul>"},{"location":"reference/cli/commands/fs/remove/#notes","title":"Notes","text":"<ul> <li>This command will fail if provided a non-empty directory unless the <code>force</code>   flag is specified.</li> <li>Relative paths resolve to the current working directory of the server.</li> </ul> distant fs remove --help <pre><code>Removes a file or directory on the remote machine\n\nUsage: distant fs remove [OPTIONS] &lt;PATH&gt;\n\nArguments:\n  &lt;PATH&gt;  The path to the file or directory on the remote machine\n\nOptions:\n      --cache &lt;CACHE&gt;                Location to store cached data [default: /home/runner/.cache/distant/cache.toml]\n      --log-level &lt;LOG_LEVEL&gt;        Log level to use throughout the application [possible values: off, error, warn, info, debug, trace]\n      --connection &lt;CONNECTION&gt;      Specify a connection being managed\n      --log-file &lt;LOG_FILE&gt;          Path to file to use for logging\n      --config &lt;CONFIG_PATH&gt;         Configuration file to load instead of the default paths\n      --unix-socket &lt;UNIX_SOCKET&gt;    Override the path to the Unix socket used by the manager (unix-only)\n      --windows-pipe &lt;WINDOWS_PIPE&gt;  Override the name of the local named Windows pipe used by the manager (windows-only)\n      --force                        Whether or not to remove all contents within directory if is a directory. Does nothing different for files\n  -h, --help                         Print help\n</code></pre>"},{"location":"reference/cli/commands/fs/rename/","title":"Rename","text":"<p>Renames the file or directory on the remote machine.</p> <pre><code>distant fs rename /path/to/file.txt /path/to/new.txt\n</code></pre>"},{"location":"reference/cli/commands/fs/rename/#notes","title":"Notes","text":"<ul> <li>Relative paths resolve to the current working directory of the server.</li> </ul> distant fs rename --help <pre><code>Moves/renames a file or directory on the remote machine\n\nUsage: distant fs rename [OPTIONS] &lt;SRC&gt; &lt;DST&gt;\n\nArguments:\n  &lt;SRC&gt;  The path to the file or directory on the remote machine\n  &lt;DST&gt;  New location on the remote machine for the file or directory\n\nOptions:\n      --cache &lt;CACHE&gt;                Location to store cached data [default: /home/runner/.cache/distant/cache.toml]\n      --log-level &lt;LOG_LEVEL&gt;        Log level to use throughout the application [possible values: off, error, warn, info, debug, trace]\n      --connection &lt;CONNECTION&gt;      Specify a connection being managed\n      --log-file &lt;LOG_FILE&gt;          Path to file to use for logging\n      --config &lt;CONFIG_PATH&gt;         Configuration file to load instead of the default paths\n      --unix-socket &lt;UNIX_SOCKET&gt;    Override the path to the Unix socket used by the manager (unix-only)\n      --windows-pipe &lt;WINDOWS_PIPE&gt;  Override the name of the local named Windows pipe used by the manager (windows-only)\n  -h, --help                         Print help\n</code></pre>"},{"location":"reference/cli/commands/fs/search/","title":"Search","text":"<p>Searches the filesystem on the remote machine.</p> <pre><code>distant fs search 'hello.*'\n</code></pre>"},{"location":"reference/cli/commands/fs/search/#flags","title":"Flags","text":"<ul> <li><code>--target &lt;TARGET&gt;</code>: indicates whether to search paths or the contents of   files. <code>--target path</code> will search paths whereas <code>--target contents</code> will   search the contents of files. By default, this searches the contents of   files.</li> <li><code>--include &lt;REGEX&gt;</code>: specifies additional regex to use to limit which paths   are searched to only those that match the given regex.</li> <li><code>--exclude &lt;REGEX&gt;</code>: specifies additional regex to use to limit which paths   are searched to only those that do not match the given regex.</li> <li><code>--upward</code>: indicates that we should search upward versus recursively   downward. What this does is search the target and then moves up to the parent   directory and searches its immediate children. This continues until either a   match is found or the depth is reached.</li> <li><code>--follow-symbolic-links</code>: indicates that symbolic links will be traversed   while searching. By default, they are not traversed.</li> <li><code>--limit &lt;N&gt;</code>: indicates to stop searching after N results are found. By   default, there is no limit when searching.</li> <li><code>--max-depth &lt;MAX&gt;</code>: indicates the maximum depth to search (recursively or   upward) with 0 meaning only the current file (or directory when upward).</li> <li><code>--pagination &lt;N&gt;</code>: indicates how many results to match during a search   before printing them. By default, a search will wait until finished before   printing results.</li> <li><code>--ignore-hidden</code>: indicates that hidden files will be skipped when   searching. On Unix systems, hidden files and folders are denoted with a dot   in front of their name such as <code>.hidden.txt</code>.</li> <li><code>--use-ignore-files</code>: will read <code>.ignore</code> files that are used by <code>ripgrep</code>   and <code>The Silver Searcher</code> to determine which files and directories ignore.</li> <li><code>--use-parent-ignore-files</code>: will read <code>.ignore</code> files from parent   directories that are used by <code>ripgrep</code> and <code>The Silver Searcher</code> to determine   which files and directories to ignore.</li> <li><code>--use-git-ignore-files</code>: will read <code>.gitignore</code> files to determine which   files and directories to ignore. </li> <li><code>--use-global-git-ignore-files</code>: will read global <code>.gitignore</code> files to   determine which files and directories to ignore. </li> <li><code>--use-git-exclude-files</code>: will read <code>.git/info/exclude</code> files to determine   which files and directories to ignore.</li> </ul>"},{"location":"reference/cli/commands/fs/search/#examples","title":"Examples","text":""},{"location":"reference/cli/commands/fs/search/#explicit-path","title":"Explicit Path","text":"<p>Typically, searching is best limited to a specific directory, such as a specific project on a remote machine:</p> <pre><code>distant fs search 'hello.*' /path/to/project\n</code></pre>"},{"location":"reference/cli/commands/fs/search/#behave-like-ripgrep","title":"Behave like ripgrep","text":"<p>Ripgrep provides a lot of exclusions out of the box when searching to avoid looking at unnecessary files. Distant does not enable any of those restrictions by default, so to match ripgrep, you should provide the following flags:</p> <pre><code>distant fs search \\\n--ignore-hidden \\\n--use-ignore-files \\\n--use-parent-ignore-files \\\n--use-git-ignore-files \\\n--use-global-git-ignore-files \\\n--use-git-exclude-files \\\n'hello.*'\n</code></pre>"},{"location":"reference/cli/commands/fs/search/#looking-for-a-match-upward","title":"Looking for a match upward","text":"<p>When trying to determine if you are in a project directory, a common practice is to look for a specific file such as a <code>Cargo.toml</code>. An easy way to do this is to use <code>--upward</code> alongside <code>--limit 1</code> with a <code>path</code> target to find the file if it exists:</p> <pre><code>distant fs search \\\n--upward \\\n--limit 1 \\\n--target path \\\n'Cargo.toml'\n</code></pre>"},{"location":"reference/cli/commands/fs/search/#notes","title":"Notes","text":"<ul> <li>Relative paths resolve to the current working directory of the server.</li> <li>If no explicit paths are provided, this will search the current working   directory.</li> </ul> distant fs search --help <pre><code>Search files &amp; directories on the remote machine\n\nUsage: distant fs search [OPTIONS] &lt;pattern&gt; [PATHS]...\n\nArguments:\n  &lt;pattern&gt;\n          Condition to meet to be considered a match\n\n  [PATHS]...\n          Paths in which to perform the query\n\n          [default: .]\n\nOptions:\n      --cache &lt;CACHE&gt;\n          Location to store cached data\n\n          [default: /home/runner/.cache/distant/cache.toml]\n\n      --log-level &lt;LOG_LEVEL&gt;\n          Log level to use throughout the application\n\n          [possible values: off, error, warn, info, debug, trace]\n\n      --connection &lt;CONNECTION&gt;\n          Specify a connection being managed\n\n      --log-file &lt;LOG_FILE&gt;\n          Path to file to use for logging\n\n      --config &lt;CONFIG_PATH&gt;\n          Configuration file to load instead of the default paths\n\n      --unix-socket &lt;UNIX_SOCKET&gt;\n          Override the path to the Unix socket used by the manager (unix-only)\n\n      --windows-pipe &lt;WINDOWS_PIPE&gt;\n          Override the name of the local named Windows pipe used by the manager (windows-only)\n\n      --target &lt;TARGET&gt;\n          Kind of data to examine using condition\n\n          [default: contents]\n\n          Possible values:\n          - path:     Checks path of file, directory, or symlink\n          - contents: Checks contents of files\n\n      --include &lt;INCLUDE&gt;\n          Regex to use to filter paths being searched to only those that match the include condition\n\n      --exclude &lt;EXCLUDE&gt;\n          Regex to use to filter paths being searched to only those that do not match the exclude condition\n\n      --upward\n          Search upward through parent directories rather than the traditional downward search that recurses through all children directories.\n\n          Note that this will use maximum depth to apply to the reverse direction, and will only look through each ancestor directory's immediate entries. In other words, this will not result in recursing through sibling directories.\n\n          An upward search will ALWAYS search the contents of a directory, so this means providing a path to a directory will search its entries EVEN if the max_depth is 0.\n\n      --follow-symbolic-links\n          Search should follow symbolic links\n\n      --limit &lt;LIMIT&gt;\n          Maximum results to return before stopping the query\n\n      --max-depth &lt;MAX_DEPTH&gt;\n          Maximum depth (directories) to search\n\n          The smallest depth is 0 and always corresponds to the path given to the new function on this type. Its direct descendents have depth 1, and their descendents have depth 2, and so on.\n\n          Note that this will not simply filter the entries of the iterator, but it will actually avoid descending into directories when the depth is exceeded.\n\n      --pagination &lt;PAGINATION&gt;\n          Amount of results to batch before sending back excluding final submission that will always include the remaining results even if less than pagination request\n\n      --ignore-hidden\n          If true, will skip searching hidden files\n\n      --use-ignore-files\n          If true, will read `.ignore` files that are used by `ripgrep` and `The Silver Searcher` to determine which files and directories to not search\n\n      --use-parent-ignore-files\n          If true, will read `.ignore` files from parent directories that are used by `ripgrep` and `The Silver Searcher` to determine which files and directories to not search\n\n      --use-git-ignore-files\n          If true, will read `.gitignore` files to determine which files and directories to not search\n\n      --use-global-git-ignore-files\n          If true, will read global `.gitignore` files to determine which files and directories to not search\n\n      --use-git-exclude-files\n          If true, will read `.git/info/exclude` files to determine which files and directories to not search\n\n  -h, --help\n          Print help (see a summary with '-h')\n</code></pre>"},{"location":"reference/cli/commands/fs/set-permissions/","title":"Set permissions","text":"<p>Sets permissions for the specified path on the remote machine.</p> <pre><code>distant fs set-permissions readonly /path/to/file.txt\n</code></pre>"},{"location":"reference/cli/commands/fs/set-permissions/#flags","title":"Flags","text":"<ul> <li><code>--recursive</code>: indicates that permissions should be applied to all paths   contained within the specified when it is a directory, meaning that the   children, their children, etc. will all have the permissions applied.</li> <li><code>--follow-symbolic-links</code>: indicates that symbolic links will be traversed   when setting permissions, which means applying the permissions to the   underlying file or directory, not the symlink itself. In the case of Windows,   the permissions are always set on the underlying file or directory.</li> </ul>"},{"location":"reference/cli/commands/fs/set-permissions/#examples","title":"Examples","text":""},{"location":"reference/cli/commands/fs/set-permissions/#using-readonlynotreadonly","title":"Using readonly/notreadonly","text":"<p>When working with Windows, it may be easier to consider read-only status of a file or directory as Unix permissions don't apply. While Unix permissions altering the read-only status will still take effect, you can instead use the keyword <code>readonly</code> or <code>notreadonly</code> to explicitly target that attribute.</p> <p>In the case of Unix, this will set or clear the read-only permission across owner, group, and others!</p> <pre><code># Disable writing\ndistant fs set-permissions readonly /path/to/file.txt\n\n# Enable writing\ndistant fs set-permissions notreadonly /path/to/file.txt\n</code></pre>"},{"location":"reference/cli/commands/fs/set-permissions/#using-absolute-mode","title":"Using absolute mode","text":"<p>Similar to <code>chmod</code>, you can provide an explicit octal value to indicate the read, write, and execute permissions:</p> <pre><code>distant fs set-permissions 755 /path/to/file.txt\n</code></pre>"},{"location":"reference/cli/commands/fs/set-permissions/#using-symbolic-mode","title":"Using symbolic mode","text":"<p>Also similar to <code>chmod</code>, you can provide a series of permission symbols to represent what you want to apply such as <code>go-w</code> to deny write permission to group and others:</p> <pre><code>distant fs set-permissions 'go-w' /path/to/file.txt\n</code></pre> <p>Warning</p> <p>This is broken on version 0.20.0 (#221)! Using this approach will apply only the specified symbolic permissions and clear any pre-existing permissions! In the above example, this will result in a file with permissions of <code>000</code> instead of just removing the group &amp; other write permission.</p>"},{"location":"reference/cli/commands/fs/set-permissions/#notes","title":"Notes","text":"<ul> <li>Relative paths resolve to the current working directory of the server.</li> </ul> distant fs set-permissions --help <pre><code>Sets permissions for the specified path on the remote machine\n\nUsage: distant fs set-permissions [OPTIONS] &lt;MODE&gt; &lt;PATH&gt;\n\nArguments:\n  &lt;MODE&gt;  Mode string following `chmod` format (or set readonly flag if `readonly` or `notreadonly` is specified)\n  &lt;PATH&gt;  The path to the file, directory, or symlink on the remote machine\n\nOptions:\n      --cache &lt;CACHE&gt;                Location to store cached data [default: /home/runner/.cache/distant/cache.toml]\n      --log-level &lt;LOG_LEVEL&gt;        Log level to use throughout the application [possible values: off, error, warn, info, debug, trace]\n      --connection &lt;CONNECTION&gt;      Specify a connection being managed\n      --log-file &lt;LOG_FILE&gt;          Path to file to use for logging\n      --config &lt;CONFIG_PATH&gt;         Configuration file to load instead of the default paths\n      --unix-socket &lt;UNIX_SOCKET&gt;    Override the path to the Unix socket used by the manager (unix-only)\n      --windows-pipe &lt;WINDOWS_PIPE&gt;  Override the name of the local named Windows pipe used by the manager (windows-only)\n  -R, --recursive                    Recursively set permissions of files/directories/symlinks\n  -L, --follow-symlinks              Follow symlinks, which means that they will be unaffected\n  -h, --help                         Print help\n</code></pre>"},{"location":"reference/cli/commands/fs/watch/","title":"Watch","text":"<p>Watch a path for changes on the remote machine.</p> <pre><code>distant fs watch /path/to/file.txt\n</code></pre>"},{"location":"reference/cli/commands/fs/watch/#flags","title":"Flags","text":"<ul> <li><code>--recursive</code>: indicates that a path should be watched recursively, meaning   that if it is a directory, any changes within the directory will also be   watched and reported (e.g. new file, changed contents, deleted within).</li> <li><code>--only &lt;EVENT&gt;</code>: limit events being reported to only the one specified. This   parameter can be provided more than once to limit to multiple different   events.</li> <li><code>--except &lt;EVENT&gt;</code>: limit events being reported to all but the one specified.   This parameter can be provided more than once to exclude multiple events.</li> </ul>"},{"location":"reference/cli/commands/fs/watch/#events","title":"Events","text":"<ul> <li><code>access</code>: reported when a file is accessed.</li> <li><code>attribute</code>: reported when some attribute such as file permissions is   changed.</li> <li><code>close_write</code>: reported when a file is closed that was opened for writing.</li> <li><code>close_no_write</code>: reported when a file is closed that was not opened for   writing.</li> <li><code>create</code>: reported when a file or directory is deleted. This only is reported   within a recursively-watched directory.</li> <li><code>delete</code>: reported when a file or directory is deleted.</li> <li><code>modify</code>: reported when a file's contents are modified.</li> <li><code>open</code>: reported when a file is opened.</li> <li><code>rename</code>: reported when some path gets renamed.</li> <li><code>unknown</code>: reported when some other event that is not supported is   encountered.</li> </ul>"},{"location":"reference/cli/commands/fs/watch/#notes","title":"Notes","text":"<ul> <li>Relative paths resolve to the current working directory of the server.</li> </ul> distant fs watch --help <pre><code>Watch a path for changes on the remote machine\n\nUsage: distant fs watch [OPTIONS] &lt;PATH&gt;\n\nArguments:\n  &lt;PATH&gt;  The path to the file, directory, or symlink on the remote machine\n\nOptions:\n      --cache &lt;CACHE&gt;                Location to store cached data [default: /home/runner/.cache/distant/cache.toml]\n      --log-level &lt;LOG_LEVEL&gt;        Log level to use throughout the application [possible values: off, error, warn, info, debug, trace]\n      --connection &lt;CONNECTION&gt;      Specify a connection being managed\n      --log-file &lt;LOG_FILE&gt;          Path to file to use for logging\n      --config &lt;CONFIG_PATH&gt;         Configuration file to load instead of the default paths\n      --unix-socket &lt;UNIX_SOCKET&gt;    Override the path to the Unix socket used by the manager (unix-only)\n      --windows-pipe &lt;WINDOWS_PIPE&gt;  Override the name of the local named Windows pipe used by the manager (windows-only)\n      --recursive                    If true, will recursively watch for changes within directories, othewise will only watch for changes immediately within directories\n      --only &lt;ONLY&gt;                  Filter to only report back specified changes [possible values: access, attribute, close_write, close_no_write, create, delete, modify, open, rename, unknown]\n      --except &lt;EXCEPT&gt;              Filter to report back changes except these specified changes [possible values: access, attribute, close_write, close_no_write, create, delete, modify, open, rename, unknown]\n  -h, --help                         Print help\n</code></pre>"},{"location":"reference/cli/commands/fs/write/","title":"Write","text":"<p>Writes the contents to a file on the remote machine.</p> <pre><code>distant fs write /path/to/file.txt 'hello world'\n</code></pre>"},{"location":"reference/cli/commands/fs/write/#flags","title":"Flags","text":"<ul> <li><code>--append</code>: indicates to append the contents to the file rather than   overwrite it. If the file does not exist, it is created.</li> </ul>"},{"location":"reference/cli/commands/fs/write/#examples","title":"Examples","text":""},{"location":"reference/cli/commands/fs/write/#piping-content-into-a-file","title":"Piping content into a file","text":"<p>In the absence of a content positional argument, stdin will be read until EOF is received, and then used as the content for the file:</p> <pre><code>echo 'some text' | distant fs write /path/to/file.txt\n</code></pre>"},{"location":"reference/cli/commands/fs/write/#appending-content-to-a-file","title":"Appending content to a file","text":"<p>If you provide the <code>append</code> flag, then all content is appended instead of overwriting the file:</p> <pre><code>distant fs write --append /path/to/file.txt 'some text'\n</code></pre>"},{"location":"reference/cli/commands/fs/write/#notes","title":"Notes","text":"<ul> <li>If no contents are provided, then the contents are read from stdin.</li> <li>Relative paths resolve to the current working directory of the server.</li> </ul> distant fs write --help <pre><code>Writes the contents to a file on the remote machine\n\nUsage: distant fs write [OPTIONS] &lt;PATH&gt; [DATA]\n\nArguments:\n  &lt;PATH&gt;  The path to the file on the remote machine\n  [DATA]  Data for server-side writing of content. If not provided, will read from stdin\n\nOptions:\n      --cache &lt;CACHE&gt;                Location to store cached data [default: /home/runner/.cache/distant/cache.toml]\n      --log-level &lt;LOG_LEVEL&gt;        Log level to use throughout the application [possible values: off, error, warn, info, debug, trace]\n      --connection &lt;CONNECTION&gt;      Specify a connection being managed\n      --log-file &lt;LOG_FILE&gt;          Path to file to use for logging\n      --config &lt;CONFIG_PATH&gt;         Configuration file to load instead of the default paths\n      --unix-socket &lt;UNIX_SOCKET&gt;    Override the path to the Unix socket used by the manager (unix-only)\n      --windows-pipe &lt;WINDOWS_PIPE&gt;  Override the name of the local named Windows pipe used by the manager (windows-only)\n      --append                       If specified, will append to a file versus overwriting it\n  -h, --help                         Print help\n</code></pre>"},{"location":"reference/cli/commands/generate/completion/","title":"Completion","text":"<p>Generates a completion file for you for a specific shell.</p> <pre><code>distant generate completion bash\n</code></pre>"},{"location":"reference/cli/commands/generate/completion/#flags","title":"Flags","text":"<ul> <li><code>--output &lt;FILE&gt;</code>: indicates that completion file should be saved to a   file instead of printed to stdout.</li> </ul>"},{"location":"reference/cli/commands/generate/completion/#examples","title":"Examples","text":""},{"location":"reference/cli/commands/generate/completion/#bash","title":"bash","text":"<pre><code>distant generate completion bash --output ~/.bash_completion.d/distant.sh\n</code></pre>"},{"location":"reference/cli/commands/generate/completion/#elvish","title":"elvish","text":"<pre><code>distant generate completion elvish --output ~/.elvish/completions/distant.elv\n</code></pre>"},{"location":"reference/cli/commands/generate/completion/#fish","title":"fish","text":"<pre><code>distant generate completion fish --output ~/.config/fish/completions/distant.fish\n</code></pre>"},{"location":"reference/cli/commands/generate/completion/#powershell","title":"powershell","text":"<pre><code>distant generate completion powershell --output $env:USERPROFILE\\Documents\\WindowsPowerShell\\Modules\\Distant\\distant.ps1\n</code></pre>"},{"location":"reference/cli/commands/generate/completion/#zsh","title":"zsh","text":"<pre><code>distant generate completion zsh --output ~/.zsh/completions/_distant\n</code></pre> distant generate completion --help <pre><code>Usage: distant generate completion [OPTIONS] &lt;SHELL&gt;\n\nArguments:\n  &lt;SHELL&gt;  Specific shell to target for the generated output [possible values: bash, elvish, fish, powershell, zsh]\n\nOptions:\n      --log-level &lt;LOG_LEVEL&gt;  Log level to use throughout the application [possible values: off, error, warn, info, debug, trace]\n      --output &lt;FILE&gt;          Write output to a file instead of stdout\n      --log-file &lt;LOG_FILE&gt;    Path to file to use for logging\n      --config &lt;CONFIG_PATH&gt;   Configuration file to load instead of the default paths\n  -h, --help                   Print help\n</code></pre>"},{"location":"reference/cli/commands/generate/config/","title":"Config","text":"<p>Generates a default <code>config.toml</code> file for you.</p> <pre><code>distant generate config --output $HOME/.config/distant/config.toml\n</code></pre>"},{"location":"reference/cli/commands/generate/config/#flags","title":"Flags","text":"<ul> <li><code>--output &lt;FILE&gt;</code>: indicates that config file should be saved to a   file instead of printed to stdout.</li> </ul>"},{"location":"reference/cli/commands/generate/config/#examples","title":"Examples","text":""},{"location":"reference/cli/commands/generate/config/#saving-to-the-default-location-on-macos","title":"Saving to the default location on MacOS","text":"<pre><code>distant generate config --output \"$HOME/Library/Application Support/distant/config.toml\"\n</code></pre>"},{"location":"reference/cli/commands/generate/config/#saving-to-the-default-location-on-unixlinux","title":"Saving to the default location on Unix/Linux","text":"<pre><code>distant generate config --output \"$HOME/.config/distant/config.toml\"\n</code></pre>"},{"location":"reference/cli/commands/generate/config/#saving-to-the-default-location-on-windows","title":"Saving to the default location on Windows","text":"<pre><code>distant generate config --output \"$env:USERPROFILE\\AppData\\Roaming\\distant\\config\\config.toml\"\n</code></pre> Default config.toml <pre><code>###############################################################################\n# All configuration specific to the distant client will be found under\n# this heading\n###############################################################################\n[client]\n\n# Specifies an alternative path to use when logging information while the\n# client is running\n# log_file = \"path/to/file\"\n\n# Specifies the log level used when logging information while the client\n# is running\n#\n# Choices are off, error, warn, info, debug, trace\n# The default setting is info\nlog_level = \"info\"\n\n# Configuration related to the client's api command\n[client.api]\n\n# Maximum time (in seconds) to wait for a network request before timing out\n# where 0 indicates no timeout will occur\ntimeout = 0\n\n# Alternative unix domain socket to connect to when using a manger (Unix only)\n# unix_socket = \"path/to/socket\"\n\n# Alternative name for a local named Windows pipe to connect to when using a\n# manager (Windows only)\n# windows_pipe = \"some_name\"\n\n# Configuration related to the client's connect command\n[client.connect]\n\n# Additional options to provide, typically forwarded to the handler within\n# the manager facilitating the connection. Options are key-value pairs separated\n# by comma.\n#\n# E.g. `key=\"value\",key2=\"value2\"`\noptions = \"\"\n\n# Configuration related to the client's launch command\n[client.launch]\n\n# Path to distant program on remote machine to execute via ssh; by default,\n# this program needs to be available within PATH as specified when compiling\n# ssh (not your login shell).\nbin = \"distant\"\n\n# Control the IP address that the server binds to.\n#\n# The default is `ssh', in which case the server will reply from the IP address\n# that the SSH connection came from (as found in the SSH_CONNECTION environment\n# variable). This is useful for multihomed servers.\n#\n# With --bind-server=any, the server will reply on the default interface and\n# will not bind to a particular IP address. This can be useful if the\n# connection is made through sslh or another tool that makes the SSH connection\n# appear to come from localhost.\n#\n# With --bind-server=IP, the server will attempt to bind to the specified IP\n# address.\nbind_server = \"ssh\"\n\n# Additional arguments to provide to the server when launching it.\nargs = \"\"\n\n# Additional options to provide, typically forwarded to the handler within the\n# manager facilitating the launch of a distant server. Options are key-value\n# pairs separated by comma.\n#\n# E.g. `key=\"value\",key2=\"value2\"`\noptions = \"\"\n\n###############################################################################\n# All configuration specific to the distant generate option will be found under\n# this heading\n###############################################################################\n[generate]\n\n# Specifies an alternative path to use when logging information related\n# to generation\n# log_file = \"path/to/file\"\n\n# Specifies the log level used when logging information related to generation\n# Choices are off, error, warn, info, debug, trace\n# The default setting is info\nlog_level = \"info\"\n\n###############################################################################\n# All configuration specific to the distant manager will be found under\n# this heading\n###############################################################################\n[manager]\n\n# Specifies an alternative path to use when logging information while the\n# manager is running\n# log_file = \"path/to/file\"\n\n# Specifies the log level used when logging information while the manager\n# is running\n#\n# Choices are off, error, warn, info, debug, trace\n# The default setting is info\nlog_level = \"info\"\n\n# Level of access control to the unix socket or windows pipe.\n#\n# * \"owner\": equates to `0o600` on Unix (read &amp; write for owner).\n# * \"group\": equates to `0o660` on Unix (read &amp; write for owner and group).\n# * \"anyone\": equates to `0o666` on Unix (read &amp; write for owner, group, and other).\naccess = \"owner\"\n\n# Alternative unix domain socket to listen on (Unix only)\n# unix_socket = \"path/to/socket\"\n\n# Alternative name for a local named Windows pipe to listen on (Windows only)\n# windows_pipe = \"some_name\"\n\n###############################################################################\n# All configuration specific to the distant server will be found under\n# this heading\n###############################################################################\n[server]\n\n# Specifies an alternative path to use when logging information while the\n# server is running\n# log_file = \"path/to/file\"\n\n# Specifies the log level used when logging information while the server\n# is running\n#\n# Choices are off, error, warn, info, debug, trace\n# The default setting is info\nlog_level = \"info\"\n\n# Configuration related to the server's listen command\n[server.listen]\n\n# IP address that the server will bind to. This can be one of three things:\n#\n# 1. \"ssh\": the server will reply from the IP address that the SSH connection\n#           came from (as found in the SSH_CONNECTION environment variable).\n#           This is useful for multihomed servers.\n# 2. \"any\": the server will reply on the default interface and will not bind to\n#           a particular IP address. This can be useful if the connection is\n#           made through ssh or another tool that makes the SSH connection\n#           appear to come from localhost.\n# 3. \"{IP}\": the server will attempt to bind to the specified IP address.\nhost = \"any\"\n\n# Set the port(s) that the server will attempt to bind to.\n#\n# This can be in the form of PORT1 or PORT1:PORTN to provide a range of ports.\n# With \"0\", the server will let the operating system pick an available TCP port.\n#\n# Please note that this option does not affect the server-side port used by SSH.\nport = \"0\"\n\n# If true, will bind to the ipv6 interface if host is any instead of ipv4\nuse_ipv6 = false\n\n# Logic to apply to server when determining when to shutdown automatically.\n#\n# 1. \"never\" means the server will never automatically shut down\n# 2. \"after=&lt;N&gt;\" means the server will shut down after N seconds\n# 3. \"lonely=&lt;N&gt;\" means the server will shut down after N seconds with no connections\nshutdown = \"never\"\n\n# Changes the current working directory (cwd) to the specified directory.\n# current_dir = \"path/to/dir\"\n\n# Configuration related to filesystem watching done by the server\n[server.watch]\n\n# If true, will attempt to use native filesystem watching (more efficient),\n# otherwise will leverage polling of watched files and directories to detect changes\nnative = true\n\n# If specified, represents the time (in seconds) between polls of files being watched,\n# only relevant when using the polling watcher implementation\n#poll_interval = 30\n\n# If true, will attempt to load a file and compare its contents to detect file changes,\n# only relevant when using the polling watcher implementation (VERY SLOW)\ncompare_contents = false\n\n# Represents the maximum time (in seconds) to wait for filesystem changes before\n# reporting them, which is useful to avoid noisy changes as well as serves to consolidate\n# different events that represent the same action\n# debounce_timeout = 0.5\n\n# Represents how often (in seconds) to check for new events before the debounce timeout\n# occurs. Defaults to 1/4 the debounce timeout if not set.\n# debounce_tick_rate = 0.125\n</code></pre> distant generate config --help <pre><code>Generate configuration file with base settings\n\nUsage: distant generate config [OPTIONS]\n\nOptions:\n      --log-level &lt;LOG_LEVEL&gt;  Log level to use throughout the application [possible values: off, error, warn, info, debug, trace]\n  -o, --output &lt;FILE&gt;          Write output to a file instead of stdout\n      --log-file &lt;LOG_FILE&gt;    Path to file to use for logging\n      --config &lt;CONFIG_PATH&gt;   Configuration file to load instead of the default paths\n  -h, --help                   Print help\n</code></pre>"},{"location":"reference/cli/commands/manager/info/","title":"Info","text":"<p>Retrieve information about a specific connection.</p> <pre><code>distant manager info 1234\n</code></pre>"},{"location":"reference/cli/commands/manager/info/#flags","title":"Flags","text":"<ul> <li> <p><code>--format &lt;FORMAT&gt;</code>: determines how information is printed. With json   specified, information will be printed in this form:</p> <pre><code>{ \"id\": 1234, \"destination\": \"...\", \"options\": \"...\" }\n</code></pre> <p>Any error encountered will be captured and printed in this form:</p> <pre><code>{ \"type\": \"error\", \"msg\": \"...\" }\n</code></pre> <p>Note</p> <p>All JSON comes in a single line format ending in a newline character.</p> </li> </ul>"},{"location":"reference/cli/commands/manager/info/#returned-information","title":"Returned Information","text":"Name Description Example id The numeric id of the connection 1234 destination The destination string used to connect to the server distant://example.com options Additional options provided during launch/connect \"verbose=true\" distant manager list --help <pre><code>List information about all connections\n\nUsage: distant manager list [OPTIONS]\n\nOptions:\n  -f, --format &lt;FORMAT&gt;\n          [default: shell]\n\n          Possible values:\n          - json:  Sends and receives data in JSON format\n          - shell: Commands are traditional shell commands and output responses are inline with what is expected of a program's output in a shell\n\n      --log-level &lt;LOG_LEVEL&gt;\n          Log level to use throughout the application\n\n          [possible values: off, error, warn, info, debug, trace]\n\n      --log-file &lt;LOG_FILE&gt;\n          Path to file to use for logging\n\n      --unix-socket &lt;UNIX_SOCKET&gt;\n          Override the path to the Unix socket used by the manager (unix-only)\n\n      --config &lt;CONFIG_PATH&gt;\n          Configuration file to load instead of the default paths\n\n      --windows-pipe &lt;WINDOWS_PIPE&gt;\n          Override the name of the local named Windows pipe used by the manager (windows-only)\n\n      --cache &lt;CACHE&gt;\n          Location to store cached data\n\n          [default: /home/runner/.cache/distant/cache.toml]\n\n  -h, --help\n          Print help (see a summary with '-h')\n</code></pre>"},{"location":"reference/cli/commands/manager/kill/","title":"Kill","text":"<p>Kills a connection, removing it from the manager's list and severing the actual connection with the remote server.</p> <pre><code>distant manager kill 1234\n</code></pre>"},{"location":"reference/cli/commands/manager/kill/#flags","title":"Flags","text":"<ul> <li> <p><code>--format &lt;FORMAT&gt;</code>: determines how the response is printed. With json   specified, the response will be printed in this form:</p> <pre><code>{ \"type\": \"ok\" }\n</code></pre> <p>Any error encountered will be captured and printed in this form:</p> <pre><code>{ \"type\": \"error\", \"msg\": \"...\" }\n</code></pre> <p>Note</p> <p>All JSON comes in a single line format ending in a newline character.</p> </li> </ul> distant manager kill --help <pre><code>Kill a specific connection\n\nUsage: distant manager kill [OPTIONS] &lt;ID&gt;\n\nArguments:\n  &lt;ID&gt;\n\n\nOptions:\n  -f, --format &lt;FORMAT&gt;\n          [default: shell]\n\n          Possible values:\n          - json:  Sends and receives data in JSON format\n          - shell: Commands are traditional shell commands and output responses are inline with what is expected of a program's output in a shell\n\n      --log-level &lt;LOG_LEVEL&gt;\n          Log level to use throughout the application\n\n          [possible values: off, error, warn, info, debug, trace]\n\n      --log-file &lt;LOG_FILE&gt;\n          Path to file to use for logging\n\n      --unix-socket &lt;UNIX_SOCKET&gt;\n          Override the path to the Unix socket used by the manager (unix-only)\n\n      --config &lt;CONFIG_PATH&gt;\n          Configuration file to load instead of the default paths\n\n      --windows-pipe &lt;WINDOWS_PIPE&gt;\n          Override the name of the local named Windows pipe used by the manager (windows-only)\n\n  -h, --help\n          Print help (see a summary with '-h')\n</code></pre>"},{"location":"reference/cli/commands/manager/list/","title":"List","text":"<p>List information about all connections.</p> <pre><code>distant manager list\n</code></pre>"},{"location":"reference/cli/commands/manager/list/#flags","title":"Flags","text":"<ul> <li> <p><code>--format &lt;FORMAT&gt;</code>: determines how information is printed. With json   specified, information will be printed in this form:</p> <pre><code>{ \"&lt;ID&gt;\": \"&lt;DESTINATION&gt;\" }\n</code></pre> <p>where <code>&lt;ID&gt;</code> is the connection's numeric id, but used as a string key in json and <code>&lt;DESTINATION&gt;</code> is the destination string used to launch/connect to the server.</p> <p>Any error encountered will be captured and printed in this form:</p> <pre><code>{ \"type\": \"error\", \"msg\": \"...\" }\n</code></pre> <p>Note</p> <p>All JSON comes in a single line format ending in a newline character.</p> </li> </ul>"},{"location":"reference/cli/commands/manager/list/#returned-information","title":"Returned Information","text":"<p>For each connection, its id and destination are printed:</p> Name Description Example id The numeric id of the connection 1234 destination The destination string used to connect to the server distant://example.com distant manager list --help <pre><code>List information about all connections\n\nUsage: distant manager list [OPTIONS]\n\nOptions:\n  -f, --format &lt;FORMAT&gt;\n          [default: shell]\n\n          Possible values:\n          - json:  Sends and receives data in JSON format\n          - shell: Commands are traditional shell commands and output responses are inline with what is expected of a program's output in a shell\n\n      --log-level &lt;LOG_LEVEL&gt;\n          Log level to use throughout the application\n\n          [possible values: off, error, warn, info, debug, trace]\n\n      --log-file &lt;LOG_FILE&gt;\n          Path to file to use for logging\n\n      --unix-socket &lt;UNIX_SOCKET&gt;\n          Override the path to the Unix socket used by the manager (unix-only)\n\n      --config &lt;CONFIG_PATH&gt;\n          Configuration file to load instead of the default paths\n\n      --windows-pipe &lt;WINDOWS_PIPE&gt;\n          Override the name of the local named Windows pipe used by the manager (windows-only)\n\n      --cache &lt;CACHE&gt;\n          Location to store cached data\n\n          [default: /home/runner/.cache/distant/cache.toml]\n\n  -h, --help\n          Print help (see a summary with '-h')\n</code></pre>"},{"location":"reference/cli/commands/manager/listen/","title":"Listen","text":"<p>Starts a distant manager listening for new actions to perform.</p> <pre><code>distant manager listen\n</code></pre>"},{"location":"reference/cli/commands/manager/listen/#flags","title":"Flags","text":"<ul> <li> <p><code>--access &lt;ACCESS&gt;</code>: type of access to apply to created unix socket or windows pipe.</p> <ul> <li>owner: equates to <code>0o600</code> on Unix (read &amp; write for owner).</li> <li>group: equates to <code>0o660</code> on Unix (read &amp; write for owner and group).</li> <li>anyone: equates to <code>0o666</code> on Unix (read &amp; write for owner, group,   and other).</li> </ul> </li> <li> <p><code>--daemon</code>: runs the manager process as a daemon, meaning that it is detached   from the parent process and will continue running even after the parent   exits. On Unix systems this involves <code>fork</code> while on Windows this uses   <code>CreateProcess</code> in a detached state.</p> </li> <li> <p><code>--user</code>: will listen on a user-local Unix domain socket (UDS) or local named   Windows pipe. Normally, distant will attempt to create a UDS in a   globally-accessible area or establish a global pipe.</p> </li> </ul> distant manager listen --help <pre><code>Listen for incoming requests as a manager\n\nUsage: distant manager listen [OPTIONS]\n\nOptions:\n      --access &lt;ACCESS&gt;\n          Type of access to apply to created unix socket or windows pipe\n\n          Possible values:\n          - owner:  Equates to `0o600` on Unix (read &amp; write for owner)\n          - group:  Equates to `0o660` on Unix (read &amp; write for owner and group)\n          - anyone: Equates to `0o666` on Unix (read &amp; write for owner, group, and other)\n\n      --log-level &lt;LOG_LEVEL&gt;\n          Log level to use throughout the application\n\n          [possible values: off, error, warn, info, debug, trace]\n\n      --daemon\n          If specified, will fork the process to run as a standalone daemon\n\n      --log-file &lt;LOG_FILE&gt;\n          Path to file to use for logging\n\n      --config &lt;CONFIG_PATH&gt;\n          Configuration file to load instead of the default paths\n\n      --user\n          If specified, will listen on a user-local unix socket or local windows named pipe\n\n      --unix-socket &lt;UNIX_SOCKET&gt;\n          Override the path to the Unix socket used by the manager (unix-only)\n\n      --windows-pipe &lt;WINDOWS_PIPE&gt;\n          Override the name of the local named Windows pipe used by the manager (windows-only)\n\n  -h, --help\n          Print help (see a summary with '-h')\n</code></pre>"},{"location":"reference/cli/commands/manager/select/","title":"Select","text":"<p>Changes the active connection used by other commands when talking to a manager.</p> <pre><code>distant manager select 1234\n</code></pre>"},{"location":"reference/cli/commands/manager/select/#flags","title":"Flags","text":"<ul> <li> <p><code>--format &lt;FORMAT&gt;</code>: determines how the response is printed. With json   specified, the response will be printed in this form:</p> <pre><code>{ \"type\": \"ok\" }\n</code></pre> <p>Any error encountered will be captured and printed in this form:</p> <pre><code>{ \"type\": \"error\", \"msg\": \"...\" }\n</code></pre> </li> </ul>"},{"location":"reference/cli/commands/manager/select/#interactive-mode","title":"Interactive Mode","text":"<p>If no connection id is provided, this command enters an interactive mode, where it provides a collection of choices and the user identifies which connection to make the active one.</p>"},{"location":"reference/cli/commands/manager/select/#json-format","title":"JSON Format","text":"<p>When using <code>format</code> as json, interactive mode will print out available choices, the current selection (as a base-0 index), and a <code>type</code> field as a JSON object:</p> <pre><code>{\n\"type\": \"select\",\n\"choices\": [\"distant://example.com:51658\", \"ssh://example.com\"],\n\"current\": 0\n}\n</code></pre> <p>In response to the available choices, a JSON message needs to be sent in this form:</p> <pre><code>{\n\"type\": \"selected\",\n\"choice\": 1\n}\n</code></pre> <p>The <code>type</code> field is required while the <code>choice</code> field is optional. The <code>choice</code> corresponds to the index of the choice within the <code>choices</code> field received earlier. If none is provided, the current selection is not changed.</p> <p>Note</p> <p>All JSON comes in a single line format ending in a newline character. Responses are also expected to be sent as a single line containing all JSON and ending in a newline character.</p> distant manager select --help <pre><code>Select the active connection\n\nUsage: distant manager select [OPTIONS] [CONNECTION]\n\nArguments:\n  [CONNECTION]\n          Connection to use, otherwise will prompt to select\n\nOptions:\n      --cache &lt;CACHE&gt;\n          Location to store cached data\n\n          [default: /home/runner/.cache/distant/cache.toml]\n\n      --log-level &lt;LOG_LEVEL&gt;\n          Log level to use throughout the application\n\n          [possible values: off, error, warn, info, debug, trace]\n\n  -f, --format &lt;FORMAT&gt;\n          [default: shell]\n\n          Possible values:\n          - json:  Sends and receives data in JSON format\n          - shell: Commands are traditional shell commands and output responses are inline with what is expected of a program's output in a shell\n\n      --log-file &lt;LOG_FILE&gt;\n          Path to file to use for logging\n\n      --config &lt;CONFIG_PATH&gt;\n          Configuration file to load instead of the default paths\n\n      --unix-socket &lt;UNIX_SOCKET&gt;\n          Override the path to the Unix socket used by the manager (unix-only)\n\n      --windows-pipe &lt;WINDOWS_PIPE&gt;\n          Override the name of the local named Windows pipe used by the manager (windows-only)\n\n  -h, --help\n          Print help (see a summary with '-h')\n</code></pre>"},{"location":"reference/cli/commands/manager/service/","title":"Service","text":"<p>Interact with a manager being run by a service management platform.</p> <pre><code>distant manager service ...\n</code></pre>"},{"location":"reference/cli/commands/manager/service/#commands","title":"Commands","text":"<ul> <li> <p><code>install</code>: will install a basic configuration file to run distant using the   native (or explicitly defined) service manager. For some platforms, this will   also start the service.</p> </li> <li> <p><code>start</code>: will start the distant service using the native (or explicitly   defined) service manager.</p> </li> <li> <p><code>stop</code>: will stop the distant service using the native (or explicitly   defined) service manager.</p> </li> <li> <p><code>uninstall</code>: will uninstall the distant service using the native (or   explicitly defined) service manager.</p> </li> </ul>"},{"location":"reference/cli/commands/manager/service/#flags","title":"Flags","text":"<ul> <li> <p><code>--kind &lt;KIND&gt;</code>: use a specific service manager denoted by the <code>kind</code>. By   default, the native system manager detected by distant will be used such as   <code>sc.exe</code> for Windows or <code>launchd</code> on MacOS.</p> <ul> <li>launchd: use launchd to manage the service.</li> <li>openrc:  use OpenRC to manage the service.</li> <li>rcd:     use rc.d to manage the service.</li> <li>sc:      use Windows service controller to manage the service.</li> <li>systemd: use systemd to manage the service.</li> </ul> </li> <li> <p><code>--user</code>: indicates that the service is for the current user and not a   globally-available service. Not all service managers support user-level   services, but this can be preferred for those that do such as <code>launchd</code> and   <code>systemd</code>.</p> </li> </ul> distant manager service --help <pre><code>Interact with a manager being run by a service management platform\n\nUsage: distant manager service [OPTIONS] &lt;COMMAND&gt;\n\nCommands:\n  start      Start the manager as a service\n  stop       Stop the manager as a service\n  install    Install the manager as a service\n  uninstall  Uninstall the manager as a service\n  help       Print this message or the help of the given subcommand(s)\n\nOptions:\n      --log-level &lt;LOG_LEVEL&gt;  Log level to use throughout the application [possible values: off, error, warn, info, debug, trace]\n      --log-file &lt;LOG_FILE&gt;    Path to file to use for logging\n      --config &lt;CONFIG_PATH&gt;   Configuration file to load instead of the default paths\n  -h, --help                   Print help\n</code></pre>"},{"location":"reference/cli/commands/manager/version/","title":"Version","text":"<p>Retrieves version information about the manager.</p> <pre><code>distant manager version\n</code></pre>"},{"location":"reference/cli/commands/manager/version/#flags","title":"Flags","text":"<ul> <li> <p><code>--format &lt;FORMAT&gt;</code>: determines how information is printed. With json   specified, information will be printed in this form:</p> <pre><code>{ \"version\": \"0.20.0\" }\n</code></pre> <p>Any error encountered will be captured and printed in this form:</p> <pre><code>{ \"type\": \"error\", \"msg\": \"...\" }\n</code></pre> <p>Note</p> <p>All JSON comes in a single line format ending in a newline character.</p> </li> </ul>"},{"location":"reference/cli/commands/manager/version/#returned-information","title":"Returned Information","text":"Name Description Example Version The version of the manager 0.20.0 distant manager version --help <pre><code>Retrieve a list of capabilities that the manager supports\n\nUsage: distant manager version [OPTIONS]\n\nOptions:\n  -f, --format &lt;FORMAT&gt;\n          [default: shell]\n\n          Possible values:\n          - json:  Sends and receives data in JSON format\n          - shell: Commands are traditional shell commands and output responses are inline with what is expected of a program's output in a shell\n\n      --log-level &lt;LOG_LEVEL&gt;\n          Log level to use throughout the application\n\n          [possible values: off, error, warn, info, debug, trace]\n\n      --log-file &lt;LOG_FILE&gt;\n          Path to file to use for logging\n\n      --unix-socket &lt;UNIX_SOCKET&gt;\n          Override the path to the Unix socket used by the manager (unix-only)\n\n      --config &lt;CONFIG_PATH&gt;\n          Configuration file to load instead of the default paths\n\n      --windows-pipe &lt;WINDOWS_PIPE&gt;\n          Override the name of the local named Windows pipe used by the manager (windows-only)\n\n  -h, --help\n          Print help (see a summary with '-h')\n</code></pre>"},{"location":"reference/cli/commands/server/listen/","title":"Listen","text":"<p>Starts a server that implements the distant protocol.</p> <pre><code>distant server listen\n</code></pre>"},{"location":"reference/cli/commands/server/listen/#flags","title":"Flags","text":"<ul> <li> <p><code>--current-dir &lt;DIR&gt;</code>: changes the current working directory of the server,      which is normally set to its parent process' directory.</p> </li> <li> <p><code>--daemon</code>: runs the server process as a daemon, meaning that it is detached      from the parent process and will continue running even after the parent      exits. On Unix systems this involves <code>fork</code> while on Windows this uses      <code>CreateProcess</code> in a detached state.</p> </li> <li> <p><code>--host &lt;HOST&gt;</code>: used to bind the server to restrict communication over a      specific network interface. This can be <code>ssh</code>, <code>any</code>, or a specific IP      address representing the interface like <code>192.168.1.123</code>.</p> <p>In the case of <code>ssh</code>, the <code>SSH_CONNECTION</code> environment variable will be  parsed to bind to the associated interface. This variable is usually present  during an ssh session on the connected machine, and is leveraged by default  when using <code>distant launch</code> to start the server.</p> <p>In the case of <code>any</code>, the server will bind to <code>0.0.0.0</code> to support receiving  traffic from any network interface.</p> </li> <li> <p><code>--key-from-stdin</code>: stops the server from generating an authentication key      and instead uses the key provided over stdin. The key is contained over      the next 32 bytes of stdin. Receiving less than 32 bytes is an error and      any bytes beyond the first 32 are ignored.</p> </li> <li> <p><code>--port &lt;PORT[:PORT2]&gt;</code>: used to specify an explicit port or range of ports      for the server to attempt to use for listening over TCP. By default, the      server will leverage the operating system to provide it an open port      (ephemeral port).</p> <p>A port can be specified either singularly (<code>8080</code>) or as a range  (<code>8080:8089</code>).</p> </li> <li> <p><code>--shutdown &lt;RULE&gt;</code>: indicates whether the server should shutdown based on      some logic. The available options are:</p> <ul> <li><code>never</code>: the server will never shutdown on its own.</li> <li><code>after=N</code>: the server will shutdown after <code>N</code> seconds.</li> <li><code>lonely=N</code>: the server will shutdown after <code>N</code> seconds with no active     connection.</li> </ul> </li> <li> <p><code>--use-ipv6</code>: indicates that the server should listen on an IPv6 network      address versus an IPv4 one. For a host of <code>any</code>, this results in binding to      <code>[::]</code>.</p> </li> <li> <p><code>--watch-compare-contents</code>: will attempt to load a file and compare its      contents to detect file changes, only relevant when using the polling       watcher implementation (VERY SLOW).</p> </li> <li> <p><code>--watch-debounce-tick-rate &lt;N&gt;</code>: how often (in seconds) to check for new      events before the debounce timeout occurs. Defaults to 1/4 the debounce      timeout if not set.</p> </li> <li> <p><code>--watch-debounce-timeout &lt;N&gt;</code>: maximum time (in seconds) to wait for      filesystem changes before reporting them, which is useful to avoid noisy      changes as well as serves to consolidate different events that represent      the same action.</p> </li> <li> <p><code>--watch-polling</code>: configures the server to use a polling method to watch for      filesystem changes instead of the default, native poller.</p> </li> <li> <p><code>--watch-polling-interval &lt;N&gt;</code>: adjusts the time between checks of filesystem      changes by the polling filesystem watcher.</p> </li> </ul>"},{"location":"reference/cli/commands/server/listen/#examples","title":"Examples","text":""},{"location":"reference/cli/commands/server/listen/#spawning-a-server-that-is-long-lived","title":"Spawning a server that is long-lived","text":"<p>Typically, you want to spawn a server that will run after your shell has exited. Given that you cannot see any output, you also want to redirect logging to a file via <code>log-file</code>:</p> <pre><code>distant server listen --daemon --log-file /path/to/server.log\n</code></pre> distant server listen --help <pre><code>Listen for incoming requests as a server\n\nUsage: distant server listen [OPTIONS]\n\nOptions:\n      --host &lt;ssh|any|IP&gt;\n          Control the IP address that the distant binds to\n\n          There are three options here:\n\n          1. `ssh`: the server will reply from the IP address that the SSH connection came from (as found in the SSH_CONNECTION environment variable). This is useful for multihomed servers.\n\n          2. `any`: the server will reply on the default interface and will not bind to a particular IP address. This can be useful if the connection is made through ssh or another tool that makes the SSH connection appear to come from localhost.\n\n          3. `IP`: the server will attempt to bind to the specified IP address.\n\n          [default: any]\n\n      --log-level &lt;LOG_LEVEL&gt;\n          Log level to use throughout the application\n\n          [possible values: off, error, warn, info, debug, trace]\n\n      --log-file &lt;LOG_FILE&gt;\n          Path to file to use for logging\n\n      --port &lt;PORT[:PORT2]&gt;\n          Set the port(s) that the server will attempt to bind to\n\n          This can be in the form of PORT1 or PORT1:PORTN to provide a range of ports. With `--port 0`, the server will let the operating system pick an available TCP port.\n\n          Please note that this option does not affect the server-side port used by SSH\n\n          [default: 0]\n\n  -6, --use-ipv6\n          If specified, will bind to the ipv6 interface if host is \"any\" instead of ipv4\n\n      --config &lt;CONFIG_PATH&gt;\n          Configuration file to load instead of the default paths\n\n      --shutdown &lt;SHUTDOWN&gt;\n          Logic to apply to server when determining when to shutdown automatically\n\n          1. \"never\" means the server will never automatically shut down 2. \"after=&lt;N&gt;\" means the server will shut down after N seconds 3. \"lonely=&lt;N&gt;\" means the server will shut down after N seconds with no connections\n\n          Default is to never shut down\n\n          [default: never]\n\n      --current-dir &lt;CURRENT_DIR&gt;\n          Changes the current working directory (cwd) to the specified directory\n\n      --daemon\n          If specified, will fork the process to run as a standalone daemon\n\n      --watch-polling\n          If specified, will use the polling-based watcher for filesystem changes\n\n      --watch-poll-interval &lt;WATCH_POLL_INTERVAL&gt;\n          If specified, represents the time (in seconds) between polls of files being watched, only relevant when using the polling watcher implementation\n\n      --watch-compare-contents\n          If true, will attempt to load a file and compare its contents to detect file changes, only relevant when using the polling watcher implementation (VERY SLOW)\n\n      --watch-debounce-timeout &lt;WATCH_DEBOUNCE_TIMEOUT&gt;\n          Represents the maximum time (in seconds) to wait for filesystem changes before reporting them, which is useful to avoid noisy changes as well as serves to consolidate different events that represent the same action\n\n          [default: 0.5]\n\n      --watch-debounce-tick-rate &lt;WATCH_DEBOUNCE_TICK_RATE&gt;\n          Represents how often (in seconds) to check for new events before the debounce timeout occurs. Defaults to 1/4 the debounce timeout if not set\n\n      --key-from-stdin\n          If specified, the server will not generate a key but instead listen on stdin for the next 32 bytes that it will use as the key instead. Receiving less than 32 bytes before stdin is closed is considered an error and any bytes after the first 32 are not used for the key\n\n      --output-to-local-pipe &lt;OUTPUT_TO_LOCAL_PIPE&gt;\n\n\n  -h, --help\n          Print help (see a summary with '-h')\n</code></pre>"},{"location":"reference/cli/config/","title":"Config","text":""},{"location":"reference/cli/config/#quickstart","title":"Quickstart","text":"UnixMacOSWindows <p>Create a file named <code>config.toml</code> in one of these locations:</p> <ul> <li><code>$XDG_CONFIG_HOME/distant/</code></li> <li><code>$HOME/.config/distant/</code></li> </ul> <p>Create a file named <code>config.toml</code> in one of these locations:</p> <ul> <li><code>$HOME/Library/Application Support/distant/</code></li> </ul> <p>Create a file named <code>config.toml</code> in one of these locations:</p> <ul> <li><code>%USERPROFILE%\\AppData\\Roaming\\distant\\config\\</code></li> </ul> <p>Populate the <code>config.toml</code> file with some sample settings:</p> <pre><code>[server]\n[server.listen]\nport = \"8080\" # Listen exclusively on TCP port 8080\n</code></pre>"},{"location":"reference/cli/config/#configuration-file-structure","title":"Configuration File Structure","text":"<p>The configuration file is broken up into four categories:</p> <ul> <li>Client</li> <li>Generate</li> <li>Manager</li> <li>Server</li> </ul> <p>Each category applies to one of the commands associated with the distant CLI. For example <code>[server]</code> is associated with <code>distant server</code>. The only exception is <code>[client]</code>, which is associated with all client-facing commands such as <code>distant fs</code>, <code>distant launch</code>, and <code>distant shell</code>.</p>"},{"location":"reference/cli/config/client/","title":"Client","text":"<p>All client settings fall under <code>[client]</code>.</p> <pre><code>[client]\nlog_level = \"trace\"\n\n[client.launch]\nbin = \"/path/to/distant\"\n</code></pre>"},{"location":"reference/cli/config/client/#log_file","title":"log_file","text":"AboutValue <p>Specifies an alternative path to use when logging information while the client is running.</p> <p>String representing the path to the file.</p> Example<pre><code>[client]\nlog_file = \"/path/to/file.log\"\n</code></pre>"},{"location":"reference/cli/config/client/#log_level","title":"log_level","text":"AboutValue <p>Specifies the log level used when logging information while the client is running.</p> <p>String representing the level. [default: info] Choices are off, error, warn, info, debug, trace.</p> Example<pre><code>[client]\nlog_level = \"info\"\n</code></pre>"},{"location":"reference/cli/config/client/#apitimeout","title":"api.timeout","text":"AboutValue <p>Maximum time (in seconds) to wait for an API network request to complete before timing out where 0 indicates no timeout will occur.</p> <p>Integer time in seconds. [default: 0]</p> Example<pre><code>[client]\n[client.api]\ntimeout = 60\n</code></pre>"},{"location":"reference/cli/config/client/#apiunix_socket","title":"api.unix_socket","text":"AboutValue <p>Alternative unix domain socket to connect to when using a manger (Unix only).</p> <p>String representing the path to the socket file.</p> Example<pre><code>[client]\n[client.api]\nunix_socket = \"/path/to/distant.sock\"\n</code></pre>"},{"location":"reference/cli/config/client/#apiwindows_pipe","title":"api.windows_pipe","text":"AboutValue <p>Alternative name for a local named Windows pipe to connect to when using a manager (Windows only).</p> <p>String representing the name of the local Windows pipe.</p> Example<pre><code>[client]\n[client.api]\nwindows_pipe = \"some_name\"\n</code></pre>"},{"location":"reference/cli/config/client/#connectoptions","title":"connect.options","text":"AboutValue <p>Additional options to provide, typically forwarded to the handler within the manager facilitating the connection.</p> <p>String of key-value pairs separated by commas. E.g. <code>key=\"value\",key2=\"value2\"</code>.</p> Example<pre><code>[client]\n[client.connect]\noptions = \"ssh.backend=\\\"libssh\\\",value=\\\"123\\\"\"\n</code></pre>"},{"location":"reference/cli/config/client/#launchbin","title":"launch.bin","text":"AboutValue <p>Path to distant program on remote machine to execute via ssh; by default, this program needs to be available within <code>PATH</code> as specified when compiling ssh (not your login shell).</p> <p>String representing the path to the distant binary.</p> Example<pre><code>[client]\n[client.launch]\nbin = \"/path/to/distant\"\n</code></pre>"},{"location":"reference/cli/config/client/#launchbind_server","title":"launch.bind_server","text":"AboutValue <p>Control the IP address that the server binds to.</p> <p>String describing the interface the server should bind to.</p> <ul> <li> <p><code>ssh</code> - the server will reply from the IP address that the ssh connection   came from as found in the <code>SSH_CONNECTION</code> environment variable. This is   useful for multihomed servers.</p> </li> <li> <p><code>any</code> - the server will reply on the default interface and will not bind   to a particular IP address. This can be useful if the connection is made   through sslh or another tool that makes the SSH connection appear to come   from localhost.</p> </li> <li> <p><code>&lt;IP&gt;</code> - the server will attempt to bind to the specified IP address.</p> </li> </ul> Example<pre><code>[client]\n[client.launch]\nbind_server = \"192.168.1.5\"\n</code></pre>"},{"location":"reference/cli/config/client/#launchargs","title":"launch.args","text":"AboutValue <p>Additional arguments to provide to the server when launching it.</p> <p>String representing the additional CLI options.</p> Example<pre><code>[client]\n[client.launch]\nargs = \"--shutdown lonely=60 --use-ipv6\"\n</code></pre>"},{"location":"reference/cli/config/client/#launchoptions","title":"launch.options","text":"AboutValue <p>Additional options to provide, typically forwarded to the handler within the manager facilitating the launch of a distant server.</p> <p>String of key-value pairs separated by commas. E.g. <code>key=\"value\",key2=\"value2\"</code>.</p> Example<pre><code>[client]\n[client.launch]\noptions = \"ssh.backend=\\\"libssh\\\",value=\\\"123\\\"\"\n</code></pre>"},{"location":"reference/cli/config/generate/","title":"Generate","text":"<p>All generate settings fall under <code>[generate]</code>.</p> <pre><code>[generate]\nlog_level = \"trace\"\n</code></pre>"},{"location":"reference/cli/config/generate/#log_file","title":"log_file","text":"AboutValue <p>Specifies an alternative path to use when logging information related to generating some content.</p> <p>String representing the path to the file.</p> Example<pre><code>[generate]\nlog_file = \"/path/to/file.log\"\n</code></pre>"},{"location":"reference/cli/config/generate/#log_level","title":"log_level","text":"AboutValue <p>Specifies the log level used when logging information related to generating some content.</p> <p>String representing the level. [default: info] Choices are off, error, warn, info, debug, trace.</p> Example<pre><code>[generate]\nlog_level = \"info\"\n</code></pre>"},{"location":"reference/cli/config/manager/","title":"Manager","text":"<p>All manager settings fall under <code>[manager]</code>.</p> <pre><code>[manager]\nlog_level = \"trace\"\naccess = \"group\"\n</code></pre>"},{"location":"reference/cli/config/manager/#log_file","title":"log_file","text":"AboutValue <p>Specifies an alternative path to use when logging information while the manager is running.</p> <p>String representing the path to the file.</p> Example<pre><code>[manager]\nlog_file = \"/path/to/file.log\"\n</code></pre>"},{"location":"reference/cli/config/manager/#log_level","title":"log_level","text":"AboutValue <p>Specifies the log level used when logging information while the manager is running.</p> <p>String representing the level. [default: info] Choices are off, error, warn, info, debug, trace.</p> Example<pre><code>[manager]\nlog_level = \"info\"\n</code></pre>"},{"location":"reference/cli/config/manager/#access","title":"access","text":"AboutValue <p>Level of access control to the unix socket or windows pipe that the manager creates and listens on for requests.</p> <p>String representing the access level. [default: owner]</p> <ul> <li><code>owner</code> - read &amp; write for owner (<code>0o600</code>).</li> <li><code>group</code> - read &amp; write for owner and group (<code>0o660</code>).</li> <li><code>anyone</code> - read &amp; write for owner, group, and other (<code>0o666</code>).</li> </ul> Example<pre><code>[manager]\naccess = \"group\"\n</code></pre>"},{"location":"reference/cli/config/manager/#unix_socket","title":"unix_socket","text":"AboutValue <p>Alternative unix domain socket to listen on (Unix only).</p> <p>String representing the path to the socket file.</p> Example<pre><code>[manager]\nunix_socket = \"/path/to/distant.sock\"\n</code></pre>"},{"location":"reference/cli/config/manager/#windows_pipe","title":"windows_pipe","text":"AboutValue <p>Alternative name for a local named Windows pipe to listen on (Windows only).</p> <p>String representing the name of the local Windows pipe.</p> Example<pre><code>[manager]\nwindows_pipe = \"some_name\"\n</code></pre>"},{"location":"reference/cli/config/server/","title":"Server","text":"<p>All server settings fall under <code>[server]</code>.</p> <pre><code>[server]\nlog_level = \"trace\"\n\n[server.listen]\nport = \"8080\"\n</code></pre>"},{"location":"reference/cli/config/server/#log_file","title":"log_file","text":"AboutValue <p>Specifies an alternative path to use when logging information while the server is running.</p> <p>String representing the path to the file.</p> Example<pre><code>[server]\nlog_file = \"/path/to/file.log\"\n</code></pre>"},{"location":"reference/cli/config/server/#log_level","title":"log_level","text":"AboutValue <p>Specifies the log level used when logging information while the server is running.</p> <p>String representing the level. [default: info] Choices are off, error, warn, info, debug, trace.</p> Example<pre><code>[server]\nlog_level = \"info\"\n</code></pre>"},{"location":"reference/cli/config/server/#listenhost","title":"listen.host","text":"AboutValue <p>IP address that the server will bind to.</p> <p>String describing the interface the server should bind to. [default: any]</p> <ul> <li> <p><code>ssh</code> - the server will reply from the IP address that the SSH connection   came from (as found in the <code>SSH_CONNECTION</code> environment variable). This   is useful for multihomed servers.</p> </li> <li> <p><code>any</code> - the server will reply on the default interface and will not bind   to a particular IP address. This can be useful if the connection is made   through ssh or another tool that makes the ssh connection appear to come   from localhost.</p> </li> <li> <p><code>&lt;IP&gt;</code> - the server will attempt to bind to the specified IP address.</p> </li> </ul> Example<pre><code>[server]\n[server.listen]\nhost = \"192.168.1.5\"\n</code></pre>"},{"location":"reference/cli/config/server/#listenport","title":"listen.port","text":"AboutValue <p>Port(s) that the server will attempt to bind to.</p> <p>String that can be in the form of <code>PORT</code> or <code>PORT1:PORTN</code> to provide a range of ports. [default: 0]</p> <p>With <code>0</code>, the server will let the operating system pick an available TCP port.</p> <p>Note</p> <p>This option does not affect the server-side port used by ssh.</p> Example<pre><code>[server]\n[server.listen]\nport = \"8080:8089\"\n</code></pre>"},{"location":"reference/cli/config/server/#listenuse_ipv6","title":"listen.use_ipv6","text":"AboutValue <p>Whether to bind to the ipv6 interface if host is <code>any</code> instead of ipv4.</p> <p>Boolean indicating to use ipv6. [default: false]</p> Example<pre><code>[server]\n[server.listen]\nuse_ipv6 = true\n</code></pre>"},{"location":"reference/cli/config/server/#listenshutdown","title":"listen.shutdown","text":"AboutValue <p>Logic to apply to server when determining when to shutdown.</p> <p>String representing shutdown rule. [default: never]</p> <ul> <li><code>never</code> - server will never automatically shut down.</li> <li><code>after=&lt;N&gt;</code> - server will shut down after <code>N</code> seconds.</li> <li><code>lonely=&lt;N&gt;</code> - server will shut down after <code>N</code> seconds with no connections.</li> </ul> Example<pre><code>[server]\n[server.listen]\nshutdown = \"lonely=60\"\n</code></pre>"},{"location":"reference/cli/config/server/#listencurrent_dir","title":"listen.current_dir","text":"AboutValue <p>Current working directory (cwd) for the server.</p> <p>String representing the path of the current working directory. [default: parent proc cwd]</p> Example<pre><code>[server]\n[server.listen]\ncurrent_dir = \"/path/to/dir\"\n</code></pre>"},{"location":"reference/cli/config/server/#watchnative","title":"watch.native","text":"AboutValue <p>Use native filesystem watching (more efficient).</p> <p>Boolean indicating whether to use native filesystem watching or leverage a software polling of files and directories to detect changes. [default: true]</p> Example<pre><code>[server]\n[server.watch]\nnative = false\n</code></pre>"},{"location":"reference/cli/config/server/#watchpoll_interval","title":"watch.poll_interval","text":"AboutValue <p>Time between polls of files being watched, only relevant when using the polling watcher implementation (ignored with native watcher).</p> <p>Integer time in seconds.</p> Example<pre><code>[server]\n[server.watch]\npoll_interval = 30\n</code></pre>"},{"location":"reference/cli/config/server/#watchcompare_contents","title":"watch.compare_contents","text":"AboutValue <p>Load a file and compare its contents to detect file changes, only relevant when using the polling watcher implementation (very slow).</p> <p>Boolean indicating if contents should be loaded to check for changes. [default: false]</p> Example<pre><code>[server]\n[server.watch]\ncompare_contents = true\n</code></pre>"},{"location":"reference/cli/config/server/#watchdebounce_timeout","title":"watch.debounce_timeout","text":"AboutValue <p>Maximum time to wait for filesystem changes before reporting them, which is useful to avoid noisy changes as well as serves to consolidate different events that represent the same action.</p> <p>Time in seconds to wait for filesystem changes. [default: 2]</p> Example<pre><code>[server]\n[server.watch]\ndebounce_timeout = 0.5\n</code></pre>"},{"location":"reference/cli/config/server/#watchdebounce_tick_rate","title":"watch.debounce_tick_rate","text":"AboutValue <p>How often in seconds to check for new events before the debounce timeout occurs.</p> <p>Time in seconds between checks for new events. [default: 1/4 of debounce_timeout]</p> Example<pre><code>[server]\n[server.watch]\ndebounce_tick_rate = 0.125\n</code></pre>"},{"location":"reference/cli/guides/spawning-the-manager/","title":"Spawning the manager","text":""},{"location":"reference/cli/guides/spawning-the-manager/#service","title":"Service","text":"<p>Install distant as a service on your local machine, which will leverage the operating system's service manager to keep distant running, start distant when your machine first boots, etc.</p> <pre><code>distant manager service install\n</code></pre> <p>The above will attempt to detect your operating system's service manager and install the appropriate files to run the manager automatically.</p> <p>If you are running this as a non-root user, then you may want to include the <code>--user</code> flag. If the service manager supports user-level services, this will install distant as a user-level service.</p> <pre><code>distant manager service install --user\n</code></pre> <p>Once installed, you will then start the service by running <code>distant manager service start</code> or <code>distant manager service start --user</code>.</p>"},{"location":"reference/cli/guides/spawning-the-manager/#daemon","title":"Daemon","text":"<p>Run the distant manager as a background daemon. This will spawn the distant manager and fork the process on Unix or detach the existing process on Windows.</p> <pre><code>distant manager listen --daemon\n</code></pre>"},{"location":"reference/cli/guides/spawning-the-manager/#foreground","title":"Foreground","text":"<p>Run the distant manager as a foreground process. This will spawn the distant manager and have it listen for requests. You can use this when you want to manager the process entirely yourself.</p> <pre><code>distant manager listen\n</code></pre>"},{"location":"reference/cli/json-api/","title":"JSON API","text":"<p>The distant CLI offers a robust API in the form of JSON requests and responses that are sent over stdin and stdout. When programmatically interacting with distant, this API can be a great way to maintain a singular connection to the server whether distant, ssh, or a future offering.</p> <p>Today, there are two primary message formats that a client wishing to use the JSON API must support:</p> <ul> <li> <p>Authentication - when a server (or manager) needs to   validate the client's access. This can occur when launching or   connecting to a server, but is not limited to occurring in those   situations. Authentication messages can technically be received at any time,   such as when a server has expired access for a client and the client needs to   reauthenticate.</p> </li> <li> <p>Messages - the core API communicating between a client and a   server. Any action the server has available is offered here, and while most   communication starts by a client sending a request to the server, the order   of messages is not guaranteed and asynchronous messages can be sent to the   client by the server at any time.</p> </li> </ul>"},{"location":"reference/cli/json-api/authentication/","title":"Authentication","text":"<p>When a server (or manager) needs to validate the client's access. This can occur when launching or connecting to a server, but is not limited to occurring in those situations.</p> <p>Authentication messages can technically be received at any time, such as when a server has expired access for a client and the client needs to re-authenticate.</p> <p>Note</p> <p>All authentication methods will contain a <code>type</code> field denoting their purpose.</p>"},{"location":"reference/cli/json-api/authentication/#initialization","title":"Initialization","text":"<p>When authentication first begins, a JSON message is sent from the server to the client containing a <code>type</code> of auth_initialization and an additional <code>methods</code> field representing array of strings describing the possible ways the server can authenticate the client.</p> Request<pre><code>{\n\"type\": \"auth_initialization\",\n\"methods\": [\"...\", \"...\"]\n}\n</code></pre>"},{"location":"reference/cli/json-api/authentication/#types-of-methods","title":"Types of methods","text":"<ul> <li>none: indicates that the server does not need authentication. This is   normally found with the manager, which itself is a server that listens for   actions to perform. Normal practice is to respond with just none as the   method choice.</li> <li>static_key: indicates that the server can authenticate using a singular,   32-byte string key. Typically, this key lasts the lifetime of the server and   does not change.</li> </ul>"},{"location":"reference/cli/json-api/authentication/#response","title":"Response","text":"<p>In response to initialization, a JSON message should be sent comprised of a <code>type</code> set to auth_initialization_response and an additional <code>methods</code> field representing which of the presented authentication methods the client wants to attempt.</p> Response<pre><code>{\n\"type\": \"auth_initialization_response\",\n\"methods\": [\"...\", \"...\"]\n}\n</code></pre>"},{"location":"reference/cli/json-api/authentication/#start-method","title":"Start Method","text":"<p>When authentication begins challenges for a specific method, a JSON message is sent from the server to the client containing a <code>type</code> of auth_start_method and an additional <code>method</code> field indicating which method is starting.</p> Request<pre><code>{\n\"type\": \"auth_start_method\",\n\"method\": \"...\"\n}\n</code></pre> <p>Note</p> <p>There is no response for this request. It is purely informative.</p>"},{"location":"reference/cli/json-api/authentication/#challenge","title":"Challenge","text":"<p>The primary method of authentication, one or more challenges will be issued to the client by the server. For each challenge, a JSON message is sent containing a <code>type</code> of auth_challenge and two additional fields: <code>questions</code> and <code>options</code>.</p> Request<pre><code>{\n\"type\": \"auth_challenge\",\n\"questions\": [\n{\n\"label\": \"...\", \"text\": \"...\", \"options\": { \"...\": \"...\" }\n}\n],\n\"options\": { \"...\": \"...\" }\n}\n</code></pre>"},{"location":"reference/cli/json-api/authentication/#explanation-of-fields","title":"Explanation of fields","text":"<ul> <li> <p><code>questions</code>: is an object comprised of a <code>label</code>, <code>text</code>, and <code>options</code>.</p> <ul> <li> <p><code>label</code>: describes the challenge such as key when asking for a key for   the static_key method. This can be used programmatically to determine   what is being asked.</p> </li> <li> <p><code>text</code>: more robust, human-readable text associated with the challenge.   This can typically be printed when a human is interacting with   authentication to answer questions.</p> </li> <li> <p><code>options</code>: object comprised of additional options associated with the   question.</p> <p>For ssh, this may include zero or more of specialized fields:</p> <ul> <li> <p><code>echo</code>: if <code>\"true\"</code>, indicates the answer being typed should be     printed out, otherwise it is sensitive and should be hidden.</p> </li> <li> <p><code>instructions</code>: additional text to print out related to the     question.</p> </li> <li> <p><code>username</code>: name of a specific user tied to the question.</p> </li> </ul> </li> </ul> </li> <li> <p><code>options</code>: object comprised of additional options associated with the   challenge.</p> </li> </ul>"},{"location":"reference/cli/json-api/authentication/#response_1","title":"Response","text":"<p>In response to a challenge, a JSON message should be sent comprised of a <code>type</code> set to auth_challenge_response and an additional <code>answers</code> field comprised of an answer to each of the questions provided in the request. This field should have the same number of entries as the <code>questions</code> field.</p> Response<pre><code>{\n\"type\": \"auth_challenge_response\",\n\"answers\": [\"...\", \"...\"]\n}\n</code></pre>"},{"location":"reference/cli/json-api/authentication/#verification","title":"Verification","text":"<p>Alongside challenges, the server may also request the client verify certain information before proceeding. In this situation, a JSON message is sent containing a <code>type</code> of auth_verification and two additional fields: <code>kind</code> and <code>text</code>. The text field serves as a human-readable explanation of the ask.</p> Request<pre><code>{\n\"type\": \"auth_verification\",\n\"kind\": \"...\",\n\"text\": \"...\"\n}\n</code></pre>"},{"location":"reference/cli/json-api/authentication/#types-of-verification","title":"Types of verification","text":"<ul> <li>host: an ask to verify the host such as with SSH</li> <li>unknown: an unknown ask (happens when the client is unaware of the kind)</li> </ul>"},{"location":"reference/cli/json-api/authentication/#response_2","title":"Response","text":"<p>In response to verification, a JSON message should be sent comprised of a <code>type</code> set to auth_verification_response and an additional <code>valid</code> field indicating to accept the request (<code>true</code>), or deny it (<code>false</code>).</p> Response<pre><code>{\n\"type\": \"auth_verification_response\",\n\"valid\": true\n}\n</code></pre>"},{"location":"reference/cli/json-api/authentication/#info","title":"Info","text":"<p>When additional information is available during authentication , a JSON message is sent from the server to the client containing a <code>type</code> of auth_info alongside a <code>text</code> field, which contains the additional information.</p> Request<pre><code>{\n\"type\": \"auth_info\",\n\"text\": \"...\"\n}\n</code></pre> <p>Note</p> <p>There is no response for this request. It is purely informative.</p>"},{"location":"reference/cli/json-api/authentication/#error","title":"Error","text":"<p>When authentication encounters an error (typically failing a challenge), a JSON message is sent from the server to the client containing a <code>type</code> of auth_error alongside two additional fields: <code>kind</code> and <code>text</code>. The <code>text</code> field is a description of the error.</p> Request<pre><code>{\n\"type\": \"auth_error\",\n\"kind\": \"fatal|error\",\n\"text\": \"...\"\n}\n</code></pre>"},{"location":"reference/cli/json-api/authentication/#types-of-errors","title":"Types of errors","text":"<p>The <code>kind</code> field can be one of two values:</p> <ul> <li>error: the error can be recovered and authentication will continue.</li> <li>fatal: the error cannot be recovered and the connection will be severed.</li> </ul> <p>Note</p> <p>There is no response for this request. It is purely informative.</p>"},{"location":"reference/cli/json-api/authentication/#finished","title":"Finished","text":"<p>When authentication has completed successfully, a JSON message is sent from the server to the client containing a <code>type</code> of auth_finished.</p> Request<pre><code>{\n\"type\": \"auth_finished\"\n}\n</code></pre> <p>Note</p> <p>There is no response for this request. It is purely informative.</p>"},{"location":"reference/cli/json-api/messages/","title":"Messages","text":"<p>When using the API command, messages can be sent between the client and server using the JSON lines text format. This means that all JSON messages are sent where each line is a valid JSON message and the line separator is <code>\\n</code>.</p>"},{"location":"reference/cli/json-api/messages/#message-format","title":"Message format","text":"<p>All messages contain at least two fields:</p> <ul> <li><code>id</code>: string representing a unique id associated with the message.</li> <li><code>payload</code>: arbitrary payload tied to the message.</li> </ul> <pre><code>{\n\"id\": \"...\",\n\"payload\": ???\n}\n</code></pre> <p>In the case of responses, there is an additional field:</p> <ul> <li><code>origin_id</code>: string matching the <code>id</code> of the request that led to this   response. More than one response can be sent for the same request, and each   of those responses will have the same <code>origin_id</code>.</li> </ul> <pre><code>{\n\"id\": \"...\",\n\"origin_id\": \"...\",\n\"payload\": ???\n}\n</code></pre> <p>In addition to specific fields, requests and responses can both have an optional <code>headers</code> field, which is an object of key-value pairs. The use of this field is optional, can be missing from requests and responses, and can be handled differently in each implementation of distant's protocol.</p>"},{"location":"reference/cli/json-api/messages/#payload-format","title":"Payload format","text":"<p>The payload represents the actual data associated with a request or response. This can come in one of two formats:</p> <ul> <li> <p>object: if the message represents a singular request or response, the   payload will be an object with a <code>type</code> field and zero or more additional   fields associated with the particular request/response.</p> <pre><code>{\n\"type\": \"...\"\n}\n</code></pre> </li> <li> <p>array: if the message represents multiple requests or responses, the   payload will be an array of objects, each with a <code>type</code> field and zero or   more additional fields associated with the particular request/response.</p> <pre><code>[\n{\n\"type\": \"...\"\n}\n]\n</code></pre> </li> </ul>"},{"location":"reference/cli/json-api/messages/#batch-requests","title":"Batch requests","text":"<p>When sending multiple requests, they can be bundled in a singular JSON object by adding them as payload array. As a result, servers are expected to process these requests concurrently and send back a singular result object with a payload array in the same order as the requests.</p> <pre><code>{\n\"id\": \"...\",\n\"payload\": [{ \"type\": \"...\" }, { \"type\": \"...\" }]\n}\n</code></pre> <p>If requests need to be processed in order, such as writing a file and reading its metadata, the request header can include <code>sequence</code> with the value <code>true</code>. This indicates to the server that the payload of requests should be processed sequentially, meaning that the first payload request should be completed before the next is started.</p> <pre><code>{\n\"headers\": { \"sequence\": \"true\" },\n\"id\": \"...\",\n\"payload\": [{ \"type\": \"...\" }, { \"type\": \"...\" }]\n}\n</code></pre> <p>Note</p> <p>When processing sequentially, if a request fails, all subsequent requests in the payload will be canceled and an error will be returned in each of their places.</p>"},{"location":"reference/cli/json-api/messages/#errors","title":"Errors","text":"<p>If an error is encountered while processing a request, the error will be captured and encoded in an <code>error</code> response. The payload representing a single error is as follows:</p> <pre><code>{\n\"type\": \"error\",\n\"kind\": \"\",\n\"description\": \"...\"\n}\n</code></pre>"},{"location":"reference/cli/json-api/messages/#kinds-of-errors","title":"Kinds of errors","text":"<p>This is a non-exhaustive list of the kinds of errors that can be encountered. These mirror Rust's <code>std::io::ErrorKind</code>. Typically, the kind will be <code>other</code> unless one of the other types fits such as <code>not_found</code> for reading a file.</p> Kind Description addr_in_use a socket address could not be bound because the address is already in use elsewhere. addr_not_available a nonexistent interface was requested or the requested address was not local. already_exists an entity already exists, often a file. broken_pipe the operation failed because a pipe was closed. connection_aborted the connection was aborted (terminated) by the remote server. connection_refused the connection was refused by the remote server. connection_reset the connection was reset by the remote server. interrupted this operation was interrupted. invalid_data data not valid for the operation were encountered. invalid_input a parameter was incorrect. loop when a loop is encountered when walking a directory. not_connected the network operation failed because it was not connected yet. not_found an entity was not found, often a file. other any I/O error not part of this list. out_of_memory an operation could not be completed, because it failed to allocate enough memory. permission_denied the operation lacked the necessary privileges to complete. task_cancelled when a task is cancelled. task_panicked when a task panics. timed_out the I/O operation's timeout expired, causing it to be cancelled. unexpected_eof an error returned when an operation could not be completed because an \"end of file\" was reached prematurely. unknown catchall for an error that has no specific type. unsupported this operation is unsupported on this platform. would_block the operation needs to block to complete, but the blocking operation was requested to not occur. write_zero an error returned when an operation could not be completed because a call to <code>write</code> returned <code>Ok(0)</code>."},{"location":"reference/cli/json-api/messages/cancel_search/","title":"Cancel search","text":"<p>Stops an active search with the specified <code>id</code>.</p>"},{"location":"reference/cli/json-api/messages/cancel_search/#request","title":"Request","text":"<pre><code>{\n\"type\": \"cancel_search\",\n\"id\": 1234\n}\n</code></pre>"},{"location":"reference/cli/json-api/messages/cancel_search/#fields","title":"Fields","text":"<ul> <li><code>id</code>: the id of the search to cancel. This should match the id received from   the <code>search_started</code> message.</li> </ul>"},{"location":"reference/cli/json-api/messages/cancel_search/#response","title":"Response","text":"<pre><code>{\n\"type\": \"ok\"\n}\n</code></pre>"},{"location":"reference/cli/json-api/messages/copy/","title":"Copy","text":"<p>Copies a file or directory designated by <code>src</code> to <code>dst</code>.</p> <p>Note</p> <p>This will automatically copy directories recursively, meaning their entire contents will be copied.</p>"},{"location":"reference/cli/json-api/messages/copy/#request","title":"Request","text":"<pre><code>{\n\"type\": \"copy\",\n\"src\": \"...\",\n\"dst\": \"...\"\n}\n</code></pre>"},{"location":"reference/cli/json-api/messages/copy/#fields","title":"Fields","text":"<ul> <li> <p><code>src</code>: absolute or relative path to be copied.</p> </li> <li> <p><code>dst</code>: absolute or relative path where to place the copy.</p> </li> </ul>"},{"location":"reference/cli/json-api/messages/copy/#response","title":"Response","text":"<pre><code>{\n\"type\": \"ok\"\n}\n</code></pre>"},{"location":"reference/cli/json-api/messages/dir_create/","title":"Dir create","text":"<p>Creates a directory designated by <code>path</code>.</p>"},{"location":"reference/cli/json-api/messages/dir_create/#request","title":"Request","text":"<pre><code>{\n\"type\": \"dir_create\",\n\"path\": \"...\",\n\"all\": false\n}\n</code></pre>"},{"location":"reference/cli/json-api/messages/dir_create/#fields","title":"Fields","text":"<ul> <li> <p><code>path</code>: absolute or relative path to the directory to create.</p> </li> <li> <p><code>all</code>: (optional, default: <code>false</code>) whether or not to create all missing,   intermediate directories.</p> </li> </ul>"},{"location":"reference/cli/json-api/messages/dir_create/#response","title":"Response","text":"<pre><code>{\n\"type\": \"ok\"\n}\n</code></pre>"},{"location":"reference/cli/json-api/messages/dir_read/","title":"Dir read","text":"<p>Reads the contents of a directory designated by <code>path</code>, returning the entries.</p>"},{"location":"reference/cli/json-api/messages/dir_read/#request","title":"Request","text":"<pre><code>{\n\"type\": \"dir_read\",\n\"path\": \"...\",\n\"depth\": 1,\n\"absolute\": false,\n\"canonicalize\": false,\n\"include_root\": false\n}\n</code></pre>"},{"location":"reference/cli/json-api/messages/dir_read/#fields","title":"Fields","text":"<ul> <li> <p><code>path</code>: absolute or relative path to the directory to read.</p> </li> <li> <p><code>depth</code>: (optional, default: <code>1</code>) maximum depth to traverse with 0 indicating   there is no maximum depth and 1 indicating the most immediate children within   the directory.</p> </li> <li> <p><code>absolute</code>: (optional, default: <code>false</code>) whether or not to return absolute or   relative paths.</p> </li> <li> <p><code>canonicalize</code>: (optional, default: <code>false</code>) whether or not to canonicalize   the resulting paths, meaning returning the canonical, absolute form of a path   with all intermediate components normalized and symbolic links resolved.</p> <p>Note</p> <p>The flag absolute must be true to have absolute paths returned, even if canonicalize is flagged as true.</p> </li> <li> <p><code>include_root</code>: (optional, default: <code>false</code>) whether or not to include the   root directory in the retrieved entries.</p> <p>Note</p> <p>If included, the root directory will also be a canonicalized, returning an absolute path and will not follow any of the other flags.</p> </li> </ul>"},{"location":"reference/cli/json-api/messages/dir_read/#response","title":"Response","text":"<p>The directory entries contained with a <code>dir_entries</code> message.</p> <pre><code>{\n\"type\": \"dir_entries\",\n\"entries\": [],\n\"errors\": []\n}\n</code></pre>"},{"location":"reference/cli/json-api/messages/dir_read/#fields_1","title":"Fields","text":"<ul> <li> <p><code>entries</code>: an array of directory entries, each being an object with the   following fields:</p> <ul> <li><code>path</code>: the path to the entry within the directory.</li> <li><code>file_type</code>: the type associated with entry. One of dir, file, or   symlink.</li> <li><code>depth</code>: how deep within the root directory this entry is with 0 being   the root directory itself, 1 being a child within the directory, etc.</li> </ul> </li> <li> <p><code>errors</code>: an array of errors encountered while traversing the directory. When   the server is reading entries, it does not fail when some of the entries are   not accessible, and instead captures the error and includes it here. The   error format is the same as described in the API error   format.</p> </li> </ul>"},{"location":"reference/cli/json-api/messages/exists/","title":"Exists","text":"<p>Checks if the <code>path</code> exists.</p>"},{"location":"reference/cli/json-api/messages/exists/#request","title":"Request","text":"<pre><code>{\n\"type\": \"exists\",\n\"path\": \"...\"\n}\n</code></pre>"},{"location":"reference/cli/json-api/messages/exists/#fields","title":"Fields","text":"<ul> <li><code>path</code>: absolute or relative path to check.</li> </ul>"},{"location":"reference/cli/json-api/messages/exists/#response","title":"Response","text":"<p>The result will be returned in an <code>exists</code> message.</p> <pre><code>{\n\"type\": \"exists\",\n\"value\": false\n}\n</code></pre>"},{"location":"reference/cli/json-api/messages/exists/#fields_1","title":"Fields","text":"<ul> <li><code>value</code>: will be <code>true</code> if the path exists, otherwise <code>false</code>.</li> </ul>"},{"location":"reference/cli/json-api/messages/file_append/","title":"File append","text":"<p>Appends to a file pointed to by <code>path</code>.</p>"},{"location":"reference/cli/json-api/messages/file_append/#request","title":"Request","text":"<pre><code>{\n\"type\": \"file_append\",\n\"path\": \"...\",\n\"data\": []\n}\n</code></pre>"},{"location":"reference/cli/json-api/messages/file_append/#fields","title":"Fields","text":"<ul> <li><code>path</code>: absolute or relative path to the file to write.</li> <li><code>data</code>: byte array representing the contents to append.</li> </ul>"},{"location":"reference/cli/json-api/messages/file_append/#response","title":"Response","text":"<pre><code>{\n\"type\": \"ok\"\n}\n</code></pre>"},{"location":"reference/cli/json-api/messages/file_append_text/","title":"File append text","text":"<p>Appends to a file pointed to by <code>path</code>.</p>"},{"location":"reference/cli/json-api/messages/file_append_text/#request","title":"Request","text":"<pre><code>{\n\"type\": \"file_append_text\",\n\"path\": \"...\",\n\"text\": \"...\"\n}\n</code></pre>"},{"location":"reference/cli/json-api/messages/file_append_text/#fields","title":"Fields","text":"<ul> <li><code>path</code>: absolute or relative path to the file to write.</li> <li><code>text</code>: UTF-8 compliant text to append to the file.</li> </ul>"},{"location":"reference/cli/json-api/messages/file_append_text/#response","title":"Response","text":"<pre><code>{\n\"type\": \"ok\"\n}\n</code></pre>"},{"location":"reference/cli/json-api/messages/file_read/","title":"File read","text":"<p>Reads an entire file pointed to by <code>path</code> and returns the file's contents as bytes.</p>"},{"location":"reference/cli/json-api/messages/file_read/#request","title":"Request","text":"<pre><code>{\n\"type\": \"file_read\",\n\"path\": \"...\"\n}\n</code></pre>"},{"location":"reference/cli/json-api/messages/file_read/#fields","title":"Fields","text":"<ul> <li><code>path</code>: absolute or relative path to the file to read.</li> </ul>"},{"location":"reference/cli/json-api/messages/file_read/#response","title":"Response","text":"<p>The file's bytes will be returned in a <code>blob</code> message.</p> <pre><code>{\n\"type\": \"blob\",\n\"data\": []\n}\n</code></pre>"},{"location":"reference/cli/json-api/messages/file_read/#fields_1","title":"Fields","text":"<ul> <li><code>data</code>: contents of the file as a byte array where each element is a single   byte.</li> </ul>"},{"location":"reference/cli/json-api/messages/file_read_text/","title":"File read text","text":"<p>Reads an entire file pointed to by <code>path</code> and returns the file's contents as UTF-8 text. Will fail if the file cannot be represented as UTF-8 text.</p>"},{"location":"reference/cli/json-api/messages/file_read_text/#request","title":"Request","text":"<pre><code>{\n\"type\": \"file_read_text\",\n\"path\": \"...\"\n}\n</code></pre>"},{"location":"reference/cli/json-api/messages/file_read_text/#fields","title":"Fields","text":"<ul> <li><code>path</code>: absolute or relative path to the file to read.</li> </ul>"},{"location":"reference/cli/json-api/messages/file_read_text/#response","title":"Response","text":"<p>The file's bytes will be returned in a <code>text</code> message.</p> <pre><code>{\n\"type\": \"text\",\n\"data\": \"...\"\n}\n</code></pre>"},{"location":"reference/cli/json-api/messages/file_read_text/#fields_1","title":"Fields","text":"<ul> <li><code>data</code>: contents of the file as UTF-8 text.</li> </ul>"},{"location":"reference/cli/json-api/messages/file_write/","title":"File write","text":"<p>Writes to a file pointed to by <code>path</code>, overwriting it if it exists.</p>"},{"location":"reference/cli/json-api/messages/file_write/#request","title":"Request","text":"<pre><code>{\n\"type\": \"file_write\",\n\"path\": \"...\",\n\"data\": []\n}\n</code></pre>"},{"location":"reference/cli/json-api/messages/file_write/#fields","title":"Fields","text":"<ul> <li><code>path</code>: absolute or relative path to the file to write.</li> <li><code>data</code>: byte array representing the file's contents.</li> </ul>"},{"location":"reference/cli/json-api/messages/file_write/#response","title":"Response","text":"<pre><code>{\n\"type\": \"ok\"\n}\n</code></pre>"},{"location":"reference/cli/json-api/messages/file_write_text/","title":"File write text","text":"<p>Writes to a file pointed to by <code>path</code>, overwriting it if it exists.</p>"},{"location":"reference/cli/json-api/messages/file_write_text/#request","title":"Request","text":"<pre><code>{\n\"type\": \"file_write_text\",\n\"path\": \"...\",\n\"text\": \"...\"\n}\n</code></pre>"},{"location":"reference/cli/json-api/messages/file_write_text/#fields","title":"Fields","text":"<ul> <li><code>path</code>: absolute or relative path to the file to write.</li> <li><code>text</code>: UTF-8 compliant text to use as the file's contents.</li> </ul>"},{"location":"reference/cli/json-api/messages/file_write_text/#response","title":"Response","text":"<pre><code>{\n\"type\": \"ok\"\n}\n</code></pre>"},{"location":"reference/cli/json-api/messages/metadata/","title":"Metadata","text":"<p>Read filesystem metadata for <code>path</code>.</p>"},{"location":"reference/cli/json-api/messages/metadata/#request","title":"Request","text":"<pre><code>{\n\"type\": \"metadata\",\n\"path\": \"...\",\n\"canonicalize\": false,\n\"resolve_file_type\": false\n}\n</code></pre>"},{"location":"reference/cli/json-api/messages/metadata/#fields","title":"Fields","text":"<ul> <li> <p><code>path</code>: absolute or relative path whose metadata to read.</p> </li> <li> <p><code>canonicalize</code>: (optional, default: <code>false</code>) whether or not to canonicalize   the path, returning the canonical, absolute form of the path as part   of the response.</p> </li> <li> <p><code>resolve_file_type</code>: (optional, default: <code>false</code>) if true, populates the   returned file type with the underlying type referenced in the situation where   the path points to a symlink. Otherwise, the file type will report <code>symlink</code>.</p> </li> </ul>"},{"location":"reference/cli/json-api/messages/metadata/#response","title":"Response","text":"<pre><code>{\n\"type\": \"metadata\",\n\"canonicalized_path\": \"...\",\n\"file_type\": \"...\",\n\"len\": 1234,\n\"readonly\": false,\n\"accessed\": 1234,\n\"created\": 1234,\n\"modified\": 1234,\n\"unix\": {},\n\"windows\": {}\n}\n</code></pre>"},{"location":"reference/cli/json-api/messages/metadata/#fields_1","title":"Fields","text":"<ul> <li> <p><code>canonicalized_path</code>: (optional) canonicalized path to the file or directory,   resolving symlinks and relative components, only included if flagged during   the request.</p> </li> <li> <p><code>file_type</code>: any one of dir, file, or symlink.</p> </li> <li> <p><code>len</code>: size of the file/directory in bytes.</p> </li> <li> <p><code>readonly</code>: whether or not the path is marked as unwriteable.</p> </li> <li> <p><code>accessed</code>: (optional) represents the last time as a Unix timestamp (in   seconds) when the path was accessed; can be optional as certain systems don't   support this.</p> </li> <li> <p><code>created</code>: (optional) represents the Unix timestamp (in seconds) when the   path was created; can be optional as certain systems don't support this.</p> </li> <li> <p><code>modified</code>: (optional) represents the Unix timestamp (in seconds) when the   path was last modified; can be optional as certain systems don't support   this.</p> </li> <li> <p><code>unix</code>: (optional) an object comprised of additional metadata only available   on Unix systems. All fields within the object are optional.</p> Name Description owner_read true if owner can read from the file owner_write true if owner can write to the file owner_exec true if owner can execute the file group_read true if associated group can read from the file group_write true if associated group can write to the file group_exec true if associated group can execute the file other_read true if others can read from the file other_write true if others can write to the file other_exec true if others can execute the file </li> <li> <p><code>windows</code>: (optional) an object comprised of additional metadata only   available on Windows systems. All fields within the object are optional.</p> Name Description archive represents whether or not a file or directory is an archive compressed represents whether or not a file or directory is compressed encrypted represents whether or not the file or directory is encrypted hidden represents whether or not a file or directory is hidden integrity_stream represents whether or not a directory or user data stream is configured with integrity normal represents whether or not a file does not have other attributes set not_content_indexed represents whether or not a file or directory is not to be indexed by content indexing service no_scrub_data represents whether or not a user data stream is not to be read by the background data integrity scanner offline represents whether or not the data of a file is not available immediately recall_on_data_access represents whether or not a file or directory is not fully present locally recall_on_open represents whether or not a file or directory has no physical representation on the local system (is virtual) reparse_point represents whether or not a file or directory has an associated reparse point, or a file is a symbolic link sparse_file represents whether or not a file is a sparse file system represents whether or not a file or directory is used partially or exclusively by the operating system temporary represents whether or not a file is being used for temporary storage </li> </ul>"},{"location":"reference/cli/json-api/messages/proc_kill/","title":"Proc kill","text":"<p>Kill a running process with the distant-specific <code>id</code>.</p>"},{"location":"reference/cli/json-api/messages/proc_kill/#request","title":"Request","text":"<pre><code>{\n\"type\": \"proc_kill\",\n\"id\": 1234\n}\n</code></pre>"},{"location":"reference/cli/json-api/messages/proc_kill/#fields","title":"Fields","text":"<ul> <li><code>id</code>: the id of the process to kill, which should match the <code>id</code> received   from the <code>proc_spawned</code> message.</li> </ul>"},{"location":"reference/cli/json-api/messages/proc_kill/#response","title":"Response","text":"<pre><code>{\n\"type\": \"ok\"\n}\n</code></pre>"},{"location":"reference/cli/json-api/messages/proc_resize_pty/","title":"Proc resize pty","text":"<p>Resizes the pseudo-terminal of a running process with the distant-specific <code>id</code>.</p>"},{"location":"reference/cli/json-api/messages/proc_resize_pty/#request","title":"Request","text":"<pre><code>{\n\"type\": \"proc_resize_pty\",\n\"id\": 1234,\n\"size\": {\n\"rows\": 80,\n\"cols\": 24,\n\"pixel_width\": 0,\n\"pixel_height\": 0\n}\n}\n</code></pre>"},{"location":"reference/cli/json-api/messages/proc_resize_pty/#fields","title":"Fields","text":"<ul> <li> <p><code>id</code>: the id of the process, which should match the <code>id</code> received from the   <code>proc_spawned</code> message.</p> </li> <li> <p><code>size</code>: object defining the new size for an existing pseudo-terminal tied to   the process.</p> <ul> <li><code>rows</code>: number of rows (lines) for the pty.</li> <li><code>cols</code>: number of columns for the pty.</li> <li><code>pixel_width</code>: (optional) width of a cell in pixels. Note that some   systems never fill this value and ignore it.</li> <li><code>pixel_height</code>: (optional) height of a cell in pixels. Note that some   systems never fill this value and ignore it.</li> </ul> </li> </ul>"},{"location":"reference/cli/json-api/messages/proc_resize_pty/#response","title":"Response","text":"<pre><code>{\n\"type\": \"ok\"\n}\n</code></pre>"},{"location":"reference/cli/json-api/messages/proc_spawn/","title":"Proc spawn","text":"<p>Spawns a new process.</p>"},{"location":"reference/cli/json-api/messages/proc_spawn/#request","title":"Request","text":"<pre><code>{\n\"type\": \"proc_spawn\",\n\"cmd\": \"...\",\n\"environment\": {},\n\"current_dir\": \"...\",\n\"pty\": {}\n}\n</code></pre>"},{"location":"reference/cli/json-api/messages/proc_spawn/#fields","title":"Fields","text":"<ul> <li> <p><code>cmd</code>: the full command to execute. For example, this could be <code>ls -l</code> to   list directories. It is up to the underlying server implementation to   evaluate the command and split it up into individual arguments if necessary.</p> <p>Note that it is not expected that a server implementation evaluate environment variables in a traditional format such as <code>echo $PATH</code>. While implementations can differ, the base behavior is to execute the command as-is, meaning that evaluating environment variables may require wrapping the command in a shell such as <code>/bin/sh -c \"echo $PATH\"</code>.</p> </li> <li> <p><code>environment</code>: (optional) map in the form of string -&gt; string where the keys   are the environment variable names and the values will be used as the values   for those variables. This is a way to provide environment variables to   spawned processes beyond those inherited from the server. (e.g. <code>{\"HELLO\":   \"WORLD\"}</code>)</p> </li> <li> <p><code>current_dir</code>: (optional) path to an alternative directory to use as the   current directory for the spawned process. By default, the process will   inherit the current working directory from the server.</p> </li> <li> <p><code>pty</code>: (optional) object defining the parameters for a pseudo-terminal that   the spawned process should be run within. Without this object, it is not   expected that the process runs within a pseudo-terminal.</p> <ul> <li><code>rows</code>: number of rows (lines) for the pty. If you don't know, 80 is a   good number to use as a default.</li> <li><code>cols</code>: number of columns for the pty. If you don't know, 24 is a good   number to use as a default.</li> <li><code>pixel_width</code>: (optional) width of a cell in pixels. Note that some   systems never fill this value and ignore it.</li> <li><code>pixel_height</code>: (optional) height of a cell in pixels. Note that some   systems never fill this value and ignore it.</li> </ul> </li> </ul>"},{"location":"reference/cli/json-api/messages/proc_spawn/#response","title":"Response","text":"<p>The immediate response will be a confirmation that a process was spawned with a numeric <code>id</code> associated with the process. Note that this <code>id</code> does not necessarily match a PID or other operating system specific id:</p> <pre><code>{\n\"type\": \"proc_spawned\",\n\"id\": 1234\n}\n</code></pre>"},{"location":"reference/cli/json-api/messages/proc_spawn/#process-stdout","title":"Process stdout","text":"<p>As content is output to the stdout of the process, new <code>proc_stdout</code> messages will be produced by the server:</p> <pre><code>{\n\"type\": \"proc_stdout\",\n\"id\": 1234,\n\"data\": []\n}\n</code></pre> <ul> <li><code>id</code>: same as the one provided in <code>proc_spawned</code>.</li> <li><code>data</code>: byte array representing the output sent to the stdout of the process.   In many cases, this can safely be converted to a UTF-8 string, but because   not all operating systems or processes produce valid UTF-8 output, this is   transmitted as a byte array instead.</li> </ul>"},{"location":"reference/cli/json-api/messages/proc_spawn/#process-stderr","title":"Process stderr","text":"<p>As content is output to the stderr of the process, new <code>proc_stderr</code> messages will be produced by the server:</p> <pre><code>{\n\"type\": \"proc_stderr\",\n\"id\": 1234,\n\"data\": []\n}\n</code></pre> <ul> <li><code>id</code>: same as the one provided in <code>proc_spawned</code>.</li> <li><code>data</code>: byte array representing the output sent to the stderr of the process.   In many cases, this can safely be converted to a UTF-8 string, but because   not all operating systems or processes produce valid UTF-8 output, this is   transmitted as a byte array instead.</li> </ul>"},{"location":"reference/cli/json-api/messages/proc_spawn/#process-done","title":"Process done","text":"<p>When the process completes, a final message will be sent to indicate the result of executing the process:</p> <pre><code>{\n\"type\": \"proc_done\",\n\"id\": 1234,\n\"success\": true,\n\"code\": 0\n}\n</code></pre> <ul> <li><code>id</code>: same as the one provided in <code>proc_spawned</code>.</li> <li><code>success</code>: indicates whether or not the process exited successfully. Should   always be included as either <code>true</code> or <code>false</code>.</li> <li><code>code</code>: (optional) specific exit code tied to the process. This can be a   traditional Unix exit code or (conventionally) 128 + <code>&lt;signal number&gt;</code>. Not   guaranteed to be included, although for any Unix process this should be   present.</li> </ul>"},{"location":"reference/cli/json-api/messages/proc_stdin/","title":"Proc stdin","text":"<p>Sends bytes to the stdin of a running process with the distant-specific <code>id</code>.</p>"},{"location":"reference/cli/json-api/messages/proc_stdin/#request","title":"Request","text":"<pre><code>{\n\"type\": \"proc_stdin\",\n\"id\": 1234,\n\"data\": []\n}\n</code></pre>"},{"location":"reference/cli/json-api/messages/proc_stdin/#fields","title":"Fields","text":"<ul> <li> <p><code>id</code>: the id of the process, which should match the <code>id</code> received from the   <code>proc_spawned</code> message.</p> </li> <li> <p><code>data</code>: byte array representing the data to send to the stdin of the   process.</p> </li> </ul>"},{"location":"reference/cli/json-api/messages/proc_stdin/#response","title":"Response","text":"<pre><code>{\n\"type\": \"ok\"\n}\n</code></pre>"},{"location":"reference/cli/json-api/messages/remove/","title":"Remove","text":"<p>Removes a file or directory designated by <code>path</code>.</p>"},{"location":"reference/cli/json-api/messages/remove/#request","title":"Request","text":"<pre><code>{\n\"type\": \"remove\",\n\"path\": \"...\",\n\"force\": false\n}\n</code></pre>"},{"location":"reference/cli/json-api/messages/remove/#fields","title":"Fields","text":"<ul> <li> <p><code>path</code>: absolute or relative path to remove.</p> </li> <li> <p><code>force</code>: (optional, default: <code>false</code>) whether or not to remove non-empty   directories. If a directory is not empty and this is false, then the request   will fail.</p> </li> </ul>"},{"location":"reference/cli/json-api/messages/remove/#response","title":"Response","text":"<pre><code>{\n\"type\": \"ok\"\n}\n</code></pre>"},{"location":"reference/cli/json-api/messages/rename/","title":"Rename","text":"<p>Renames a file or directory designated by <code>src</code> to <code>dst</code>.</p>"},{"location":"reference/cli/json-api/messages/rename/#request","title":"Request","text":"<pre><code>{\n\"type\": \"rename\",\n\"src\": \"...\",\n\"dst\": \"...\"\n}\n</code></pre>"},{"location":"reference/cli/json-api/messages/rename/#fields","title":"Fields","text":"<ul> <li> <p><code>src</code>: absolute or relative path to be renamed.</p> </li> <li> <p><code>dst</code>: absolute or relative path acting as the destination of the rename.</p> </li> </ul>"},{"location":"reference/cli/json-api/messages/rename/#response","title":"Response","text":"<pre><code>{\n\"type\": \"ok\"\n}\n</code></pre>"},{"location":"reference/cli/json-api/messages/search/","title":"Search","text":"<p>Searches a filesystem using a <code>query</code> to find matches in file contents or paths.</p>"},{"location":"reference/cli/json-api/messages/search/#request","title":"Request","text":"<pre><code>{\n\"type\": \"search\",\n\"query\": {\n\"target\": \"...\",\n\"condition\": {},\n\"paths\": [],\n\"options\": {\n\"allowed_file_types\": [],\n\"include\": {},\n\"exclude\": {},\n\"upward\": false,\n\"follow_symbolic_links\": false,\n\"limit\": 1234,\n\"max_depth\": 1234,\n\"pagination\": 1234,\n\"ignore_hidden\": false,\n\"use_ignore_files\": false,\n\"use_parent_ignore_files\": false,\n\"use_git_ignore_files\": false,\n\"use_global_git_ignore_files\": false,\n\"use_git_exclude_files\": false\n}\n}\n}\n</code></pre>"},{"location":"reference/cli/json-api/messages/search/#fields","title":"Fields","text":"<ul> <li> <p><code>query</code>: object containing the details of the search to perform.</p> <ul> <li> <p><code>target</code>: what to search for matches.</p> <ul> <li> <p>contents: indicates to look through the contents of files.</p> </li> <li> <p>path: indicates to look through file paths. For example, you can   provide a search for all paths that contain <code>Cargo.toml</code>.</p> </li> </ul> </li> <li> <p><code>condition</code>: the criteria to check for a match. This is an object with a   <code>type</code> field to indicate what kind of match to perform. There is also a   <code>value</code> field that varies per match type.</p> <ul> <li> <p>contains: with this type, <code>value</code> is a string representing the text   that must be contained within a file's contents or path depending on   the <code>target</code>.</p> </li> <li> <p>ends_with: with this type, <code>value</code> is a string representing the   text that must be at the end of a file's contents (per line) or path   depending on the <code>target</code>.</p> </li> <li> <p>equals: with this type, <code>value</code> is a string representing the text   that must exactly equal file's contents (per line) or path depending   on the <code>target</code>.</p> </li> <li> <p>or: with this type, <code>value</code> is a nested array of <code>condition</code>s. For   example, two separate contains conditions can be provided where a   match is valid if either is a match.</p> </li> <li> <p>regex: with this type, <code>value</code> is a string representing some   regular expression to apply to a file's contents (per line) or path   depending on the <code>target</code>.</p> </li> <li> <p>starts_with: with this type, <code>value</code> is a string representing the   text that must be at the beginning of a file's contents (per line) or   path depending on the <code>target</code>.</p> </li> </ul> </li> <li> <p><code>paths</code>: an array of strings representing the paths to search for a   match with logic based on <code>target</code> and <code>condition</code>.</p> </li> <li> <p><code>options</code>: (optional) object containing additional constraints to place   on the search as it is performed. All fields within this object are   optional, as is the object itself.</p> <ul> <li> <p><code>allowed_file_types</code>: (optional) restrict search to only these file   types (otherwise all are allowed). Types are dir, file, and   symlink.</p> </li> <li> <p><code>include</code>: (optional) condition to use to filter paths being searched   to only those that match the include condition. Applies the condition   to each path being examined, regular of the <code>target</code>. This is the   same format as the <code>condition</code> field.</p> </li> <li> <p><code>exclude</code>: (optional) condition to use to filter paths being searched   to only those that do not match the exclude condition. Applies the   condition to each path being examined, regular of the <code>target</code>. This   is the same format as the <code>condition</code> field.</p> </li> <li> <p><code>upward</code>: (optional) if true, will search upward through parent   directories rather than the traditional downward search that recurses   through all children directories.</p> <p>Note that this will use maximum depth to apply to the reverse direction, and will only look through each ancestor directory's immediate entries. In other words, this will not result in recursing through sibling directories.</p> <p>An upward search will ALWAYS search the contents of a directory, so this means providing a path to a directory will search its entries EVEN if the max_depth is 0.</p> </li> <li> <p><code>follow_symbolic_links</code>: (optional) if true, search should follow   symbolic links when examining files &amp; directories.</p> </li> <li> <p><code>limit</code>: (optional) maximum results to return before stopping the   search.</p> </li> <li> <p><code>max_depth</code>: (optional) maximum depth (directories) to search.</p> <p>The smallest depth is 0 and always corresponds to the path given  to the new function on this type. Its direct descendents have  depth 1, and their descendents have depth 2, and so on.</p> <p>Note that this will not simply filter the entries of the iterator,  but it will actually avoid descending into directories when the  depth is exceeded.</p> </li> <li> <p><code>pagination</code>: (optional) amount of results to batch before sending   back excluding final submission that will always include the   remaining results even if less than pagination request.</p> </li> <li> <p><code>ignore_hidden</code>: (optional) if true, will skip searching hidden   files.</p> </li> <li> <p><code>use_ignore_files</code>: (optional) if true, will read <code>.ignore</code> files   that are used by <code>ripgrep</code> and <code>The Silver Searcher</code> to determine   which files and directories to not search.</p> </li> <li> <p><code>use_parent_ignore_files</code>: (optional) if true, will read <code>.ignore</code>   files from parent directories that are used by <code>ripgrep</code> and <code>The   Silver Searcher</code> to determine which files and directories to not   search.</p> </li> <li> <p><code>use_git_ignore_files</code>: (optional) If true, will read <code>.gitignore</code>   files to determine which files and directories to not search.</p> </li> <li> <p><code>use_global_git_ignore_files</code>: (optional) if true, will read global   <code>.gitignore</code> files to determine which files and directories to not   search.</p> </li> <li> <p><code>use_git_exclude_files</code>: (optional) if true, will read   <code>.git/info/exclude</code> files to determine which files and directories to   not search.</p> </li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/cli/json-api/messages/search/#response","title":"Response","text":"<p>The immediate response will be a confirmation that a search started with a numeric <code>id</code> associated with the search:</p> <pre><code>{\n\"type\": \"search_started\",\n\"id\": 1234\n}\n</code></pre>"},{"location":"reference/cli/json-api/messages/search/#search-results","title":"Search results","text":"<p>As results are acquired, they can be returned as a collection of matches. The rate at which the results are returned is controlled by the <code>pagination</code> option.</p> <p>By default, only a singular collection of results is returned once the search finishes, but before the <code>search_done</code> response is sent. Pagination enables control of how many matches are collected before a <code>search_results</code> message is sent.</p> <pre><code>{\n\"type\": \"search_results\",\n\"id\": 1234,\n\"matches\": []\n}\n</code></pre> <p>The <code>id</code> field is the same as the one provided in <code>search_started</code>. The <code>matches</code> field contains a collection of objects, each being a singular match for the earlier query.</p>"},{"location":"reference/cli/json-api/messages/search/#contents-search-results","title":"Contents search results","text":"<p>When <code>target</code> is set to contents, each match will be in this format:</p> <pre><code>{\n\"type\": \"contents\",\n\"path\": \"...\",\n\"lines\": [] | {},\n\"line_number\": 1234,\n\"absolute_offset\": 1234,\n\"submatches\": []\n}\n</code></pre> <ul> <li><code>type</code>: will always be the string contents.</li> <li><code>path</code>: is the path to the file, directory, or symlink that matched.</li> <li><code>lines</code>: is the matching data for one or more lines, either as a byte   array or a string. If the data is UTF-8 format, it will be a string,   otherwise binary matches are possible.</li> <li><code>line_number</code>: line number where the match starts (base index 1).</li> <li><code>absolute_offset</code>: absolute byte offset corresponding to the start of <code>lines</code>   in the data being searched.</li> <li> <p><code>submatches</code>: collection of objects representing singular submatches tied to   <code>lines</code> where each submatch's byte offset is relative to <code>lines</code> and not the   overall content.</p> <ul> <li><code>match</code>: same as <code>lines</code> (byte array or string), but only for the   specific submatch's contents.</li> <li><code>start</code>: byte offset representing start of submatch (inclusive).</li> <li><code>end</code>: byte offset representing end of submatch (exclusive).</li> </ul> </li> </ul>"},{"location":"reference/cli/json-api/messages/search/#path-search-results","title":"Path search results","text":"<p>When <code>target</code> is set to path, each match will be in this format:</p> <pre><code>{\n\"type\": \"path\",\n\"path\": \"...\",\n\"submatches\": []\n}\n</code></pre> <ul> <li><code>type</code>: will always be the string contents.</li> <li><code>path</code>: is the path that matched.</li> <li> <p><code>submatches</code>: collection of objects representing singular submatches tied to   <code>path</code> where each submatch's byte offset is relative to <code>path</code>.</p> <ul> <li><code>match</code>: same as <code>path</code>, but only for the specific submatch's contents.</li> <li><code>start</code>: byte offset representing start of submatch (inclusive).</li> <li><code>end</code>: byte offset representing end of submatch (exclusive).</li> </ul> </li> </ul>"},{"location":"reference/cli/json-api/messages/search/#search-done","title":"Search done","text":"<p>When a search finishes, a final message will be sent with a <code>type</code> and <code>id</code> where the <code>id</code> is the same as the one received from the <code>search_started</code> message:</p> <pre><code>{\n\"type\": \"search_done\",\n\"id\": 1234\n}\n</code></pre>"},{"location":"reference/cli/json-api/messages/set_permissions/","title":"Set permissions","text":"<p>Sets filesystem permissions for <code>path</code>.</p>"},{"location":"reference/cli/json-api/messages/set_permissions/#request","title":"Request","text":"<pre><code>{\n\"type\": \"set_permissions\",\n\"path\": \"...\",\n\"permissions\": {\n\"owner_read\": true,\n\"owner_write\": true,\n\"owner_exec\": true,\n\"group_read\": true,\n\"group_write\": true,\n\"group_exec\": true,\n\"other_read\": true,\n\"other_write\": true,\n\"other_exec\": true\n},\n\"options\": {\n\"exclude_symlinks\": false,\n\"follow_symlinks\": false,\n\"recursive\": false\n}\n}\n</code></pre>"},{"location":"reference/cli/json-api/messages/set_permissions/#fields","title":"Fields","text":"<ul> <li> <p><code>path</code>: absolute or relative path whose permissions to set.</p> </li> <li> <p><code>permissions</code>: an object containing a field per possible permission to set.   The full suite of permissions matches a Unix permission set, but this can   also be used on Windows where the write flag will be used to determine if the   path should be set to readonly (write is false) or not (write is true).</p> <p>All fields within the permissions object are optional, and only those set to <code>true</code> or <code>false</code> will be applied to the path.</p> Name Description owner_read true/false to change whether owner can read from the file owner_write true/false to change whether owner can write to the file owner_exec true/false to change whether owner can execute the file group_read true/false to change whether associated group can read from the file group_write true/false to change whether associated group can write to the file group_exec true/false to change whether associated group can execute the file other_read true/false to change whether others can read from the file other_write true/false to change whether others can write to the file other_exec true/false to change whether others can execute the file </li> <li> <p><code>options</code>: (optional, default: <code>undefined</code>) additional options that can be   applied when setting permissions.</p> <ul> <li><code>exclude_symlinks</code>: (optional, default: <code>false</code>) if true, symlinks will   be ignored when traversing directories to set permissions.</li> <li><code>follow_symlinks</code>: (optional, default: <code>false</code>) if true, symlinks will   be followed when traversing directories to set permissions. Note that   this does not NOT influence setting permissions when encountering a   symlink as most systems will resolve symlinks before setting permissions.</li> <li><code>recursive</code>: (optional, default: <code>false</code>) if true, will navigate the   contents of directories to set permissions, rather than just the   directories themselves.</li> </ul> </li> </ul>"},{"location":"reference/cli/json-api/messages/set_permissions/#response","title":"Response","text":"<pre><code>{\n\"type\": \"ok\"\n}\n</code></pre>"},{"location":"reference/cli/json-api/messages/system_info/","title":"System info","text":"<p>Retrieves information about the remote system.</p>"},{"location":"reference/cli/json-api/messages/system_info/#request","title":"Request","text":"<pre><code>{\n\"type\": \"system_info\"\n}\n</code></pre>"},{"location":"reference/cli/json-api/messages/system_info/#response","title":"Response","text":"<pre><code>{\n\"type\": \"system_info\",\n\"family\": \"...\",\n\"os\": \"...\",\n\"arch\": \"...\",\n\"current_dir\": \"...\",\n\"main_separator\": \"...\",\n\"username\": \"...\",\n\"shell\": \"...\"\n}\n</code></pre>"},{"location":"reference/cli/json-api/messages/system_info/#fields","title":"Fields","text":"<ul> <li> <p><code>family</code>: family of the operating system as described in   <code>std::env::consts::FAMILY</code>.</p> </li> <li> <p><code>os</code>: name of the specific operating system as described in   <code>std::env::consts::OS</code>.</p> </li> <li> <p><code>arch</code>: architecture of the CPU as described in   <code>std::env::consts::ARCH</code>.</p> </li> <li> <p><code>current_dir</code>: current working directory of the running server process.</p> </li> <li> <p><code>main_separator</code>: Primary separator for path components for the current   platform as defined in   <code>std::path::MAIN_SEPARATOR</code>.</p> </li> <li> <p><code>username</code>: name of the user running the server process.</p> </li> <li> <p><code>shell</code>: default shell tied to user running the server process.</p> </li> </ul>"},{"location":"reference/cli/json-api/messages/system_info/#notes","title":"Notes","text":"<ul> <li>While every field is required to be returned, some implementations such as   <code>ssh</code> may not have access to all information easily. So the expectation is a   best possible approach to returning data. For anything unavailable, you can   expect an empty string, rather than an undefined value in JSON.</li> </ul>"},{"location":"reference/cli/json-api/messages/unwatch/","title":"Unwatch","text":"<p>Stops watching a <code>path</code> for changes.</p>"},{"location":"reference/cli/json-api/messages/unwatch/#request","title":"Request","text":"<pre><code>{\n\"type\": \"unwatch\",\n\"path\": \"...\"\n}\n</code></pre>"},{"location":"reference/cli/json-api/messages/unwatch/#fields","title":"Fields","text":"<ul> <li><code>path</code>: absolute or relative path to unwatch.</li> </ul>"},{"location":"reference/cli/json-api/messages/unwatch/#response","title":"Response","text":"<pre><code>{\n\"type\": \"ok\"\n}\n</code></pre>"},{"location":"reference/cli/json-api/messages/version/","title":"Version","text":"<p>Retrieves version information about the server and protocol.</p>"},{"location":"reference/cli/json-api/messages/version/#request","title":"Request","text":"<pre><code>{\n\"type\": \"version\"\n}\n</code></pre>"},{"location":"reference/cli/json-api/messages/version/#response","title":"Response","text":"<pre><code>{\n\"type\": \"version\",\n\"server_version\": \"0.20.0\",\n\"protocol_version\": \"0.20.0\",\n\"capabilities\": []\n}\n</code></pre>"},{"location":"reference/cli/json-api/messages/version/#fields","title":"Fields","text":"<ul> <li> <p><code>server_version</code>: string representing the version of the server following   Semantic Versioning.</p> </li> <li> <p><code>protocol_version</code>: string representing the version of the network protocol   (messages and authentication) following Semantic   Versioning. Note that this can be different from the   server version as the protocol stabilizes.</p> </li> <li> <p><code>capabilities</code>: array of strings representing the capabilities of the server   when it comes to implementation of the protocol. As of version <code>0.20</code>, there   are the following capabilities possible:</p> <ul> <li><code>exec</code>: supports executing processes.</li> <li><code>fs_io</code>: supports performing I/O operations on the filesystem.</li> <li><code>fs_perm</code>: supports modifying permissions on the filesystem.</li> <li><code>fs_search</code>: supports searching the filesystem.</li> <li><code>fs_watch</code>: supports watching the filesystem for changes.</li> <li><code>sys_info</code>: supports retrieving system information.</li> </ul> </li> </ul>"},{"location":"reference/cli/json-api/messages/version/#notes","title":"Notes","text":"<ul> <li>It is expected that the reference implementation of distant implements all   capabilities. For those that do not implement a capability, associated   requests should respond with an error of the <code>kind</code> unsupported.</li> </ul>"},{"location":"reference/cli/json-api/messages/watch/","title":"Watch","text":"<p>Watches a <code>path</code> for changes and reports them as they occur.</p>"},{"location":"reference/cli/json-api/messages/watch/#request","title":"Request","text":"<pre><code>{\n\"type\": \"watch\",\n\"path\": \"...\",\n\"recursive\": false,\n\"only\": [],\n\"except\": []\n}\n</code></pre>"},{"location":"reference/cli/json-api/messages/watch/#fields","title":"Fields","text":"<ul> <li> <p><code>path</code>: absolute or relative path to watch.</p> </li> <li> <p><code>recursive</code>: (optional, default: <code>false</code>) if true, will recursively watch for   changes within directories, otherwise will only watch for changes immediately   within directories.</p> </li> <li> <p><code>only</code>: (optional, default: <code>[]</code>) limits reported events to only those   specified. If empty, will not limit events. Each value is one of the change   kinds possible (see response for types).</p> </li> <li> <p><code>except</code>: (optional, default: <code>[]</code>) limits reported events to all but those   specified. If empty, will not limit events. Each value is one of the change   kinds possible (see response for types).</p> </li> </ul>"},{"location":"reference/cli/json-api/messages/watch/#response","title":"Response","text":"<p>The immediate response will be a success:</p> <pre><code>{\n\"type\": \"ok\"\n}\n</code></pre>"},{"location":"reference/cli/json-api/messages/watch/#change-event","title":"Change event","text":"<p>As events are detected, each will be sent back in this format:</p> <pre><code>{\n\"type\": \"change\",\n\"timestamp\": 1234,\n\"kind\": \"...\",\n\"path\": \"...\",\n\"details\": {\n\"attribute\": \"...\",\n\"renamed\": \"...\",\n\"timestamp\": 1234,\n\"extra\": \"...\"\n}\n}\n</code></pre>"},{"location":"reference/cli/json-api/messages/watch/#fields_1","title":"Fields","text":"<ul> <li> <p><code>timestamp</code>: the Unix timestamp in seconds for when the event occurred.</p> </li> <li> <p><code>kind</code>: the kind of change detected. Can be one of these types:</p> <ul> <li><code>access</code>: a file was read.</li> <li><code>attribute</code>: a file's or directory's attributes were changed.</li> <li><code>closeWrite</code>: a file open for writing was closed.</li> <li><code>closeNoWrite</code>: a file not open for writing was closed.</li> <li><code>create</code>: a file, directory, or something else was created within a watched directory.</li> <li><code>delete</code>: a file, directory, or something else was deleted.</li> <li><code>modify</code>: a file's content was modified.</li> <li><code>open</code>: a file was opened.</li> <li><code>rename</code>: a file, directory, or something else was renamed in some way.</li> <li><code>unknown</code>: catch-all for any other change.</li> </ul> </li> <li> <p><code>path</code>: the path to the file or directory that changed.</p> </li> <li> <p><code>details</code>: (optional, default: <code>undefined</code>) object containing extra   information dependent on the change.</p> <ul> <li><code>attribute</code>: (optional, default: <code>undefined</code>) can be <code>ownership</code>,   <code>permissions</code>, or <code>timestamp</code> and indicates what attribute was changed.</li> <li><code>renamed</code>: (optional, default: <code>undefined</code>) is the new path when some   path is renamed. In other words, what the path was renamed to.</li> <li><code>timestamp</code>: (optional, default: <code>undefined</code>) is the timestamp of the   file or directory referenced by <code>path</code>. This is populated when <code>modify</code>   is detected.</li> <li><code>extra</code>: (optional, default: <code>undefined</code>) platform-specific information.</li> </ul> </li> </ul>"},{"location":"reference/editors/neovim/guides/statusline/","title":"Statusline","text":"<p>When leveraging distant.nvim, you will be working with buffers that point to remote files and directories. It can be a little difficult to keep track of whether the buffer you are viewing is local or remote, and an easy way to distinguish is to provide some information in neovim's statusline to indicate the buffer is remote.</p> <p>In the below example, we have a function <code>statusline</code> that will return a string that you can place within your statusline.</p> <pre><code>local ICON = '\ud83d\udce1'\n\n-- Returns a statusline-compatible string\nlocal function statusline()\n    -- Attempt to load the distant.nvim plugin\n    local ok, plugin = pcall(require, 'distant')\n\n    -- Check the following to see if we are in a remote buffer\n    --\n    -- 1. Can the plugin be found?\n    -- 2. Is the plugin initialized?\n    -- 3. Does the buffer have remote data associated?\n    --\n    -- If the answer to any of these questions is no, we return\n    -- an empty string to avoid putting anything in our statusline\n    if not ok or not plugin:is_initialized() or not plugin.buf.has_data() then\n        return ''\n    end\n\n    -- At this point, we know that we have a remote buffer,\n    -- and we want to look up what server is represented,\n    -- which we do by retrieving a destination table that\n    -- contains a host string we can include alongside\n    -- a custom emoji\n    local destination = assert(plugin:client_destination(plugin.buf.client_id()))\n    return ('%s %s'):format(ICON, destination.host)\nend\n</code></pre>"}]}